
final_proj2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000252c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  0000252c  000025c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800174  00800174  000026d4  2**0
                  ALLOC
  3 .stab         000027a8  00000000  00000000  000026d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012a8  00000000  00000000  00004e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  000062a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00006475  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00008485  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  000095e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a5ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000a78c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000aa4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b358  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <main>
      8a:	0c 94 94 12 	jmp	0x2528	; 0x2528 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 85 12 	jmp	0x250a	; 0x250a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 85 12 	jmp	0x250a	; 0x250a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 85 12 	jmp	0x250a	; 0x250a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 85 12 	jmp	0x250a	; 0x250a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 85 12 	jmp	0x250a	; 0x250a <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <Buzzer_Init>:
#include "gpio.h"



void Buzzer_Init(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BuzzerPort,BuzzerPin,PIN_OUTPUT);
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	62 e0       	ldi	r22, 0x02	; 2
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_setupPinDirection>
	GPIO_writePin(BuzzerPort,BuzzerPin,LOGIC_LOW);
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	62 e0       	ldi	r22, 0x02	; 2
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <GPIO_writePin>
}
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <Buzzer_On>:

void Buzzer_On(void)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BuzzerPort,BuzzerPin,LOGIC_HIGH);
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	62 e0       	ldi	r22, 0x02	; 2
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <GPIO_writePin>
}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <Buzzer_Off>:

void Buzzer_Off(void)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BuzzerPort,BuzzerPin,LOGIC_LOW);
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	62 e0       	ldi	r22, 0x02	; 2
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <GPIO_writePin>
}
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <Timer_Callback>:
uint8 pass1[5], pass2[5], pass3[5], pass4[5], gtick=0;



void Timer_Callback(void)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
	gtick++;		/* global tick that increment every second*/
     cfa:	80 91 74 01 	lds	r24, 0x0174
     cfe:	8f 5f       	subi	r24, 0xFF	; 255
     d00:	80 93 74 01 	sts	0x0174, r24
}
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <ECU_init>:


void ECU_init(void)
{
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	67 97       	sbiw	r28, 0x17	; 23
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
     d1e:	af e5       	ldi	r26, 0x5F	; 95
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	ef e5       	ldi	r30, 0x5F	; 95
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	80 68       	ori	r24, 0x80	; 128
     d2a:	8c 93       	st	X, r24
	UART_ConfigType Config_UART = {Eight_bitdata,Disabled,one_stopbit,BR_9600};
     d2c:	ce 01       	movw	r24, r28
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	9f 87       	std	Y+15, r25	; 0x0f
     d32:	8e 87       	std	Y+14, r24	; 0x0e
     d34:	ee e6       	ldi	r30, 0x6E	; 110
     d36:	f1 e0       	ldi	r31, 0x01	; 1
     d38:	f9 8b       	std	Y+17, r31	; 0x11
     d3a:	e8 8b       	std	Y+16, r30	; 0x10
     d3c:	f5 e0       	ldi	r31, 0x05	; 5
     d3e:	fa 8b       	std	Y+18, r31	; 0x12
     d40:	e8 89       	ldd	r30, Y+16	; 0x10
     d42:	f9 89       	ldd	r31, Y+17	; 0x11
     d44:	00 80       	ld	r0, Z
     d46:	88 89       	ldd	r24, Y+16	; 0x10
     d48:	99 89       	ldd	r25, Y+17	; 0x11
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	99 8b       	std	Y+17, r25	; 0x11
     d4e:	88 8b       	std	Y+16, r24	; 0x10
     d50:	ee 85       	ldd	r30, Y+14	; 0x0e
     d52:	ff 85       	ldd	r31, Y+15	; 0x0f
     d54:	00 82       	st	Z, r0
     d56:	8e 85       	ldd	r24, Y+14	; 0x0e
     d58:	9f 85       	ldd	r25, Y+15	; 0x0f
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	9f 87       	std	Y+15, r25	; 0x0f
     d5e:	8e 87       	std	Y+14, r24	; 0x0e
     d60:	9a 89       	ldd	r25, Y+18	; 0x12
     d62:	91 50       	subi	r25, 0x01	; 1
     d64:	9a 8b       	std	Y+18, r25	; 0x12
     d66:	ea 89       	ldd	r30, Y+18	; 0x12
     d68:	ee 23       	and	r30, r30
     d6a:	51 f7       	brne	.-44     	; 0xd40 <ECU_init+0x36>
	/*config of UART as eight bit frame , no parity, one stop bit and 9600 baudrate*/
	TWI_ConfigType Config_TWI = {adress,Normal_mode};
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	8e 83       	std	Y+6, r24	; 0x06
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	8f 83       	std	Y+7, r24	; 0x07
	/*config of TWI as 01 adress, normal mode*/
	Timer1_ConfigType Config_Timer1 = {0,8000,Pre_1024,CTC};
     d74:	ce 01       	movw	r24, r28
     d76:	08 96       	adiw	r24, 0x08	; 8
     d78:	9c 8b       	std	Y+20, r25	; 0x14
     d7a:	8b 8b       	std	Y+19, r24	; 0x13
     d7c:	e8 e6       	ldi	r30, 0x68	; 104
     d7e:	f1 e0       	ldi	r31, 0x01	; 1
     d80:	fe 8b       	std	Y+22, r31	; 0x16
     d82:	ed 8b       	std	Y+21, r30	; 0x15
     d84:	f6 e0       	ldi	r31, 0x06	; 6
     d86:	ff 8b       	std	Y+23, r31	; 0x17
     d88:	ed 89       	ldd	r30, Y+21	; 0x15
     d8a:	fe 89       	ldd	r31, Y+22	; 0x16
     d8c:	00 80       	ld	r0, Z
     d8e:	8d 89       	ldd	r24, Y+21	; 0x15
     d90:	9e 89       	ldd	r25, Y+22	; 0x16
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	9e 8b       	std	Y+22, r25	; 0x16
     d96:	8d 8b       	std	Y+21, r24	; 0x15
     d98:	eb 89       	ldd	r30, Y+19	; 0x13
     d9a:	fc 89       	ldd	r31, Y+20	; 0x14
     d9c:	00 82       	st	Z, r0
     d9e:	8b 89       	ldd	r24, Y+19	; 0x13
     da0:	9c 89       	ldd	r25, Y+20	; 0x14
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	9c 8b       	std	Y+20, r25	; 0x14
     da6:	8b 8b       	std	Y+19, r24	; 0x13
     da8:	9f 89       	ldd	r25, Y+23	; 0x17
     daa:	91 50       	subi	r25, 0x01	; 1
     dac:	9f 8b       	std	Y+23, r25	; 0x17
     dae:	ef 89       	ldd	r30, Y+23	; 0x17
     db0:	ee 23       	and	r30, r30
     db2:	51 f7       	brne	.-44     	; 0xd88 <ECU_init+0x7e>
	/*config of Timer1 as zero start point , 8000 catch point (1 sec), 1024 pre scale
	 and on catch mood*/
	UART_init(&Config_UART);
     db4:	ce 01       	movw	r24, r28
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	0e 94 83 11 	call	0x2306	; 0x2306 <UART_init>
	TWI_init(&Config_TWI);
     dbc:	ce 01       	movw	r24, r28
     dbe:	06 96       	adiw	r24, 0x06	; 6
     dc0:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <TWI_init>
	Timer1_init(&Config_Timer1);
     dc4:	ce 01       	movw	r24, r28
     dc6:	08 96       	adiw	r24, 0x08	; 8
     dc8:	0e 94 95 10 	call	0x212a	; 0x212a <Timer1_init>
	Timer1_setCallBack(Timer_Callback);
     dcc:	89 e7       	ldi	r24, 0x79	; 121
     dce:	96 e0       	ldi	r25, 0x06	; 6
     dd0:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <Timer1_setCallBack>
	DcMotor_Init();
     dd4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <DcMotor_Init>
	Buzzer_Init();
     dd8:	0e 94 50 06 	call	0xca0	; 0xca0 <Buzzer_Init>
}
     ddc:	67 96       	adiw	r28, 0x17	; 23
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <Recieve_Pass>:

void Recieve_Pass(void)
{
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	0f 92       	push	r0
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;
	for(i=0;i<5;i++)
     dfc:	19 82       	std	Y+1, r1	; 0x01
     dfe:	10 c0       	rjmp	.+32     	; 0xe20 <Recieve_Pass+0x32>
	{
		while(!UART_recieveByte());
     e00:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
     e04:	88 23       	and	r24, r24
     e06:	e1 f3       	breq	.-8      	; 0xe00 <Recieve_Pass+0x12>
		pass1[i] = UART_recieveByte();		/*save first pass in pass1 array*/
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	08 2f       	mov	r16, r24
     e0c:	10 e0       	ldi	r17, 0x00	; 0
     e0e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
     e12:	f8 01       	movw	r30, r16
     e14:	ef 57       	subi	r30, 0x7F	; 127
     e16:	fe 4f       	sbci	r31, 0xFE	; 254
     e18:	80 83       	st	Z, r24
}

void Recieve_Pass(void)
{
	unsigned char i;
	for(i=0;i<5;i++)
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	85 30       	cpi	r24, 0x05	; 5
     e24:	68 f3       	brcs	.-38     	; 0xe00 <Recieve_Pass+0x12>
	{
		while(!UART_recieveByte());
		pass1[i] = UART_recieveByte();		/*save first pass in pass1 array*/
	}
	for(i=0;i<5;i++)
     e26:	19 82       	std	Y+1, r1	; 0x01
     e28:	10 c0       	rjmp	.+32     	; 0xe4a <Recieve_Pass+0x5c>
	{
		while(!UART_recieveByte());
     e2a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
     e2e:	88 23       	and	r24, r24
     e30:	e1 f3       	breq	.-8      	; 0xe2a <Recieve_Pass+0x3c>
		pass2[i] = UART_recieveByte();		/*save the second pass in pass2 array*/
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	08 2f       	mov	r16, r24
     e36:	10 e0       	ldi	r17, 0x00	; 0
     e38:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
     e3c:	f8 01       	movw	r30, r16
     e3e:	e4 58       	subi	r30, 0x84	; 132
     e40:	fe 4f       	sbci	r31, 0xFE	; 254
     e42:	80 83       	st	Z, r24
	for(i=0;i<5;i++)
	{
		while(!UART_recieveByte());
		pass1[i] = UART_recieveByte();		/*save first pass in pass1 array*/
	}
	for(i=0;i<5;i++)
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	8f 5f       	subi	r24, 0xFF	; 255
     e48:	89 83       	std	Y+1, r24	; 0x01
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	85 30       	cpi	r24, 0x05	; 5
     e4e:	68 f3       	brcs	.-38     	; 0xe2a <Recieve_Pass+0x3c>
	{
		while(!UART_recieveByte());
		pass2[i] = UART_recieveByte();		/*save the second pass in pass2 array*/
	}
}
     e50:	0f 90       	pop	r0
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	08 95       	ret

00000e5c <Compare_Pass>:


uint8 Compare_Pass(void)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	00 d0       	rcall	.+0      	; 0xe62 <Compare_Pass+0x6>
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;
	for(i=0;i<5;i++)
     e66:	19 82       	std	Y+1, r1	; 0x01
     e68:	15 c0       	rjmp	.+42     	; 0xe94 <Compare_Pass+0x38>
	{
		if(pass1[i] != pass2[i])	/*compare the first with the second pass*/
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	fc 01       	movw	r30, r24
     e72:	ef 57       	subi	r30, 0x7F	; 127
     e74:	fe 4f       	sbci	r31, 0xFE	; 254
     e76:	20 81       	ld	r18, Z
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	fc 01       	movw	r30, r24
     e80:	e4 58       	subi	r30, 0x84	; 132
     e82:	fe 4f       	sbci	r31, 0xFE	; 254
     e84:	80 81       	ld	r24, Z
     e86:	28 17       	cp	r18, r24
     e88:	11 f0       	breq	.+4      	; 0xe8e <Compare_Pass+0x32>
		{
			return 0;				/*return 0 if password is not correct*/
     e8a:	1a 82       	std	Y+2, r1	; 0x02
     e8c:	08 c0       	rjmp	.+16     	; 0xe9e <Compare_Pass+0x42>


uint8 Compare_Pass(void)
{
	unsigned char i;
	for(i=0;i<5;i++)
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	8f 5f       	subi	r24, 0xFF	; 255
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	85 30       	cpi	r24, 0x05	; 5
     e98:	40 f3       	brcs	.-48     	; 0xe6a <Compare_Pass+0xe>
		if(pass1[i] != pass2[i])	/*compare the first with the second pass*/
		{
			return 0;				/*return 0 if password is not correct*/
		}
	}
	return 1;						/*return 1 if password is correct*/
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	8a 83       	std	Y+2, r24	; 0x02
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <Save_Pass>:


void Save_Pass(void)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	2f 97       	sbiw	r28, 0x0f	; 15
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
	unsigned char i;
	for(i=0;i<5;i++)						/*for loop to save the 5 numbers*/
     ebe:	1f 86       	std	Y+15, r1	; 0x0f
     ec0:	86 c0       	rjmp	.+268    	; 0xfce <Save_Pass+0x124>
	{
		EEPROM_writeByte(Adr+i, pass1[i]);	/*save password in memory*/
     ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	8f 5e       	subi	r24, 0xEF	; 239
     eca:	9c 4f       	sbci	r25, 0xFC	; 252
     ecc:	ac 01       	movw	r20, r24
     ece:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	fc 01       	movw	r30, r24
     ed6:	ef 57       	subi	r30, 0x7F	; 127
     ed8:	fe 4f       	sbci	r31, 0xFE	; 254
     eda:	20 81       	ld	r18, Z
     edc:	ca 01       	movw	r24, r20
     ede:	62 2f       	mov	r22, r18
     ee0:	0e 94 13 0c 	call	0x1826	; 0x1826 <EEPROM_writeByte>
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a0 e2       	ldi	r26, 0x20	; 32
     eea:	b1 e4       	ldi	r27, 0x41	; 65
     eec:	8b 87       	std	Y+11, r24	; 0x0b
     eee:	9c 87       	std	Y+12, r25	; 0x0c
     ef0:	ad 87       	std	Y+13, r26	; 0x0d
     ef2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
     efa:	9e 85       	ldd	r25, Y+14	; 0x0e
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	4a ef       	ldi	r20, 0xFA	; 250
     f02:	54 e4       	ldi	r21, 0x44	; 68
     f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8f 83       	std	Y+7, r24	; 0x07
     f0e:	98 87       	std	Y+8, r25	; 0x08
     f10:	a9 87       	std	Y+9, r26	; 0x09
     f12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f14:	6f 81       	ldd	r22, Y+7	; 0x07
     f16:	78 85       	ldd	r23, Y+8	; 0x08
     f18:	89 85       	ldd	r24, Y+9	; 0x09
     f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e8       	ldi	r20, 0x80	; 128
     f22:	5f e3       	ldi	r21, 0x3F	; 63
     f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f28:	88 23       	and	r24, r24
     f2a:	2c f4       	brge	.+10     	; 0xf36 <Save_Pass+0x8c>
		__ticks = 1;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
     f34:	3f c0       	rjmp	.+126    	; 0xfb4 <Save_Pass+0x10a>
	else if (__tmp > 65535)
     f36:	6f 81       	ldd	r22, Y+7	; 0x07
     f38:	78 85       	ldd	r23, Y+8	; 0x08
     f3a:	89 85       	ldd	r24, Y+9	; 0x09
     f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	3f ef       	ldi	r19, 0xFF	; 255
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	57 e4       	ldi	r21, 0x47	; 71
     f46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	4c f5       	brge	.+82     	; 0xfa0 <Save_Pass+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f50:	7c 85       	ldd	r23, Y+12	; 0x0c
     f52:	8d 85       	ldd	r24, Y+13	; 0x0d
     f54:	9e 85       	ldd	r25, Y+14	; 0x0e
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e2       	ldi	r20, 0x20	; 32
     f5c:	51 e4       	ldi	r21, 0x41	; 65
     f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	bc 01       	movw	r22, r24
     f68:	cd 01       	movw	r24, r26
     f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	8d 83       	std	Y+5, r24	; 0x05
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <Save_Pass+0xec>
     f78:	88 ec       	ldi	r24, 0xC8	; 200
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	9c 83       	std	Y+4, r25	; 0x04
     f7e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <Save_Pass+0xda>
     f88:	9c 83       	std	Y+4, r25	; 0x04
     f8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8c:	8d 81       	ldd	r24, Y+5	; 0x05
     f8e:	9e 81       	ldd	r25, Y+6	; 0x06
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	9e 83       	std	Y+6, r25	; 0x06
     f94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	69 f7       	brne	.-38     	; 0xf78 <Save_Pass+0xce>
     f9e:	14 c0       	rjmp	.+40     	; 0xfc8 <Save_Pass+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa0:	6f 81       	ldd	r22, Y+7	; 0x07
     fa2:	78 85       	ldd	r23, Y+8	; 0x08
     fa4:	89 85       	ldd	r24, Y+9	; 0x09
     fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	9e 83       	std	Y+6, r25	; 0x06
     fb2:	8d 83       	std	Y+5, r24	; 0x05
     fb4:	8d 81       	ldd	r24, Y+5	; 0x05
     fb6:	9e 81       	ldd	r25, Y+6	; 0x06
     fb8:	9a 83       	std	Y+2, r25	; 0x02
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <Save_Pass+0x116>
     fc4:	9a 83       	std	Y+2, r25	; 0x02
     fc6:	89 83       	std	Y+1, r24	; 0x01


void Save_Pass(void)
{
	unsigned char i;
	for(i=0;i<5;i++)						/*for loop to save the 5 numbers*/
     fc8:	8f 85       	ldd	r24, Y+15	; 0x0f
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	8f 87       	std	Y+15, r24	; 0x0f
     fce:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd0:	85 30       	cpi	r24, 0x05	; 5
     fd2:	08 f4       	brcc	.+2      	; 0xfd6 <Save_Pass+0x12c>
     fd4:	76 cf       	rjmp	.-276    	; 0xec2 <Save_Pass+0x18>
	{
		EEPROM_writeByte(Adr+i, pass1[i]);	/*save password in memory*/
		_delay_ms(10);
	}
}
     fd6:	2f 96       	adiw	r28, 0x0f	; 15
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <Check_Pass_Mem>:


uint8 Check_Pass_Mem(void)
{
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	61 97       	sbiw	r28, 0x11	; 17
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
	unsigned char i,val;
	for(i=0;i<5;i++)
    1000:	1f 86       	std	Y+15, r1	; 0x0f
    1002:	10 c0       	rjmp	.+32     	; 0x1024 <Check_Pass_Mem+0x3c>
	{
		while(!UART_recieveByte());
    1004:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
    1008:	88 23       	and	r24, r24
    100a:	e1 f3       	breq	.-8      	; 0x1004 <Check_Pass_Mem+0x1c>
		pass3[i] = UART_recieveByte();		/*save the third pass in pass3 array*/
    100c:	8f 85       	ldd	r24, Y+15	; 0x0f
    100e:	08 2f       	mov	r16, r24
    1010:	10 e0       	ldi	r17, 0x00	; 0
    1012:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
    1016:	f8 01       	movw	r30, r16
    1018:	e9 58       	subi	r30, 0x89	; 137
    101a:	fe 4f       	sbci	r31, 0xFE	; 254
    101c:	80 83       	st	Z, r24


uint8 Check_Pass_Mem(void)
{
	unsigned char i,val;
	for(i=0;i<5;i++)
    101e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1020:	8f 5f       	subi	r24, 0xFF	; 255
    1022:	8f 87       	std	Y+15, r24	; 0x0f
    1024:	8f 85       	ldd	r24, Y+15	; 0x0f
    1026:	85 30       	cpi	r24, 0x05	; 5
    1028:	68 f3       	brcs	.-38     	; 0x1004 <Check_Pass_Mem+0x1c>
	{
		while(!UART_recieveByte());
		pass3[i] = UART_recieveByte();		/*save the third pass in pass3 array*/
	}

	for(i=0;i<5;i++)
    102a:	1f 86       	std	Y+15, r1	; 0x0f
    102c:	8c c0       	rjmp	.+280    	; 0x1146 <Check_Pass_Mem+0x15e>
	{
		EEPROM_readByte(Adr+i, &val);		/*fetch pass1 that already saved in memory*/
    102e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	8f 5e       	subi	r24, 0xEF	; 239
    1036:	9c 4f       	sbci	r25, 0xFC	; 252
    1038:	9e 01       	movw	r18, r28
    103a:	20 5f       	subi	r18, 0xF0	; 240
    103c:	3f 4f       	sbci	r19, 0xFF	; 255
    103e:	b9 01       	movw	r22, r18
    1040:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <EEPROM_readByte>
		if(pass3[i] != val)					/*compare pass3 with the fetched password*/
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	fc 01       	movw	r30, r24
    104c:	e9 58       	subi	r30, 0x89	; 137
    104e:	fe 4f       	sbci	r31, 0xFE	; 254
    1050:	90 81       	ld	r25, Z
    1052:	88 89       	ldd	r24, Y+16	; 0x10
    1054:	98 17       	cp	r25, r24
    1056:	11 f0       	breq	.+4      	; 0x105c <Check_Pass_Mem+0x74>
		{
			return 0;						/*return 0 if password is not correct*/
    1058:	19 8a       	std	Y+17, r1	; 0x11
    105a:	7b c0       	rjmp	.+246    	; 0x1152 <Check_Pass_Mem+0x16a>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a0 e2       	ldi	r26, 0x20	; 32
    1062:	b1 e4       	ldi	r27, 0x41	; 65
    1064:	8b 87       	std	Y+11, r24	; 0x0b
    1066:	9c 87       	std	Y+12, r25	; 0x0c
    1068:	ad 87       	std	Y+13, r26	; 0x0d
    106a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106c:	6b 85       	ldd	r22, Y+11	; 0x0b
    106e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1070:	8d 85       	ldd	r24, Y+13	; 0x0d
    1072:	9e 85       	ldd	r25, Y+14	; 0x0e
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	4a ef       	ldi	r20, 0xFA	; 250
    107a:	54 e4       	ldi	r21, 0x44	; 68
    107c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	8f 83       	std	Y+7, r24	; 0x07
    1086:	98 87       	std	Y+8, r25	; 0x08
    1088:	a9 87       	std	Y+9, r26	; 0x09
    108a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    108c:	6f 81       	ldd	r22, Y+7	; 0x07
    108e:	78 85       	ldd	r23, Y+8	; 0x08
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	9a 85       	ldd	r25, Y+10	; 0x0a
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e8       	ldi	r20, 0x80	; 128
    109a:	5f e3       	ldi	r21, 0x3F	; 63
    109c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10a0:	88 23       	and	r24, r24
    10a2:	2c f4       	brge	.+10     	; 0x10ae <Check_Pass_Mem+0xc6>
		__ticks = 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	8d 83       	std	Y+5, r24	; 0x05
    10ac:	3f c0       	rjmp	.+126    	; 0x112c <Check_Pass_Mem+0x144>
	else if (__tmp > 65535)
    10ae:	6f 81       	ldd	r22, Y+7	; 0x07
    10b0:	78 85       	ldd	r23, Y+8	; 0x08
    10b2:	89 85       	ldd	r24, Y+9	; 0x09
    10b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	3f ef       	ldi	r19, 0xFF	; 255
    10ba:	4f e7       	ldi	r20, 0x7F	; 127
    10bc:	57 e4       	ldi	r21, 0x47	; 71
    10be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10c2:	18 16       	cp	r1, r24
    10c4:	4c f5       	brge	.+82     	; 0x1118 <Check_Pass_Mem+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    10cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e2       	ldi	r20, 0x20	; 32
    10d4:	51 e4       	ldi	r21, 0x41	; 65
    10d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	bc 01       	movw	r22, r24
    10e0:	cd 01       	movw	r24, r26
    10e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	0f c0       	rjmp	.+30     	; 0x110e <Check_Pass_Mem+0x126>
    10f0:	88 ec       	ldi	r24, 0xC8	; 200
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9c 83       	std	Y+4, r25	; 0x04
    10f6:	8b 83       	std	Y+3, r24	; 0x03
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <Check_Pass_Mem+0x114>
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	69 f7       	brne	.-38     	; 0x10f0 <Check_Pass_Mem+0x108>
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <Check_Pass_Mem+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1118:	6f 81       	ldd	r22, Y+7	; 0x07
    111a:	78 85       	ldd	r23, Y+8	; 0x08
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <Check_Pass_Mem+0x150>
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
	{
		while(!UART_recieveByte());
		pass3[i] = UART_recieveByte();		/*save the third pass in pass3 array*/
	}

	for(i=0;i<5;i++)
    1140:	8f 85       	ldd	r24, Y+15	; 0x0f
    1142:	8f 5f       	subi	r24, 0xFF	; 255
    1144:	8f 87       	std	Y+15, r24	; 0x0f
    1146:	8f 85       	ldd	r24, Y+15	; 0x0f
    1148:	85 30       	cpi	r24, 0x05	; 5
    114a:	08 f4       	brcc	.+2      	; 0x114e <Check_Pass_Mem+0x166>
    114c:	70 cf       	rjmp	.-288    	; 0x102e <Check_Pass_Mem+0x46>
		{
			return 0;						/*return 0 if password is not correct*/
		}
		_delay_ms(10);
	}
	return 1;								/*return 1 if password is correct*/
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	89 8b       	std	Y+17, r24	; 0x11
    1152:	89 89       	ldd	r24, Y+17	; 0x11
}
    1154:	61 96       	adiw	r28, 0x11	; 17
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	08 95       	ret

0000116a <Open_Door>:


void Open_Door(void)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
	gtick=0;					/* set gtick to zero to start counting*/
    1172:	10 92 74 01 	sts	0x0174, r1
	DcMotor_Rotate(CW,99);		/*activate the motor in clock wise*/
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	63 e6       	ldi	r22, 0x63	; 99
    117a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <DcMotor_Rotate>
	while(gtick<15);			/*counting 15 second*/
    117e:	80 91 74 01 	lds	r24, 0x0174
    1182:	8f 30       	cpi	r24, 0x0F	; 15
    1184:	e0 f3       	brcs	.-8      	; 0x117e <Open_Door+0x14>
	DcMotor_Rotate(OFF,0);		/*deactivate the motor*/
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <DcMotor_Rotate>
	gtick=0;					/* set gtick to zero to start counting*/
    118e:	10 92 74 01 	sts	0x0174, r1
	while(gtick<3);
    1192:	80 91 74 01 	lds	r24, 0x0174
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	e0 f3       	brcs	.-8      	; 0x1192 <Open_Door+0x28>
	DcMotor_Rotate(ACW,99);		/*activate the motor in Anti clock wise*/
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	63 e6       	ldi	r22, 0x63	; 99
    119e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <DcMotor_Rotate>
	gtick=0;					/* set gtick to zero to start counting*/
    11a2:	10 92 74 01 	sts	0x0174, r1
	while(gtick<15);			/*counting 15 second*/
    11a6:	80 91 74 01 	lds	r24, 0x0174
    11aa:	8f 30       	cpi	r24, 0x0F	; 15
    11ac:	e0 f3       	brcs	.-8      	; 0x11a6 <Open_Door+0x3c>
	DcMotor_Rotate(OFF,0);		/*deactivate the motor*/
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <DcMotor_Rotate>
	Timer1_deInit();			/*deactivate the timer*/
    11b6:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <Timer1_deInit>
}
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <main>:



int main(void)
{
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	c9 54       	subi	r28, 0x49	; 73
    11ce:	d0 40       	sbci	r29, 0x00	; 0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
	unsigned char state,flag=0,i=0;
    11da:	fe 01       	movw	r30, r28
    11dc:	e8 5b       	subi	r30, 0xB8	; 184
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	10 82       	st	Z, r1
    11e2:	fe 01       	movw	r30, r28
    11e4:	e9 5b       	subi	r30, 0xB9	; 185
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	10 82       	st	Z, r1
	ECU_init();
    11ea:	0e 94 85 06 	call	0xd0a	; 0xd0a <ECU_init>
    11ee:	12 c1       	rjmp	.+548    	; 0x1414 <main+0x254>
	while(1)
	{
		while(flag==0)					/*flag set when pass is correct*/
		{
			Recieve_Pass();
    11f0:	0e 94 f7 06 	call	0xdee	; 0xdee <Recieve_Pass>
			if(Compare_Pass())			/*step0 compare*/
    11f4:	0e 94 2e 07 	call	0xe5c	; 0xe5c <Compare_Pass>
    11f8:	88 23       	and	r24, r24
    11fa:	09 f4       	brne	.+2      	; 0x11fe <main+0x3e>
    11fc:	93 c0       	rjmp	.+294    	; 0x1324 <main+0x164>
			{
				Save_Pass();
    11fe:	0e 94 55 07 	call	0xeaa	; 0xeaa <Save_Pass>
    1202:	fe 01       	movw	r30, r28
    1204:	ed 5b       	subi	r30, 0xBD	; 189
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	aa ef       	ldi	r26, 0xFA	; 250
    120e:	b3 e4       	ldi	r27, 0x43	; 67
    1210:	80 83       	st	Z, r24
    1212:	91 83       	std	Z+1, r25	; 0x01
    1214:	a2 83       	std	Z+2, r26	; 0x02
    1216:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1218:	8e 01       	movw	r16, r28
    121a:	01 5c       	subi	r16, 0xC1	; 193
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	fe 01       	movw	r30, r28
    1220:	ed 5b       	subi	r30, 0xBD	; 189
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	60 81       	ld	r22, Z
    1226:	71 81       	ldd	r23, Z+1	; 0x01
    1228:	82 81       	ldd	r24, Z+2	; 0x02
    122a:	93 81       	ldd	r25, Z+3	; 0x03
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	4a ef       	ldi	r20, 0xFA	; 250
    1232:	54 e4       	ldi	r21, 0x44	; 68
    1234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	f8 01       	movw	r30, r16
    123e:	80 83       	st	Z, r24
    1240:	91 83       	std	Z+1, r25	; 0x01
    1242:	a2 83       	std	Z+2, r26	; 0x02
    1244:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1246:	fe 01       	movw	r30, r28
    1248:	ff 96       	adiw	r30, 0x3f	; 63
    124a:	60 81       	ld	r22, Z
    124c:	71 81       	ldd	r23, Z+1	; 0x01
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	93 81       	ldd	r25, Z+3	; 0x03
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e8       	ldi	r20, 0x80	; 128
    1258:	5f e3       	ldi	r21, 0x3F	; 63
    125a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    125e:	88 23       	and	r24, r24
    1260:	2c f4       	brge	.+10     	; 0x126c <main+0xac>
		__ticks = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9e af       	std	Y+62, r25	; 0x3e
    1268:	8d af       	std	Y+61, r24	; 0x3d
    126a:	46 c0       	rjmp	.+140    	; 0x12f8 <main+0x138>
	else if (__tmp > 65535)
    126c:	fe 01       	movw	r30, r28
    126e:	ff 96       	adiw	r30, 0x3f	; 63
    1270:	60 81       	ld	r22, Z
    1272:	71 81       	ldd	r23, Z+1	; 0x01
    1274:	82 81       	ldd	r24, Z+2	; 0x02
    1276:	93 81       	ldd	r25, Z+3	; 0x03
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	3f ef       	ldi	r19, 0xFF	; 255
    127c:	4f e7       	ldi	r20, 0x7F	; 127
    127e:	57 e4       	ldi	r21, 0x47	; 71
    1280:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1284:	18 16       	cp	r1, r24
    1286:	64 f5       	brge	.+88     	; 0x12e0 <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1288:	fe 01       	movw	r30, r28
    128a:	ed 5b       	subi	r30, 0xBD	; 189
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	60 81       	ld	r22, Z
    1290:	71 81       	ldd	r23, Z+1	; 0x01
    1292:	82 81       	ldd	r24, Z+2	; 0x02
    1294:	93 81       	ldd	r25, Z+3	; 0x03
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e2       	ldi	r20, 0x20	; 32
    129c:	51 e4       	ldi	r21, 0x41	; 65
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	9e af       	std	Y+62, r25	; 0x3e
    12b4:	8d af       	std	Y+61, r24	; 0x3d
    12b6:	0f c0       	rjmp	.+30     	; 0x12d6 <main+0x116>
    12b8:	88 ec       	ldi	r24, 0xC8	; 200
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9c af       	std	Y+60, r25	; 0x3c
    12be:	8b af       	std	Y+59, r24	; 0x3b
    12c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    12c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <main+0x104>
    12c8:	9c af       	std	Y+60, r25	; 0x3c
    12ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    12ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	9e af       	std	Y+62, r25	; 0x3e
    12d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    12d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	69 f7       	brne	.-38     	; 0x12b8 <main+0xf8>
    12de:	16 c0       	rjmp	.+44     	; 0x130c <main+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e0:	fe 01       	movw	r30, r28
    12e2:	ff 96       	adiw	r30, 0x3f	; 63
    12e4:	60 81       	ld	r22, Z
    12e6:	71 81       	ldd	r23, Z+1	; 0x01
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	93 81       	ldd	r25, Z+3	; 0x03
    12ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	9e af       	std	Y+62, r25	; 0x3e
    12f6:	8d af       	std	Y+61, r24	; 0x3d
    12f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    12fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    12fc:	9a af       	std	Y+58, r25	; 0x3a
    12fe:	89 af       	std	Y+57, r24	; 0x39
    1300:	89 ad       	ldd	r24, Y+57	; 0x39
    1302:	9a ad       	ldd	r25, Y+58	; 0x3a
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <main+0x144>
    1308:	9a af       	std	Y+58, r25	; 0x3a
    130a:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
				UART_sendByte(READY);
    130c:	88 e2       	ldi	r24, 0x28	; 40
    130e:	0e 94 cb 11 	call	0x2396	; 0x2396 <UART_sendByte>
				UART_sendByte(Correct_Pass);
    1312:	82 e2       	ldi	r24, 0x22	; 34
    1314:	0e 94 cb 11 	call	0x2396	; 0x2396 <UART_sendByte>
				flag=1;
    1318:	fe 01       	movw	r30, r28
    131a:	e8 5b       	subi	r30, 0xB8	; 184
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	80 83       	st	Z, r24
    1322:	78 c0       	rjmp	.+240    	; 0x1414 <main+0x254>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	aa ef       	ldi	r26, 0xFA	; 250
    132a:	b3 e4       	ldi	r27, 0x43	; 67
    132c:	8d ab       	std	Y+53, r24	; 0x35
    132e:	9e ab       	std	Y+54, r25	; 0x36
    1330:	af ab       	std	Y+55, r26	; 0x37
    1332:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1334:	6d a9       	ldd	r22, Y+53	; 0x35
    1336:	7e a9       	ldd	r23, Y+54	; 0x36
    1338:	8f a9       	ldd	r24, Y+55	; 0x37
    133a:	98 ad       	ldd	r25, Y+56	; 0x38
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	4a ef       	ldi	r20, 0xFA	; 250
    1342:	54 e4       	ldi	r21, 0x44	; 68
    1344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	89 ab       	std	Y+49, r24	; 0x31
    134e:	9a ab       	std	Y+50, r25	; 0x32
    1350:	ab ab       	std	Y+51, r26	; 0x33
    1352:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1354:	69 a9       	ldd	r22, Y+49	; 0x31
    1356:	7a a9       	ldd	r23, Y+50	; 0x32
    1358:	8b a9       	ldd	r24, Y+51	; 0x33
    135a:	9c a9       	ldd	r25, Y+52	; 0x34
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e8       	ldi	r20, 0x80	; 128
    1362:	5f e3       	ldi	r21, 0x3F	; 63
    1364:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1368:	88 23       	and	r24, r24
    136a:	2c f4       	brge	.+10     	; 0x1376 <main+0x1b6>
		__ticks = 1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	98 ab       	std	Y+48, r25	; 0x30
    1372:	8f a7       	std	Y+47, r24	; 0x2f
    1374:	3f c0       	rjmp	.+126    	; 0x13f4 <main+0x234>
	else if (__tmp > 65535)
    1376:	69 a9       	ldd	r22, Y+49	; 0x31
    1378:	7a a9       	ldd	r23, Y+50	; 0x32
    137a:	8b a9       	ldd	r24, Y+51	; 0x33
    137c:	9c a9       	ldd	r25, Y+52	; 0x34
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	3f ef       	ldi	r19, 0xFF	; 255
    1382:	4f e7       	ldi	r20, 0x7F	; 127
    1384:	57 e4       	ldi	r21, 0x47	; 71
    1386:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    138a:	18 16       	cp	r1, r24
    138c:	4c f5       	brge	.+82     	; 0x13e0 <main+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138e:	6d a9       	ldd	r22, Y+53	; 0x35
    1390:	7e a9       	ldd	r23, Y+54	; 0x36
    1392:	8f a9       	ldd	r24, Y+55	; 0x37
    1394:	98 ad       	ldd	r25, Y+56	; 0x38
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e2       	ldi	r20, 0x20	; 32
    139c:	51 e4       	ldi	r21, 0x41	; 65
    139e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	98 ab       	std	Y+48, r25	; 0x30
    13b4:	8f a7       	std	Y+47, r24	; 0x2f
    13b6:	0f c0       	rjmp	.+30     	; 0x13d6 <main+0x216>
    13b8:	88 ec       	ldi	r24, 0xC8	; 200
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	9e a7       	std	Y+46, r25	; 0x2e
    13be:	8d a7       	std	Y+45, r24	; 0x2d
    13c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    13c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <main+0x204>
    13c8:	9e a7       	std	Y+46, r25	; 0x2e
    13ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ce:	98 a9       	ldd	r25, Y+48	; 0x30
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	98 ab       	std	Y+48, r25	; 0x30
    13d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13d8:	98 a9       	ldd	r25, Y+48	; 0x30
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	69 f7       	brne	.-38     	; 0x13b8 <main+0x1f8>
    13de:	14 c0       	rjmp	.+40     	; 0x1408 <main+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e0:	69 a9       	ldd	r22, Y+49	; 0x31
    13e2:	7a a9       	ldd	r23, Y+50	; 0x32
    13e4:	8b a9       	ldd	r24, Y+51	; 0x33
    13e6:	9c a9       	ldd	r25, Y+52	; 0x34
    13e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	98 ab       	std	Y+48, r25	; 0x30
    13f2:	8f a7       	std	Y+47, r24	; 0x2f
    13f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13f6:	98 a9       	ldd	r25, Y+48	; 0x30
    13f8:	9c a7       	std	Y+44, r25	; 0x2c
    13fa:	8b a7       	std	Y+43, r24	; 0x2b
    13fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    13fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <main+0x240>
    1404:	9c a7       	std	Y+44, r25	; 0x2c
    1406:	8b a7       	std	Y+43, r24	; 0x2b
			}
			else
			{
				_delay_ms(500);
				UART_sendByte(READY);			/*send ready bit to interface*/
    1408:	88 e2       	ldi	r24, 0x28	; 40
    140a:	0e 94 cb 11 	call	0x2396	; 0x2396 <UART_sendByte>
				UART_sendByte(Wrong_Pass);
    140e:	8c e0       	ldi	r24, 0x0C	; 12
    1410:	0e 94 cb 11 	call	0x2396	; 0x2396 <UART_sendByte>
{
	unsigned char state,flag=0,i=0;
	ECU_init();
	while(1)
	{
		while(flag==0)					/*flag set when pass is correct*/
    1414:	fe 01       	movw	r30, r28
    1416:	e8 5b       	subi	r30, 0xB8	; 184
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	80 81       	ld	r24, Z
    141c:	88 23       	and	r24, r24
    141e:	09 f4       	brne	.+2      	; 0x1422 <main+0x262>
    1420:	e7 ce       	rjmp	.-562    	; 0x11f0 <main+0x30>
    1422:	03 c1       	rjmp	.+518    	; 0x162a <main+0x46a>
				UART_sendByte(Wrong_Pass);
			}
		}
		while(flag==1 && i<3)
		{
			if(Check_Pass_Mem())
    1424:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Check_Pass_Mem>
    1428:	88 23       	and	r24, r24
    142a:	09 f4       	brne	.+2      	; 0x142e <main+0x26e>
    142c:	7d c0       	rjmp	.+250    	; 0x1528 <main+0x368>
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	aa ef       	ldi	r26, 0xFA	; 250
    1434:	b3 e4       	ldi	r27, 0x43	; 67
    1436:	8f a3       	std	Y+39, r24	; 0x27
    1438:	98 a7       	std	Y+40, r25	; 0x28
    143a:	a9 a7       	std	Y+41, r26	; 0x29
    143c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143e:	6f a1       	ldd	r22, Y+39	; 0x27
    1440:	78 a5       	ldd	r23, Y+40	; 0x28
    1442:	89 a5       	ldd	r24, Y+41	; 0x29
    1444:	9a a5       	ldd	r25, Y+42	; 0x2a
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	4a ef       	ldi	r20, 0xFA	; 250
    144c:	54 e4       	ldi	r21, 0x44	; 68
    144e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	8b a3       	std	Y+35, r24	; 0x23
    1458:	9c a3       	std	Y+36, r25	; 0x24
    145a:	ad a3       	std	Y+37, r26	; 0x25
    145c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    145e:	6b a1       	ldd	r22, Y+35	; 0x23
    1460:	7c a1       	ldd	r23, Y+36	; 0x24
    1462:	8d a1       	ldd	r24, Y+37	; 0x25
    1464:	9e a1       	ldd	r25, Y+38	; 0x26
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e8       	ldi	r20, 0x80	; 128
    146c:	5f e3       	ldi	r21, 0x3F	; 63
    146e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1472:	88 23       	and	r24, r24
    1474:	2c f4       	brge	.+10     	; 0x1480 <main+0x2c0>
		__ticks = 1;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	9a a3       	std	Y+34, r25	; 0x22
    147c:	89 a3       	std	Y+33, r24	; 0x21
    147e:	3f c0       	rjmp	.+126    	; 0x14fe <main+0x33e>
	else if (__tmp > 65535)
    1480:	6b a1       	ldd	r22, Y+35	; 0x23
    1482:	7c a1       	ldd	r23, Y+36	; 0x24
    1484:	8d a1       	ldd	r24, Y+37	; 0x25
    1486:	9e a1       	ldd	r25, Y+38	; 0x26
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	3f ef       	ldi	r19, 0xFF	; 255
    148c:	4f e7       	ldi	r20, 0x7F	; 127
    148e:	57 e4       	ldi	r21, 0x47	; 71
    1490:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1494:	18 16       	cp	r1, r24
    1496:	4c f5       	brge	.+82     	; 0x14ea <main+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1498:	6f a1       	ldd	r22, Y+39	; 0x27
    149a:	78 a5       	ldd	r23, Y+40	; 0x28
    149c:	89 a5       	ldd	r24, Y+41	; 0x29
    149e:	9a a5       	ldd	r25, Y+42	; 0x2a
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e2       	ldi	r20, 0x20	; 32
    14a6:	51 e4       	ldi	r21, 0x41	; 65
    14a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	bc 01       	movw	r22, r24
    14b2:	cd 01       	movw	r24, r26
    14b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	9a a3       	std	Y+34, r25	; 0x22
    14be:	89 a3       	std	Y+33, r24	; 0x21
    14c0:	0f c0       	rjmp	.+30     	; 0x14e0 <main+0x320>
    14c2:	88 ec       	ldi	r24, 0xC8	; 200
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	98 a3       	std	Y+32, r25	; 0x20
    14c8:	8f 8f       	std	Y+31, r24	; 0x1f
    14ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14cc:	98 a1       	ldd	r25, Y+32	; 0x20
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <main+0x30e>
    14d2:	98 a3       	std	Y+32, r25	; 0x20
    14d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d6:	89 a1       	ldd	r24, Y+33	; 0x21
    14d8:	9a a1       	ldd	r25, Y+34	; 0x22
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	9a a3       	std	Y+34, r25	; 0x22
    14de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e0:	89 a1       	ldd	r24, Y+33	; 0x21
    14e2:	9a a1       	ldd	r25, Y+34	; 0x22
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	69 f7       	brne	.-38     	; 0x14c2 <main+0x302>
    14e8:	14 c0       	rjmp	.+40     	; 0x1512 <main+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ea:	6b a1       	ldd	r22, Y+35	; 0x23
    14ec:	7c a1       	ldd	r23, Y+36	; 0x24
    14ee:	8d a1       	ldd	r24, Y+37	; 0x25
    14f0:	9e a1       	ldd	r25, Y+38	; 0x26
    14f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	9a a3       	std	Y+34, r25	; 0x22
    14fc:	89 a3       	std	Y+33, r24	; 0x21
    14fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1500:	9a a1       	ldd	r25, Y+34	; 0x22
    1502:	9e 8f       	std	Y+30, r25	; 0x1e
    1504:	8d 8f       	std	Y+29, r24	; 0x1d
    1506:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1508:	9e 8d       	ldd	r25, Y+30	; 0x1e
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <main+0x34a>
    150e:	9e 8f       	std	Y+30, r25	; 0x1e
    1510:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				_delay_ms(500);
				UART_sendByte(READY);			/*send ready bit to interface*/
    1512:	88 e2       	ldi	r24, 0x28	; 40
    1514:	0e 94 cb 11 	call	0x2396	; 0x2396 <UART_sendByte>
				UART_sendByte(Correct_Pass);
    1518:	82 e2       	ldi	r24, 0x22	; 34
    151a:	0e 94 cb 11 	call	0x2396	; 0x2396 <UART_sendByte>
				flag=0;
    151e:	fe 01       	movw	r30, r28
    1520:	e8 5b       	subi	r30, 0xB8	; 184
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	10 82       	st	Z, r1
    1526:	81 c0       	rjmp	.+258    	; 0x162a <main+0x46a>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	aa ef       	ldi	r26, 0xFA	; 250
    152e:	b3 e4       	ldi	r27, 0x43	; 67
    1530:	89 8f       	std	Y+25, r24	; 0x19
    1532:	9a 8f       	std	Y+26, r25	; 0x1a
    1534:	ab 8f       	std	Y+27, r26	; 0x1b
    1536:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1538:	69 8d       	ldd	r22, Y+25	; 0x19
    153a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    153c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	4a ef       	ldi	r20, 0xFA	; 250
    1546:	54 e4       	ldi	r21, 0x44	; 68
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8d 8b       	std	Y+21, r24	; 0x15
    1552:	9e 8b       	std	Y+22, r25	; 0x16
    1554:	af 8b       	std	Y+23, r26	; 0x17
    1556:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1558:	6d 89       	ldd	r22, Y+21	; 0x15
    155a:	7e 89       	ldd	r23, Y+22	; 0x16
    155c:	8f 89       	ldd	r24, Y+23	; 0x17
    155e:	98 8d       	ldd	r25, Y+24	; 0x18
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    156c:	88 23       	and	r24, r24
    156e:	2c f4       	brge	.+10     	; 0x157a <main+0x3ba>
		__ticks = 1;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9c 8b       	std	Y+20, r25	; 0x14
    1576:	8b 8b       	std	Y+19, r24	; 0x13
    1578:	3f c0       	rjmp	.+126    	; 0x15f8 <main+0x438>
	else if (__tmp > 65535)
    157a:	6d 89       	ldd	r22, Y+21	; 0x15
    157c:	7e 89       	ldd	r23, Y+22	; 0x16
    157e:	8f 89       	ldd	r24, Y+23	; 0x17
    1580:	98 8d       	ldd	r25, Y+24	; 0x18
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	3f ef       	ldi	r19, 0xFF	; 255
    1586:	4f e7       	ldi	r20, 0x7F	; 127
    1588:	57 e4       	ldi	r21, 0x47	; 71
    158a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    158e:	18 16       	cp	r1, r24
    1590:	4c f5       	brge	.+82     	; 0x15e4 <main+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1592:	69 8d       	ldd	r22, Y+25	; 0x19
    1594:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1596:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1598:	9c 8d       	ldd	r25, Y+28	; 0x1c
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e2       	ldi	r20, 0x20	; 32
    15a0:	51 e4       	ldi	r21, 0x41	; 65
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	9c 8b       	std	Y+20, r25	; 0x14
    15b8:	8b 8b       	std	Y+19, r24	; 0x13
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <main+0x41a>
    15bc:	88 ec       	ldi	r24, 0xC8	; 200
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	9a 8b       	std	Y+18, r25	; 0x12
    15c2:	89 8b       	std	Y+17, r24	; 0x11
    15c4:	89 89       	ldd	r24, Y+17	; 0x11
    15c6:	9a 89       	ldd	r25, Y+18	; 0x12
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <main+0x408>
    15cc:	9a 8b       	std	Y+18, r25	; 0x12
    15ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d0:	8b 89       	ldd	r24, Y+19	; 0x13
    15d2:	9c 89       	ldd	r25, Y+20	; 0x14
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	9c 8b       	std	Y+20, r25	; 0x14
    15d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15da:	8b 89       	ldd	r24, Y+19	; 0x13
    15dc:	9c 89       	ldd	r25, Y+20	; 0x14
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	69 f7       	brne	.-38     	; 0x15bc <main+0x3fc>
    15e2:	14 c0       	rjmp	.+40     	; 0x160c <main+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e4:	6d 89       	ldd	r22, Y+21	; 0x15
    15e6:	7e 89       	ldd	r23, Y+22	; 0x16
    15e8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ea:	98 8d       	ldd	r25, Y+24	; 0x18
    15ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9c 8b       	std	Y+20, r25	; 0x14
    15f6:	8b 8b       	std	Y+19, r24	; 0x13
    15f8:	8b 89       	ldd	r24, Y+19	; 0x13
    15fa:	9c 89       	ldd	r25, Y+20	; 0x14
    15fc:	98 8b       	std	Y+16, r25	; 0x10
    15fe:	8f 87       	std	Y+15, r24	; 0x0f
    1600:	8f 85       	ldd	r24, Y+15	; 0x0f
    1602:	98 89       	ldd	r25, Y+16	; 0x10
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <main+0x444>
    1608:	98 8b       	std	Y+16, r25	; 0x10
    160a:	8f 87       	std	Y+15, r24	; 0x0f
			}
			else
			{
				_delay_ms(500);
				UART_sendByte(READY);			/*send ready bit to interface*/
    160c:	88 e2       	ldi	r24, 0x28	; 40
    160e:	0e 94 cb 11 	call	0x2396	; 0x2396 <UART_sendByte>
				UART_sendByte(Wrong_Pass);
    1612:	8c e0       	ldi	r24, 0x0C	; 12
    1614:	0e 94 cb 11 	call	0x2396	; 0x2396 <UART_sendByte>
				i++;
    1618:	de 01       	movw	r26, r28
    161a:	a9 5b       	subi	r26, 0xB9	; 185
    161c:	bf 4f       	sbci	r27, 0xFF	; 255
    161e:	fe 01       	movw	r30, r28
    1620:	e9 5b       	subi	r30, 0xB9	; 185
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	80 81       	ld	r24, Z
    1626:	8f 5f       	subi	r24, 0xFF	; 255
    1628:	8c 93       	st	X, r24
				_delay_ms(500);
				UART_sendByte(READY);			/*send ready bit to interface*/
				UART_sendByte(Wrong_Pass);
			}
		}
		while(flag==1 && i<3)
    162a:	fe 01       	movw	r30, r28
    162c:	e8 5b       	subi	r30, 0xB8	; 184
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	80 81       	ld	r24, Z
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	39 f4       	brne	.+14     	; 0x1644 <main+0x484>
    1636:	fe 01       	movw	r30, r28
    1638:	e9 5b       	subi	r30, 0xB9	; 185
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	80 81       	ld	r24, Z
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	08 f4       	brcc	.+2      	; 0x1644 <main+0x484>
    1642:	f0 ce       	rjmp	.-544    	; 0x1424 <main+0x264>
				UART_sendByte(READY);			/*send ready bit to interface*/
				UART_sendByte(Wrong_Pass);
				i++;
			}
		}
		while(!UART_recieveByte());
    1644:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
    1648:	88 23       	and	r24, r24
    164a:	e1 f3       	breq	.-8      	; 0x1644 <main+0x484>
		state = UART_recieveByte();
    164c:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
    1650:	fe 01       	movw	r30, r28
    1652:	e7 5b       	subi	r30, 0xB7	; 183
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	80 83       	st	Z, r24
		if(state==Door_Open)					/*open the door*/
    1658:	fe 01       	movw	r30, r28
    165a:	e7 5b       	subi	r30, 0xB7	; 183
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	80 81       	ld	r24, Z
    1660:	8a 30       	cpi	r24, 0x0A	; 10
    1662:	19 f4       	brne	.+6      	; 0x166a <main+0x4aa>
		{
			Open_Door();
    1664:	0e 94 b5 08 	call	0x116a	; 0x116a <Open_Door>
    1668:	d5 ce       	rjmp	.-598    	; 0x1414 <main+0x254>
		}
		else if(state == Change_Pass)			/*change the password*/
    166a:	fe 01       	movw	r30, r28
    166c:	e7 5b       	subi	r30, 0xB7	; 183
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 81       	ld	r24, Z
    1672:	8c 32       	cpi	r24, 0x2C	; 44
    1674:	09 f0       	breq	.+2      	; 0x1678 <main+0x4b8>
    1676:	73 c0       	rjmp	.+230    	; 0x175e <main+0x59e>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	aa ef       	ldi	r26, 0xFA	; 250
    167e:	b3 e4       	ldi	r27, 0x43	; 67
    1680:	8b 87       	std	Y+11, r24	; 0x0b
    1682:	9c 87       	std	Y+12, r25	; 0x0c
    1684:	ad 87       	std	Y+13, r26	; 0x0d
    1686:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	6b 85       	ldd	r22, Y+11	; 0x0b
    168a:	7c 85       	ldd	r23, Y+12	; 0x0c
    168c:	8d 85       	ldd	r24, Y+13	; 0x0d
    168e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a ef       	ldi	r20, 0xFA	; 250
    1696:	54 e4       	ldi	r21, 0x44	; 68
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8f 83       	std	Y+7, r24	; 0x07
    16a2:	98 87       	std	Y+8, r25	; 0x08
    16a4:	a9 87       	std	Y+9, r26	; 0x09
    16a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a8:	6f 81       	ldd	r22, Y+7	; 0x07
    16aa:	78 85       	ldd	r23, Y+8	; 0x08
    16ac:	89 85       	ldd	r24, Y+9	; 0x09
    16ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <main+0x50a>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <main+0x588>
	else if (__tmp > 65535)
    16ca:	6f 81       	ldd	r22, Y+7	; 0x07
    16cc:	78 85       	ldd	r23, Y+8	; 0x08
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <main+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	0f c0       	rjmp	.+30     	; 0x172a <main+0x56a>
    170c:	88 ec       	ldi	r24, 0xC8	; 200
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9c 83       	std	Y+4, r25	; 0x04
    1712:	8b 83       	std	Y+3, r24	; 0x03
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <main+0x558>
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	9e 81       	ldd	r25, Y+6	; 0x06
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <main+0x54c>
    1732:	70 ce       	rjmp	.-800    	; 0x1414 <main+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	6f 81       	ldd	r22, Y+7	; 0x07
    1736:	78 85       	ldd	r23, Y+8	; 0x08
    1738:	89 85       	ldd	r24, Y+9	; 0x09
    173a:	9a 85       	ldd	r25, Y+10	; 0x0a
    173c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9e 83       	std	Y+6, r25	; 0x06
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <main+0x594>
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	5b ce       	rjmp	.-842    	; 0x1414 <main+0x254>
		{
			_delay_ms(500);
		}
		else if(state == Buzzer_ON)				/*activate the buzzer*/
    175e:	fe 01       	movw	r30, r28
    1760:	e7 5b       	subi	r30, 0xB7	; 183
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	80 81       	ld	r24, Z
    1766:	86 31       	cpi	r24, 0x16	; 22
    1768:	09 f0       	breq	.+2      	; 0x176c <main+0x5ac>
    176a:	54 ce       	rjmp	.-856    	; 0x1414 <main+0x254>
		{
			gtick=0;
    176c:	10 92 74 01 	sts	0x0174, r1
			Buzzer_On();
    1770:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Buzzer_On>
			while(gtick<60);					/*wait for 60 second*/
    1774:	80 91 74 01 	lds	r24, 0x0174
    1778:	8c 33       	cpi	r24, 0x3C	; 60
    177a:	e0 f3       	brcs	.-8      	; 0x1774 <main+0x5b4>
			Buzzer_Off();						/*Deactivate the buzzer*/
    177c:	0e 94 6d 06 	call	0xcda	; 0xcda <Buzzer_Off>
    1780:	49 ce       	rjmp	.-878    	; 0x1414 <main+0x254>

00001782 <DcMotor_Init>:
#include "common_macros.h" /* For GET_BIT Macro */
#include "gpio.h"
#include"pwm.h"

void DcMotor_Init(void)
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(motorout1_portID,motorout1_pinID,PIN_OUTPUT);
    178a:	83 e0       	ldi	r24, 0x03	; 3
    178c:	62 e0       	ldi	r22, 0x02	; 2
    178e:	41 e0       	ldi	r20, 0x01	; 1
    1790:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(motorout2_portID,motorout2_pinID,PIN_OUTPUT);
    1794:	83 e0       	ldi	r24, 0x03	; 3
    1796:	63 e0       	ldi	r22, 0x03	; 3
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_setupPinDirection>
	/* Motor is stop at the beginning */
	GPIO_writePin(motorout1_portID,motorout1_pinID,LOGIC_LOW);
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	62 e0       	ldi	r22, 0x02	; 2
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <GPIO_writePin>
	GPIO_writePin(motorout2_portID,motorout2_pinID,LOGIC_LOW);
    17a8:	83 e0       	ldi	r24, 0x03	; 3
    17aa:	63 e0       	ldi	r22, 0x03	; 3
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <GPIO_writePin>

}
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <DcMotor_Rotate>:

void DcMotor_Rotate(uint8 state,uint8 speed)
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	00 d0       	rcall	.+0      	; 0x17be <DcMotor_Rotate+0x6>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	6a 83       	std	Y+2, r22	; 0x02
	if(state==2)
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	82 30       	cpi	r24, 0x02	; 2
    17ca:	51 f4       	brne	.+20     	; 0x17e0 <DcMotor_Rotate+0x28>
	{
		GPIO_writePin(motorout1_portID,motorout1_pinID,LOGIC_HIGH);
    17cc:	83 e0       	ldi	r24, 0x03	; 3
    17ce:	62 e0       	ldi	r22, 0x02	; 2
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <GPIO_writePin>
		GPIO_writePin(motorout2_portID,motorout2_pinID,LOGIC_LOW);
    17d6:	83 e0       	ldi	r24, 0x03	; 3
    17d8:	63 e0       	ldi	r22, 0x03	; 3
    17da:	40 e0       	ldi	r20, 0x00	; 0
    17dc:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <GPIO_writePin>
	}
	if(state==1)
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	59 f4       	brne	.+22     	; 0x17fc <DcMotor_Rotate+0x44>
	{
		GPIO_writePin(motorout1_portID,motorout1_pinID,LOGIC_LOW);
    17e6:	83 e0       	ldi	r24, 0x03	; 3
    17e8:	62 e0       	ldi	r22, 0x02	; 2
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <GPIO_writePin>
		GPIO_writePin(motorout2_portID,motorout2_pinID,LOGIC_HIGH);
    17f0:	83 e0       	ldi	r24, 0x03	; 3
    17f2:	63 e0       	ldi	r22, 0x03	; 3
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <GPIO_writePin>
    17fa:	0d c0       	rjmp	.+26     	; 0x1816 <DcMotor_Rotate+0x5e>

	}
	else if(state==0)
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	88 23       	and	r24, r24
    1800:	51 f4       	brne	.+20     	; 0x1816 <DcMotor_Rotate+0x5e>
	{
		GPIO_writePin(motorout1_portID,motorout1_pinID,LOGIC_LOW);
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	62 e0       	ldi	r22, 0x02	; 2
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <GPIO_writePin>
		GPIO_writePin(motorout2_portID,motorout2_pinID,LOGIC_LOW);
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	63 e0       	ldi	r22, 0x03	; 3
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <GPIO_writePin>
	}
	PWM_Timer0_Start(speed);
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <PWM_Timer0_Start>
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <EEPROM_writeByte+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <EEPROM_writeByte+0x8>
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1838:	0e 94 1c 11 	call	0x2238	; 0x2238 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    183c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <TWI_getStatus>
    1840:	88 30       	cpi	r24, 0x08	; 8
    1842:	11 f0       	breq	.+4      	; 0x1848 <EEPROM_writeByte+0x22>
        return ERROR;
    1844:	1c 82       	std	Y+4, r1	; 0x04
    1846:	28 c0       	rjmp	.+80     	; 0x1898 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	80 70       	andi	r24, 0x00	; 0
    184e:	97 70       	andi	r25, 0x07	; 7
    1850:	88 0f       	add	r24, r24
    1852:	89 2f       	mov	r24, r25
    1854:	88 1f       	adc	r24, r24
    1856:	99 0b       	sbc	r25, r25
    1858:	91 95       	neg	r25
    185a:	80 6a       	ori	r24, 0xA0	; 160
    185c:	0e 94 37 11 	call	0x226e	; 0x226e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1860:	0e 94 74 11 	call	0x22e8	; 0x22e8 <TWI_getStatus>
    1864:	88 31       	cpi	r24, 0x18	; 24
    1866:	11 f0       	breq	.+4      	; 0x186c <EEPROM_writeByte+0x46>
        return ERROR; 
    1868:	1c 82       	std	Y+4, r1	; 0x04
    186a:	16 c0       	rjmp	.+44     	; 0x1898 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	0e 94 37 11 	call	0x226e	; 0x226e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1872:	0e 94 74 11 	call	0x22e8	; 0x22e8 <TWI_getStatus>
    1876:	88 32       	cpi	r24, 0x28	; 40
    1878:	11 f0       	breq	.+4      	; 0x187e <EEPROM_writeByte+0x58>
        return ERROR;
    187a:	1c 82       	std	Y+4, r1	; 0x04
    187c:	0d c0       	rjmp	.+26     	; 0x1898 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	0e 94 37 11 	call	0x226e	; 0x226e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1884:	0e 94 74 11 	call	0x22e8	; 0x22e8 <TWI_getStatus>
    1888:	88 32       	cpi	r24, 0x28	; 40
    188a:	11 f0       	breq	.+4      	; 0x1890 <EEPROM_writeByte+0x6a>
        return ERROR;
    188c:	1c 82       	std	Y+4, r1	; 0x04
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1890:	0e 94 2c 11 	call	0x2258	; 0x2258 <TWI_stop>
	
    return SUCCESS;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	8c 83       	std	Y+4, r24	; 0x04
    1898:	8c 81       	ldd	r24, Y+4	; 0x04
}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <EEPROM_readByte+0x6>
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <EEPROM_readByte+0x8>
    18b0:	0f 92       	push	r0
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	9a 83       	std	Y+2, r25	; 0x02
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	7c 83       	std	Y+4, r23	; 0x04
    18bc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    18be:	0e 94 1c 11 	call	0x2238	; 0x2238 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    18c2:	0e 94 74 11 	call	0x22e8	; 0x22e8 <TWI_getStatus>
    18c6:	88 30       	cpi	r24, 0x08	; 8
    18c8:	11 f0       	breq	.+4      	; 0x18ce <EEPROM_readByte+0x26>
        return ERROR;
    18ca:	1d 82       	std	Y+5, r1	; 0x05
    18cc:	44 c0       	rjmp	.+136    	; 0x1956 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	9a 81       	ldd	r25, Y+2	; 0x02
    18d2:	80 70       	andi	r24, 0x00	; 0
    18d4:	97 70       	andi	r25, 0x07	; 7
    18d6:	88 0f       	add	r24, r24
    18d8:	89 2f       	mov	r24, r25
    18da:	88 1f       	adc	r24, r24
    18dc:	99 0b       	sbc	r25, r25
    18de:	91 95       	neg	r25
    18e0:	80 6a       	ori	r24, 0xA0	; 160
    18e2:	0e 94 37 11 	call	0x226e	; 0x226e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    18e6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <TWI_getStatus>
    18ea:	88 31       	cpi	r24, 0x18	; 24
    18ec:	11 f0       	breq	.+4      	; 0x18f2 <EEPROM_readByte+0x4a>
        return ERROR;
    18ee:	1d 82       	std	Y+5, r1	; 0x05
    18f0:	32 c0       	rjmp	.+100    	; 0x1956 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	0e 94 37 11 	call	0x226e	; 0x226e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18f8:	0e 94 74 11 	call	0x22e8	; 0x22e8 <TWI_getStatus>
    18fc:	88 32       	cpi	r24, 0x28	; 40
    18fe:	11 f0       	breq	.+4      	; 0x1904 <EEPROM_readByte+0x5c>
        return ERROR;
    1900:	1d 82       	std	Y+5, r1	; 0x05
    1902:	29 c0       	rjmp	.+82     	; 0x1956 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1904:	0e 94 1c 11 	call	0x2238	; 0x2238 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1908:	0e 94 74 11 	call	0x22e8	; 0x22e8 <TWI_getStatus>
    190c:	80 31       	cpi	r24, 0x10	; 16
    190e:	11 f0       	breq	.+4      	; 0x1914 <EEPROM_readByte+0x6c>
        return ERROR;
    1910:	1d 82       	std	Y+5, r1	; 0x05
    1912:	21 c0       	rjmp	.+66     	; 0x1956 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	80 70       	andi	r24, 0x00	; 0
    191a:	97 70       	andi	r25, 0x07	; 7
    191c:	88 0f       	add	r24, r24
    191e:	89 2f       	mov	r24, r25
    1920:	88 1f       	adc	r24, r24
    1922:	99 0b       	sbc	r25, r25
    1924:	91 95       	neg	r25
    1926:	81 6a       	ori	r24, 0xA1	; 161
    1928:	0e 94 37 11 	call	0x226e	; 0x226e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    192c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <TWI_getStatus>
    1930:	80 34       	cpi	r24, 0x40	; 64
    1932:	11 f0       	breq	.+4      	; 0x1938 <EEPROM_readByte+0x90>
        return ERROR;
    1934:	1d 82       	std	Y+5, r1	; 0x05
    1936:	0f c0       	rjmp	.+30     	; 0x1956 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1938:	0e 94 61 11 	call	0x22c2	; 0x22c2 <TWI_readByteWithNACK>
    193c:	eb 81       	ldd	r30, Y+3	; 0x03
    193e:	fc 81       	ldd	r31, Y+4	; 0x04
    1940:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1942:	0e 94 74 11 	call	0x22e8	; 0x22e8 <TWI_getStatus>
    1946:	88 35       	cpi	r24, 0x58	; 88
    1948:	11 f0       	breq	.+4      	; 0x194e <EEPROM_readByte+0xa6>
        return ERROR;
    194a:	1d 82       	std	Y+5, r1	; 0x05
    194c:	04 c0       	rjmp	.+8      	; 0x1956 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    194e:	0e 94 2c 11 	call	0x2258	; 0x2258 <TWI_stop>

    return SUCCESS;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	00 d0       	rcall	.+0      	; 0x196e <GPIO_setupPinDirection+0x6>
    196e:	00 d0       	rcall	.+0      	; 0x1970 <GPIO_setupPinDirection+0x8>
    1970:	0f 92       	push	r0
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	6a 83       	std	Y+2, r22	; 0x02
    197a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	88 30       	cpi	r24, 0x08	; 8
    1980:	08 f0       	brcs	.+2      	; 0x1984 <GPIO_setupPinDirection+0x1c>
    1982:	d5 c0       	rjmp	.+426    	; 0x1b2e <GPIO_setupPinDirection+0x1c6>
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	84 30       	cpi	r24, 0x04	; 4
    1988:	08 f0       	brcs	.+2      	; 0x198c <GPIO_setupPinDirection+0x24>
    198a:	d1 c0       	rjmp	.+418    	; 0x1b2e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	3d 83       	std	Y+5, r19	; 0x05
    1994:	2c 83       	std	Y+4, r18	; 0x04
    1996:	8c 81       	ldd	r24, Y+4	; 0x04
    1998:	9d 81       	ldd	r25, Y+5	; 0x05
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	91 05       	cpc	r25, r1
    199e:	09 f4       	brne	.+2      	; 0x19a2 <GPIO_setupPinDirection+0x3a>
    19a0:	43 c0       	rjmp	.+134    	; 0x1a28 <GPIO_setupPinDirection+0xc0>
    19a2:	2c 81       	ldd	r18, Y+4	; 0x04
    19a4:	3d 81       	ldd	r19, Y+5	; 0x05
    19a6:	22 30       	cpi	r18, 0x02	; 2
    19a8:	31 05       	cpc	r19, r1
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <GPIO_setupPinDirection+0x4e>
    19ac:	8c 81       	ldd	r24, Y+4	; 0x04
    19ae:	9d 81       	ldd	r25, Y+5	; 0x05
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	71 f0       	breq	.+28     	; 0x19d0 <GPIO_setupPinDirection+0x68>
    19b4:	bc c0       	rjmp	.+376    	; 0x1b2e <GPIO_setupPinDirection+0x1c6>
    19b6:	2c 81       	ldd	r18, Y+4	; 0x04
    19b8:	3d 81       	ldd	r19, Y+5	; 0x05
    19ba:	22 30       	cpi	r18, 0x02	; 2
    19bc:	31 05       	cpc	r19, r1
    19be:	09 f4       	brne	.+2      	; 0x19c2 <GPIO_setupPinDirection+0x5a>
    19c0:	5f c0       	rjmp	.+190    	; 0x1a80 <GPIO_setupPinDirection+0x118>
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	9d 81       	ldd	r25, Y+5	; 0x05
    19c6:	83 30       	cpi	r24, 0x03	; 3
    19c8:	91 05       	cpc	r25, r1
    19ca:	09 f4       	brne	.+2      	; 0x19ce <GPIO_setupPinDirection+0x66>
    19cc:	85 c0       	rjmp	.+266    	; 0x1ad8 <GPIO_setupPinDirection+0x170>
    19ce:	af c0       	rjmp	.+350    	; 0x1b2e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	a1 f4       	brne	.+40     	; 0x19fe <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    19d6:	aa e3       	ldi	r26, 0x3A	; 58
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	ea e3       	ldi	r30, 0x3A	; 58
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	48 2f       	mov	r20, r24
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	02 2e       	mov	r0, r18
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <GPIO_setupPinDirection+0x8c>
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	0a 94       	dec	r0
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <GPIO_setupPinDirection+0x88>
    19f8:	84 2b       	or	r24, r20
    19fa:	8c 93       	st	X, r24
    19fc:	98 c0       	rjmp	.+304    	; 0x1b2e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    19fe:	aa e3       	ldi	r26, 0x3A	; 58
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	ea e3       	ldi	r30, 0x3A	; 58
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	48 2f       	mov	r20, r24
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	02 2e       	mov	r0, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <GPIO_setupPinDirection+0xb4>
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	0a 94       	dec	r0
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <GPIO_setupPinDirection+0xb0>
    1a20:	80 95       	com	r24
    1a22:	84 23       	and	r24, r20
    1a24:	8c 93       	st	X, r24
    1a26:	83 c0       	rjmp	.+262    	; 0x1b2e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	81 30       	cpi	r24, 0x01	; 1
    1a2c:	a1 f4       	brne	.+40     	; 0x1a56 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1a2e:	a7 e3       	ldi	r26, 0x37	; 55
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e7 e3       	ldi	r30, 0x37	; 55
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 2e       	mov	r0, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <GPIO_setupPinDirection+0xe4>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	0a 94       	dec	r0
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <GPIO_setupPinDirection+0xe0>
    1a50:	84 2b       	or	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	6c c0       	rjmp	.+216    	; 0x1b2e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a56:	a7 e3       	ldi	r26, 0x37	; 55
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e7 e3       	ldi	r30, 0x37	; 55
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <GPIO_setupPinDirection+0x10c>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <GPIO_setupPinDirection+0x108>
    1a78:	80 95       	com	r24
    1a7a:	84 23       	and	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	57 c0       	rjmp	.+174    	; 0x1b2e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	a1 f4       	brne	.+40     	; 0x1aae <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1a86:	a4 e3       	ldi	r26, 0x34	; 52
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e4 e3       	ldi	r30, 0x34	; 52
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	48 2f       	mov	r20, r24
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	02 2e       	mov	r0, r18
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <GPIO_setupPinDirection+0x13c>
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	0a 94       	dec	r0
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <GPIO_setupPinDirection+0x138>
    1aa8:	84 2b       	or	r24, r20
    1aaa:	8c 93       	st	X, r24
    1aac:	40 c0       	rjmp	.+128    	; 0x1b2e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1aae:	a4 e3       	ldi	r26, 0x34	; 52
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e4 e3       	ldi	r30, 0x34	; 52
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	48 2f       	mov	r20, r24
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	02 2e       	mov	r0, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <GPIO_setupPinDirection+0x164>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	0a 94       	dec	r0
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <GPIO_setupPinDirection+0x160>
    1ad0:	80 95       	com	r24
    1ad2:	84 23       	and	r24, r20
    1ad4:	8c 93       	st	X, r24
    1ad6:	2b c0       	rjmp	.+86     	; 0x1b2e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	a1 f4       	brne	.+40     	; 0x1b06 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1ade:	a1 e3       	ldi	r26, 0x31	; 49
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e1 e3       	ldi	r30, 0x31	; 49
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 2e       	mov	r0, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <GPIO_setupPinDirection+0x194>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <GPIO_setupPinDirection+0x190>
    1b00:	84 2b       	or	r24, r20
    1b02:	8c 93       	st	X, r24
    1b04:	14 c0       	rjmp	.+40     	; 0x1b2e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1b06:	a1 e3       	ldi	r26, 0x31	; 49
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e1 e3       	ldi	r30, 0x31	; 49
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <GPIO_setupPinDirection+0x1bc>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <GPIO_setupPinDirection+0x1b8>
    1b28:	80 95       	com	r24
    1b2a:	84 23       	and	r24, r20
    1b2c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <GPIO_writePin+0x6>
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <GPIO_writePin+0x8>
    1b46:	0f 92       	push	r0
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	6a 83       	std	Y+2, r22	; 0x02
    1b50:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	88 30       	cpi	r24, 0x08	; 8
    1b56:	08 f0       	brcs	.+2      	; 0x1b5a <GPIO_writePin+0x1c>
    1b58:	d5 c0       	rjmp	.+426    	; 0x1d04 <GPIO_writePin+0x1c6>
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	84 30       	cpi	r24, 0x04	; 4
    1b5e:	08 f0       	brcs	.+2      	; 0x1b62 <GPIO_writePin+0x24>
    1b60:	d1 c0       	rjmp	.+418    	; 0x1d04 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	3d 83       	std	Y+5, r19	; 0x05
    1b6a:	2c 83       	std	Y+4, r18	; 0x04
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b70:	81 30       	cpi	r24, 0x01	; 1
    1b72:	91 05       	cpc	r25, r1
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <GPIO_writePin+0x3a>
    1b76:	43 c0       	rjmp	.+134    	; 0x1bfe <GPIO_writePin+0xc0>
    1b78:	2c 81       	ldd	r18, Y+4	; 0x04
    1b7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b7c:	22 30       	cpi	r18, 0x02	; 2
    1b7e:	31 05       	cpc	r19, r1
    1b80:	2c f4       	brge	.+10     	; 0x1b8c <GPIO_writePin+0x4e>
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	9d 81       	ldd	r25, Y+5	; 0x05
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	71 f0       	breq	.+28     	; 0x1ba6 <GPIO_writePin+0x68>
    1b8a:	bc c0       	rjmp	.+376    	; 0x1d04 <GPIO_writePin+0x1c6>
    1b8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b90:	22 30       	cpi	r18, 0x02	; 2
    1b92:	31 05       	cpc	r19, r1
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <GPIO_writePin+0x5a>
    1b96:	5f c0       	rjmp	.+190    	; 0x1c56 <GPIO_writePin+0x118>
    1b98:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b9c:	83 30       	cpi	r24, 0x03	; 3
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <GPIO_writePin+0x66>
    1ba2:	85 c0       	rjmp	.+266    	; 0x1cae <GPIO_writePin+0x170>
    1ba4:	af c0       	rjmp	.+350    	; 0x1d04 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	81 30       	cpi	r24, 0x01	; 1
    1baa:	a1 f4       	brne	.+40     	; 0x1bd4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1bac:	ab e3       	ldi	r26, 0x3B	; 59
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	eb e3       	ldi	r30, 0x3B	; 59
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	48 2f       	mov	r20, r24
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	02 2e       	mov	r0, r18
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <GPIO_writePin+0x8c>
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	0a 94       	dec	r0
    1bcc:	e2 f7       	brpl	.-8      	; 0x1bc6 <GPIO_writePin+0x88>
    1bce:	84 2b       	or	r24, r20
    1bd0:	8c 93       	st	X, r24
    1bd2:	98 c0       	rjmp	.+304    	; 0x1d04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1bd4:	ab e3       	ldi	r26, 0x3B	; 59
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	eb e3       	ldi	r30, 0x3B	; 59
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	48 2f       	mov	r20, r24
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	02 2e       	mov	r0, r18
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <GPIO_writePin+0xb4>
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	0a 94       	dec	r0
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <GPIO_writePin+0xb0>
    1bf6:	80 95       	com	r24
    1bf8:	84 23       	and	r24, r20
    1bfa:	8c 93       	st	X, r24
    1bfc:	83 c0       	rjmp	.+262    	; 0x1d04 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	a1 f4       	brne	.+40     	; 0x1c2c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1c04:	a8 e3       	ldi	r26, 0x38	; 56
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e8 e3       	ldi	r30, 0x38	; 56
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	48 2f       	mov	r20, r24
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 2e       	mov	r0, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <GPIO_writePin+0xe4>
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	0a 94       	dec	r0
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <GPIO_writePin+0xe0>
    1c26:	84 2b       	or	r24, r20
    1c28:	8c 93       	st	X, r24
    1c2a:	6c c0       	rjmp	.+216    	; 0x1d04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1c2c:	a8 e3       	ldi	r26, 0x38	; 56
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e8 e3       	ldi	r30, 0x38	; 56
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	48 2f       	mov	r20, r24
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	02 2e       	mov	r0, r18
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <GPIO_writePin+0x10c>
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	0a 94       	dec	r0
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <GPIO_writePin+0x108>
    1c4e:	80 95       	com	r24
    1c50:	84 23       	and	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	57 c0       	rjmp	.+174    	; 0x1d04 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	a1 f4       	brne	.+40     	; 0x1c84 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1c5c:	a5 e3       	ldi	r26, 0x35	; 53
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e5 e3       	ldi	r30, 0x35	; 53
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	48 2f       	mov	r20, r24
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	02 2e       	mov	r0, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <GPIO_writePin+0x13c>
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	0a 94       	dec	r0
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <GPIO_writePin+0x138>
    1c7e:	84 2b       	or	r24, r20
    1c80:	8c 93       	st	X, r24
    1c82:	40 c0       	rjmp	.+128    	; 0x1d04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1c84:	a5 e3       	ldi	r26, 0x35	; 53
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e5 e3       	ldi	r30, 0x35	; 53
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	48 2f       	mov	r20, r24
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 2e       	mov	r0, r18
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <GPIO_writePin+0x164>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	0a 94       	dec	r0
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <GPIO_writePin+0x160>
    1ca6:	80 95       	com	r24
    1ca8:	84 23       	and	r24, r20
    1caa:	8c 93       	st	X, r24
    1cac:	2b c0       	rjmp	.+86     	; 0x1d04 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	a1 f4       	brne	.+40     	; 0x1cdc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1cb4:	a2 e3       	ldi	r26, 0x32	; 50
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e2 e3       	ldi	r30, 0x32	; 50
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 2e       	mov	r0, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <GPIO_writePin+0x194>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	0a 94       	dec	r0
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <GPIO_writePin+0x190>
    1cd6:	84 2b       	or	r24, r20
    1cd8:	8c 93       	st	X, r24
    1cda:	14 c0       	rjmp	.+40     	; 0x1d04 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1cdc:	a2 e3       	ldi	r26, 0x32	; 50
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e2 e3       	ldi	r30, 0x32	; 50
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	48 2f       	mov	r20, r24
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	02 2e       	mov	r0, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <GPIO_writePin+0x1bc>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 94       	dec	r0
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <GPIO_writePin+0x1b8>
    1cfe:	80 95       	com	r24
    1d00:	84 23       	and	r24, r20
    1d02:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	00 d0       	rcall	.+0      	; 0x1d1a <GPIO_readPin+0x6>
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <GPIO_readPin+0x8>
    1d1c:	0f 92       	push	r0
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	8a 83       	std	Y+2, r24	; 0x02
    1d24:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1d26:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	88 30       	cpi	r24, 0x08	; 8
    1d2c:	08 f0       	brcs	.+2      	; 0x1d30 <GPIO_readPin+0x1c>
    1d2e:	84 c0       	rjmp	.+264    	; 0x1e38 <GPIO_readPin+0x124>
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	84 30       	cpi	r24, 0x04	; 4
    1d34:	08 f0       	brcs	.+2      	; 0x1d38 <GPIO_readPin+0x24>
    1d36:	80 c0       	rjmp	.+256    	; 0x1e38 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	3d 83       	std	Y+5, r19	; 0x05
    1d40:	2c 83       	std	Y+4, r18	; 0x04
    1d42:	4c 81       	ldd	r20, Y+4	; 0x04
    1d44:	5d 81       	ldd	r21, Y+5	; 0x05
    1d46:	41 30       	cpi	r20, 0x01	; 1
    1d48:	51 05       	cpc	r21, r1
    1d4a:	79 f1       	breq	.+94     	; 0x1daa <GPIO_readPin+0x96>
    1d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d50:	82 30       	cpi	r24, 0x02	; 2
    1d52:	91 05       	cpc	r25, r1
    1d54:	34 f4       	brge	.+12     	; 0x1d62 <GPIO_readPin+0x4e>
    1d56:	2c 81       	ldd	r18, Y+4	; 0x04
    1d58:	3d 81       	ldd	r19, Y+5	; 0x05
    1d5a:	21 15       	cp	r18, r1
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	69 f0       	breq	.+26     	; 0x1d7a <GPIO_readPin+0x66>
    1d60:	6b c0       	rjmp	.+214    	; 0x1e38 <GPIO_readPin+0x124>
    1d62:	4c 81       	ldd	r20, Y+4	; 0x04
    1d64:	5d 81       	ldd	r21, Y+5	; 0x05
    1d66:	42 30       	cpi	r20, 0x02	; 2
    1d68:	51 05       	cpc	r21, r1
    1d6a:	b9 f1       	breq	.+110    	; 0x1dda <GPIO_readPin+0xc6>
    1d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d70:	83 30       	cpi	r24, 0x03	; 3
    1d72:	91 05       	cpc	r25, r1
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <GPIO_readPin+0x64>
    1d76:	49 c0       	rjmp	.+146    	; 0x1e0a <GPIO_readPin+0xf6>
    1d78:	5f c0       	rjmp	.+190    	; 0x1e38 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1d7a:	e9 e3       	ldi	r30, 0x39	; 57
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a9 01       	movw	r20, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <GPIO_readPin+0x7e>
    1d8e:	55 95       	asr	r21
    1d90:	47 95       	ror	r20
    1d92:	8a 95       	dec	r24
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <GPIO_readPin+0x7a>
    1d96:	ca 01       	movw	r24, r20
    1d98:	81 70       	andi	r24, 0x01	; 1
    1d9a:	90 70       	andi	r25, 0x00	; 0
    1d9c:	88 23       	and	r24, r24
    1d9e:	19 f0       	breq	.+6      	; 0x1da6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	49 c0       	rjmp	.+146    	; 0x1e38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1da6:	19 82       	std	Y+1, r1	; 0x01
    1da8:	47 c0       	rjmp	.+142    	; 0x1e38 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1daa:	e6 e3       	ldi	r30, 0x36	; 54
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	a9 01       	movw	r20, r18
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <GPIO_readPin+0xae>
    1dbe:	55 95       	asr	r21
    1dc0:	47 95       	ror	r20
    1dc2:	8a 95       	dec	r24
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <GPIO_readPin+0xaa>
    1dc6:	ca 01       	movw	r24, r20
    1dc8:	81 70       	andi	r24, 0x01	; 1
    1dca:	90 70       	andi	r25, 0x00	; 0
    1dcc:	88 23       	and	r24, r24
    1dce:	19 f0       	breq	.+6      	; 0x1dd6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	31 c0       	rjmp	.+98     	; 0x1e38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1dd6:	19 82       	std	Y+1, r1	; 0x01
    1dd8:	2f c0       	rjmp	.+94     	; 0x1e38 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1dda:	e3 e3       	ldi	r30, 0x33	; 51
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a9 01       	movw	r20, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <GPIO_readPin+0xde>
    1dee:	55 95       	asr	r21
    1df0:	47 95       	ror	r20
    1df2:	8a 95       	dec	r24
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <GPIO_readPin+0xda>
    1df6:	ca 01       	movw	r24, r20
    1df8:	81 70       	andi	r24, 0x01	; 1
    1dfa:	90 70       	andi	r25, 0x00	; 0
    1dfc:	88 23       	and	r24, r24
    1dfe:	19 f0       	breq	.+6      	; 0x1e06 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	19 c0       	rjmp	.+50     	; 0x1e38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e06:	19 82       	std	Y+1, r1	; 0x01
    1e08:	17 c0       	rjmp	.+46     	; 0x1e38 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1e0a:	e0 e3       	ldi	r30, 0x30	; 48
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a9 01       	movw	r20, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <GPIO_readPin+0x10e>
    1e1e:	55 95       	asr	r21
    1e20:	47 95       	ror	r20
    1e22:	8a 95       	dec	r24
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <GPIO_readPin+0x10a>
    1e26:	ca 01       	movw	r24, r20
    1e28:	81 70       	andi	r24, 0x01	; 1
    1e2a:	90 70       	andi	r25, 0x00	; 0
    1e2c:	88 23       	and	r24, r24
    1e2e:	19 f0       	breq	.+6      	; 0x1e36 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	01 c0       	rjmp	.+2      	; 0x1e38 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e36:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <GPIO_setupPortDirection+0x6>
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <GPIO_setupPortDirection+0x8>
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	89 83       	std	Y+1, r24	; 0x01
    1e58:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	84 30       	cpi	r24, 0x04	; 4
    1e5e:	90 f5       	brcc	.+100    	; 0x1ec4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	3c 83       	std	Y+4, r19	; 0x04
    1e68:	2b 83       	std	Y+3, r18	; 0x03
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	91 05       	cpc	r25, r1
    1e72:	d1 f0       	breq	.+52     	; 0x1ea8 <GPIO_setupPortDirection+0x5e>
    1e74:	2b 81       	ldd	r18, Y+3	; 0x03
    1e76:	3c 81       	ldd	r19, Y+4	; 0x04
    1e78:	22 30       	cpi	r18, 0x02	; 2
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	2c f4       	brge	.+10     	; 0x1e88 <GPIO_setupPortDirection+0x3e>
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	9c 81       	ldd	r25, Y+4	; 0x04
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	61 f0       	breq	.+24     	; 0x1e9e <GPIO_setupPortDirection+0x54>
    1e86:	1e c0       	rjmp	.+60     	; 0x1ec4 <GPIO_setupPortDirection+0x7a>
    1e88:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8c:	22 30       	cpi	r18, 0x02	; 2
    1e8e:	31 05       	cpc	r19, r1
    1e90:	81 f0       	breq	.+32     	; 0x1eb2 <GPIO_setupPortDirection+0x68>
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	9c 81       	ldd	r25, Y+4	; 0x04
    1e96:	83 30       	cpi	r24, 0x03	; 3
    1e98:	91 05       	cpc	r25, r1
    1e9a:	81 f0       	breq	.+32     	; 0x1ebc <GPIO_setupPortDirection+0x72>
    1e9c:	13 c0       	rjmp	.+38     	; 0x1ec4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1e9e:	ea e3       	ldi	r30, 0x3A	; 58
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	80 83       	st	Z, r24
    1ea6:	0e c0       	rjmp	.+28     	; 0x1ec4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ea8:	e7 e3       	ldi	r30, 0x37	; 55
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	80 83       	st	Z, r24
    1eb0:	09 c0       	rjmp	.+18     	; 0x1ec4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1eb2:	e4 e3       	ldi	r30, 0x34	; 52
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	80 83       	st	Z, r24
    1eba:	04 c0       	rjmp	.+8      	; 0x1ec4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ebc:	e1 e3       	ldi	r30, 0x31	; 49
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <GPIO_writePort+0x6>
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <GPIO_writePort+0x8>
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	84 30       	cpi	r24, 0x04	; 4
    1ee6:	90 f5       	brcc	.+100    	; 0x1f4c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	3c 83       	std	Y+4, r19	; 0x04
    1ef0:	2b 83       	std	Y+3, r18	; 0x03
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	81 30       	cpi	r24, 0x01	; 1
    1ef8:	91 05       	cpc	r25, r1
    1efa:	d1 f0       	breq	.+52     	; 0x1f30 <GPIO_writePort+0x5e>
    1efc:	2b 81       	ldd	r18, Y+3	; 0x03
    1efe:	3c 81       	ldd	r19, Y+4	; 0x04
    1f00:	22 30       	cpi	r18, 0x02	; 2
    1f02:	31 05       	cpc	r19, r1
    1f04:	2c f4       	brge	.+10     	; 0x1f10 <GPIO_writePort+0x3e>
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	61 f0       	breq	.+24     	; 0x1f26 <GPIO_writePort+0x54>
    1f0e:	1e c0       	rjmp	.+60     	; 0x1f4c <GPIO_writePort+0x7a>
    1f10:	2b 81       	ldd	r18, Y+3	; 0x03
    1f12:	3c 81       	ldd	r19, Y+4	; 0x04
    1f14:	22 30       	cpi	r18, 0x02	; 2
    1f16:	31 05       	cpc	r19, r1
    1f18:	81 f0       	breq	.+32     	; 0x1f3a <GPIO_writePort+0x68>
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	83 30       	cpi	r24, 0x03	; 3
    1f20:	91 05       	cpc	r25, r1
    1f22:	81 f0       	breq	.+32     	; 0x1f44 <GPIO_writePort+0x72>
    1f24:	13 c0       	rjmp	.+38     	; 0x1f4c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1f26:	eb e3       	ldi	r30, 0x3B	; 59
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	80 83       	st	Z, r24
    1f2e:	0e c0       	rjmp	.+28     	; 0x1f4c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1f30:	e8 e3       	ldi	r30, 0x38	; 56
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	80 83       	st	Z, r24
    1f38:	09 c0       	rjmp	.+18     	; 0x1f4c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1f3a:	e5 e3       	ldi	r30, 0x35	; 53
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	80 83       	st	Z, r24
    1f42:	04 c0       	rjmp	.+8      	; 0x1f4c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1f44:	e2 e3       	ldi	r30, 0x32	; 50
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <GPIO_readPort+0x6>
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <GPIO_readPort+0x8>
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1f68:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	84 30       	cpi	r24, 0x04	; 4
    1f6e:	90 f5       	brcc	.+100    	; 0x1fd4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	3c 83       	std	Y+4, r19	; 0x04
    1f78:	2b 83       	std	Y+3, r18	; 0x03
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	91 05       	cpc	r25, r1
    1f82:	d1 f0       	breq	.+52     	; 0x1fb8 <GPIO_readPort+0x5e>
    1f84:	2b 81       	ldd	r18, Y+3	; 0x03
    1f86:	3c 81       	ldd	r19, Y+4	; 0x04
    1f88:	22 30       	cpi	r18, 0x02	; 2
    1f8a:	31 05       	cpc	r19, r1
    1f8c:	2c f4       	brge	.+10     	; 0x1f98 <GPIO_readPort+0x3e>
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	61 f0       	breq	.+24     	; 0x1fae <GPIO_readPort+0x54>
    1f96:	1e c0       	rjmp	.+60     	; 0x1fd4 <GPIO_readPort+0x7a>
    1f98:	2b 81       	ldd	r18, Y+3	; 0x03
    1f9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9c:	22 30       	cpi	r18, 0x02	; 2
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	81 f0       	breq	.+32     	; 0x1fc2 <GPIO_readPort+0x68>
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa6:	83 30       	cpi	r24, 0x03	; 3
    1fa8:	91 05       	cpc	r25, r1
    1faa:	81 f0       	breq	.+32     	; 0x1fcc <GPIO_readPort+0x72>
    1fac:	13 c0       	rjmp	.+38     	; 0x1fd4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1fae:	e9 e3       	ldi	r30, 0x39	; 57
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	0e c0       	rjmp	.+28     	; 0x1fd4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1fb8:	e6 e3       	ldi	r30, 0x36	; 54
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	09 c0       	rjmp	.+18     	; 0x1fd4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1fc2:	e3 e3       	ldi	r30, 0x33	; 51
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	04 c0       	rjmp	.+8      	; 0x1fd4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1fcc:	e0 e3       	ldi	r30, 0x30	; 48
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <PWM_Timer0_Start>:
#include"dc_motor.h"
#include"pwm.h"
#include "avr/io.h"

void PWM_Timer0_Start(uint8 set_duty_cycle)
{
    1fe4:	0f 93       	push	r16
    1fe6:	1f 93       	push	r17
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	0f 92       	push	r0
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    1ff4:	e2 e5       	ldi	r30, 0x52	; 82
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle*2.559; // Set Compare Value
    1ffa:	0c e5       	ldi	r16, 0x5C	; 92
    1ffc:	10 e0       	ldi	r17, 0x00	; 0
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	88 2f       	mov	r24, r24
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	aa 27       	eor	r26, r26
    2006:	97 fd       	sbrc	r25, 7
    2008:	a0 95       	com	r26
    200a:	ba 2f       	mov	r27, r26
    200c:	bc 01       	movw	r22, r24
    200e:	cd 01       	movw	r24, r26
    2010:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	28 ea       	ldi	r18, 0xA8	; 168
    201e:	36 ec       	ldi	r19, 0xC6	; 198
    2020:	43 e2       	ldi	r20, 0x23	; 35
    2022:	50 e4       	ldi	r21, 0x40	; 64
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	f8 01       	movw	r30, r16
    203a:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    203c:	a7 e3       	ldi	r26, 0x37	; 55
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e7 e3       	ldi	r30, 0x37	; 55
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	88 60       	ori	r24, 0x08	; 8
    2048:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    204a:	e3 e5       	ldi	r30, 0x53	; 83
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	8a e6       	ldi	r24, 0x6A	; 106
    2050:	80 83       	st	Z, r24
}
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	1f 91       	pop	r17
    205a:	0f 91       	pop	r16
    205c:	08 95       	ret

0000205e <__vector_7>:
#include <avr/io.h>

static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
    205e:	1f 92       	push	r1
    2060:	0f 92       	push	r0
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	0f 92       	push	r0
    2066:	11 24       	eor	r1, r1
    2068:	2f 93       	push	r18
    206a:	3f 93       	push	r19
    206c:	4f 93       	push	r20
    206e:	5f 93       	push	r21
    2070:	6f 93       	push	r22
    2072:	7f 93       	push	r23
    2074:	8f 93       	push	r24
    2076:	9f 93       	push	r25
    2078:	af 93       	push	r26
    207a:	bf 93       	push	r27
    207c:	ef 93       	push	r30
    207e:	ff 93       	push	r31
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2088:	80 91 75 01 	lds	r24, 0x0175
    208c:	90 91 76 01 	lds	r25, 0x0176
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	29 f0       	breq	.+10     	; 0x209e <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2094:	e0 91 75 01 	lds	r30, 0x0175
    2098:	f0 91 76 01 	lds	r31, 0x0176
    209c:	09 95       	icall
	}
}
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	ff 91       	pop	r31
    20a4:	ef 91       	pop	r30
    20a6:	bf 91       	pop	r27
    20a8:	af 91       	pop	r26
    20aa:	9f 91       	pop	r25
    20ac:	8f 91       	pop	r24
    20ae:	7f 91       	pop	r23
    20b0:	6f 91       	pop	r22
    20b2:	5f 91       	pop	r21
    20b4:	4f 91       	pop	r20
    20b6:	3f 91       	pop	r19
    20b8:	2f 91       	pop	r18
    20ba:	0f 90       	pop	r0
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	0f 90       	pop	r0
    20c0:	1f 90       	pop	r1
    20c2:	18 95       	reti

000020c4 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    20c4:	1f 92       	push	r1
    20c6:	0f 92       	push	r0
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	0f 92       	push	r0
    20cc:	11 24       	eor	r1, r1
    20ce:	2f 93       	push	r18
    20d0:	3f 93       	push	r19
    20d2:	4f 93       	push	r20
    20d4:	5f 93       	push	r21
    20d6:	6f 93       	push	r22
    20d8:	7f 93       	push	r23
    20da:	8f 93       	push	r24
    20dc:	9f 93       	push	r25
    20de:	af 93       	push	r26
    20e0:	bf 93       	push	r27
    20e2:	ef 93       	push	r30
    20e4:	ff 93       	push	r31
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    20ee:	80 91 75 01 	lds	r24, 0x0175
    20f2:	90 91 76 01 	lds	r25, 0x0176
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	29 f0       	breq	.+10     	; 0x2104 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    20fa:	e0 91 75 01 	lds	r30, 0x0175
    20fe:	f0 91 76 01 	lds	r31, 0x0176
    2102:	09 95       	icall
	}
}
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	ff 91       	pop	r31
    210a:	ef 91       	pop	r30
    210c:	bf 91       	pop	r27
    210e:	af 91       	pop	r26
    2110:	9f 91       	pop	r25
    2112:	8f 91       	pop	r24
    2114:	7f 91       	pop	r23
    2116:	6f 91       	pop	r22
    2118:	5f 91       	pop	r21
    211a:	4f 91       	pop	r20
    211c:	3f 91       	pop	r19
    211e:	2f 91       	pop	r18
    2120:	0f 90       	pop	r0
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	0f 90       	pop	r0
    2126:	1f 90       	pop	r1
    2128:	18 95       	reti

0000212a <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	00 d0       	rcall	.+0      	; 0x2130 <Timer1_init+0x6>
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A);							// not PWM mode
    2138:	ef e4       	ldi	r30, 0x4F	; 79
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	88 e0       	ldi	r24, 0x08	; 8
    213e:	80 83       	st	Z, r24
	TCCR1B |= (Config_Ptr->prescaler<<CS10) | (Config_Ptr->mode<<WGM12);
    2140:	ae e4       	ldi	r26, 0x4E	; 78
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	ee e4       	ldi	r30, 0x4E	; 78
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	28 2f       	mov	r18, r24
    214c:	e9 81       	ldd	r30, Y+1	; 0x01
    214e:	fa 81       	ldd	r31, Y+2	; 0x02
    2150:	84 81       	ldd	r24, Z+4	; 0x04
    2152:	38 2f       	mov	r19, r24
    2154:	e9 81       	ldd	r30, Y+1	; 0x01
    2156:	fa 81       	ldd	r31, Y+2	; 0x02
    2158:	85 81       	ldd	r24, Z+5	; 0x05
    215a:	88 2f       	mov	r24, r24
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	83 2b       	or	r24, r19
    216c:	82 2b       	or	r24, r18
    216e:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;										// start point = 0
    2170:	ac e4       	ldi	r26, 0x4C	; 76
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e9 81       	ldd	r30, Y+1	; 0x01
    2176:	fa 81       	ldd	r31, Y+2	; 0x02
    2178:	80 81       	ld	r24, Z
    217a:	91 81       	ldd	r25, Z+1	; 0x01
    217c:	11 96       	adiw	r26, 0x01	; 1
    217e:	9c 93       	st	X, r25
    2180:	8e 93       	st	-X, r24
	if(Config_Ptr->mode==1)
    2182:	e9 81       	ldd	r30, Y+1	; 0x01
    2184:	fa 81       	ldd	r31, Y+2	; 0x02
    2186:	85 81       	ldd	r24, Z+5	; 0x05
    2188:	81 30       	cpi	r24, 0x01	; 1
    218a:	51 f4       	brne	.+20     	; 0x21a0 <Timer1_init+0x76>
	{
		OCR1A = Config_Ptr->compare_value;									// catch point
    218c:	ea e4       	ldi	r30, 0x4A	; 74
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	a9 81       	ldd	r26, Y+1	; 0x01
    2192:	ba 81       	ldd	r27, Y+2	; 0x02
    2194:	12 96       	adiw	r26, 0x02	; 2
    2196:	8d 91       	ld	r24, X+
    2198:	9c 91       	ld	r25, X
    219a:	13 97       	sbiw	r26, 0x03	; 3
    219c:	91 83       	std	Z+1, r25	; 0x01
    219e:	80 83       	st	Z, r24
	}
	TIMSK |= (1<<OCIE1A);							// enable interrupt
    21a0:	a9 e5       	ldi	r26, 0x59	; 89
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e9 e5       	ldi	r30, 0x59	; 89
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	80 61       	ori	r24, 0x10	; 16
    21ac:	8c 93       	st	X, r24
}
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <Timer1_deInit>:

void Timer1_deInit(void)
{
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(0x07);
    21c0:	ae e4       	ldi	r26, 0x4E	; 78
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	ee e4       	ldi	r30, 0x4E	; 78
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	88 7f       	andi	r24, 0xF8	; 248
    21cc:	8c 93       	st	X, r24
}
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	00 d0       	rcall	.+0      	; 0x21da <Timer1_setCallBack+0x6>
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	9a 83       	std	Y+2, r25	; 0x02
    21e0:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	90 93 76 01 	sts	0x0176, r25
    21ea:	80 93 75 01 	sts	0x0175, r24
}
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	08 95       	ret

000021f8 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <TWI_init+0x6>
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	9a 83       	std	Y+2, r25	; 0x02
    2204:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    2206:	e0 e2       	ldi	r30, 0x20	; 32
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	80 83       	st	Z, r24
	TWSR = Config_Ptr->bit_rate;
    220e:	a1 e2       	ldi	r26, 0x21	; 33
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e9 81       	ldd	r30, Y+1	; 0x01
    2214:	fa 81       	ldd	r31, Y+2	; 0x02
    2216:	81 81       	ldd	r24, Z+1	; 0x01
    2218:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    221a:	a2 e2       	ldi	r26, 0x22	; 34
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e9 81       	ldd	r30, Y+1	; 0x01
    2220:	fa 81       	ldd	r31, Y+2	; 0x02
    2222:	80 81       	ld	r24, Z
    2224:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2226:	e6 e5       	ldi	r30, 0x56	; 86
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	84 e0       	ldi	r24, 0x04	; 4
    222c:	80 83       	st	Z, r24
}
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <TWI_start>:

void TWI_start(void)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2240:	e6 e5       	ldi	r30, 0x56	; 86
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	84 ea       	ldi	r24, 0xA4	; 164
    2246:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2248:	e6 e5       	ldi	r30, 0x56	; 86
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	88 23       	and	r24, r24
    2250:	dc f7       	brge	.-10     	; 0x2248 <TWI_start+0x10>
}
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <TWI_stop>:

void TWI_stop(void)
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2260:	e6 e5       	ldi	r30, 0x56	; 86
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	84 e9       	ldi	r24, 0x94	; 148
    2266:	80 83       	st	Z, r24
}
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	0f 92       	push	r0
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    227a:	e3 e2       	ldi	r30, 0x23	; 35
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2282:	e6 e5       	ldi	r30, 0x56	; 86
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	84 e8       	ldi	r24, 0x84	; 132
    2288:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    228a:	e6 e5       	ldi	r30, 0x56	; 86
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	88 23       	and	r24, r24
    2292:	dc f7       	brge	.-10     	; 0x228a <TWI_writeByte+0x1c>
}
    2294:	0f 90       	pop	r0
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    22a4:	e6 e5       	ldi	r30, 0x56	; 86
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	84 ec       	ldi	r24, 0xC4	; 196
    22aa:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22ac:	e6 e5       	ldi	r30, 0x56	; 86
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	88 23       	and	r24, r24
    22b4:	dc f7       	brge	.-10     	; 0x22ac <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    22b6:	e3 e2       	ldi	r30, 0x23	; 35
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
}
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    22ca:	e6 e5       	ldi	r30, 0x56	; 86
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	84 e8       	ldi	r24, 0x84	; 132
    22d0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22d2:	e6 e5       	ldi	r30, 0x56	; 86
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	88 23       	and	r24, r24
    22da:	dc f7       	brge	.-10     	; 0x22d2 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    22dc:	e3 e2       	ldi	r30, 0x23	; 35
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
}
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	0f 92       	push	r0
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    22f2:	e1 e2       	ldi	r30, 0x21	; 33
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	88 7f       	andi	r24, 0xF8	; 248
    22fa:	89 83       	std	Y+1, r24	; 0x01
    return status;
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    22fe:	0f 90       	pop	r0
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	00 d0       	rcall	.+0      	; 0x230c <UART_init+0x6>
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2314:	eb e2       	ldi	r30, 0x2B	; 43
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    231c:	ea e2       	ldi	r30, 0x2A	; 42
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	88 e1       	ldi	r24, 0x18	; 24
    2322:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr->bit_data<<UCSZ0) | (Config_Ptr->stop_bit<<USBS) | (Config_Ptr->parity<<UPM0);
    2324:	a0 e4       	ldi	r26, 0x40	; 64
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e9 81       	ldd	r30, Y+1	; 0x01
    232a:	fa 81       	ldd	r31, Y+2	; 0x02
    232c:	80 81       	ld	r24, Z
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	28 2f       	mov	r18, r24
    2338:	20 68       	ori	r18, 0x80	; 128
    233a:	e9 81       	ldd	r30, Y+1	; 0x01
    233c:	fa 81       	ldd	r31, Y+2	; 0x02
    233e:	82 81       	ldd	r24, Z+2	; 0x02
    2340:	88 2f       	mov	r24, r24
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	88 0f       	add	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	88 0f       	add	r24, r24
    234a:	99 1f       	adc	r25, r25
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	28 2b       	or	r18, r24
    2352:	e9 81       	ldd	r30, Y+1	; 0x01
    2354:	fa 81       	ldd	r31, Y+2	; 0x02
    2356:	81 81       	ldd	r24, Z+1	; 0x01
    2358:	88 2f       	mov	r24, r24
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	82 95       	swap	r24
    235e:	92 95       	swap	r25
    2360:	90 7f       	andi	r25, 0xF0	; 240
    2362:	98 27       	eor	r25, r24
    2364:	80 7f       	andi	r24, 0xF0	; 240
    2366:	98 27       	eor	r25, r24
    2368:	82 2b       	or	r24, r18
    236a:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (Config_Ptr->baud_rate)>>8;
    236c:	a0 e4       	ldi	r26, 0x40	; 64
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e9 81       	ldd	r30, Y+1	; 0x01
    2372:	fa 81       	ldd	r31, Y+2	; 0x02
    2374:	83 81       	ldd	r24, Z+3	; 0x03
    2376:	94 81       	ldd	r25, Z+4	; 0x04
    2378:	89 2f       	mov	r24, r25
    237a:	99 27       	eor	r25, r25
    237c:	8c 93       	st	X, r24
	UBRRL = Config_Ptr->baud_rate;
    237e:	a9 e2       	ldi	r26, 0x29	; 41
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e9 81       	ldd	r30, Y+1	; 0x01
    2384:	fa 81       	ldd	r31, Y+2	; 0x02
    2386:	83 81       	ldd	r24, Z+3	; 0x03
    2388:	94 81       	ldd	r25, Z+4	; 0x04
    238a:	8c 93       	st	X, r24
}
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	0f 92       	push	r0
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    23a2:	eb e2       	ldi	r30, 0x2B	; 43
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	88 2f       	mov	r24, r24
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	80 72       	andi	r24, 0x20	; 32
    23ae:	90 70       	andi	r25, 0x00	; 0
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	b9 f3       	breq	.-18     	; 0x23a2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    23b4:	ec e2       	ldi	r30, 0x2C	; 44
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    23cc:	eb e2       	ldi	r30, 0x2B	; 43
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	88 23       	and	r24, r24
    23d4:	dc f7       	brge	.-10     	; 0x23cc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    23d6:	ec e2       	ldi	r30, 0x2C	; 44
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
}
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <UART_sendString+0x6>
    23e8:	0f 92       	push	r0
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	9b 83       	std	Y+3, r25	; 0x03
    23f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23f2:	19 82       	std	Y+1, r1	; 0x01
    23f4:	0e c0       	rjmp	.+28     	; 0x2412 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2400:	fc 01       	movw	r30, r24
    2402:	e2 0f       	add	r30, r18
    2404:	f3 1f       	adc	r31, r19
    2406:	80 81       	ld	r24, Z
    2408:	0e 94 cb 11 	call	0x2396	; 0x2396 <UART_sendByte>
		i++;
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	8f 5f       	subi	r24, 0xFF	; 255
    2410:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	28 2f       	mov	r18, r24
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	9b 81       	ldd	r25, Y+3	; 0x03
    241c:	fc 01       	movw	r30, r24
    241e:	e2 0f       	add	r30, r18
    2420:	f3 1f       	adc	r31, r19
    2422:	80 81       	ld	r24, Z
    2424:	88 23       	and	r24, r24
    2426:	39 f7       	brne	.-50     	; 0x23f6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	cf 91       	pop	r28
    2430:	df 91       	pop	r29
    2432:	08 95       	ret

00002434 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2434:	0f 93       	push	r16
    2436:	1f 93       	push	r17
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	00 d0       	rcall	.+0      	; 0x243e <UART_receiveString+0xa>
    243e:	0f 92       	push	r0
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	9b 83       	std	Y+3, r25	; 0x03
    2446:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2448:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	9b 81       	ldd	r25, Y+3	; 0x03
    2454:	8c 01       	movw	r16, r24
    2456:	02 0f       	add	r16, r18
    2458:	13 1f       	adc	r17, r19
    245a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
    245e:	f8 01       	movw	r30, r16
    2460:	80 83       	st	Z, r24
    2462:	0f c0       	rjmp	.+30     	; 0x2482 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	8f 5f       	subi	r24, 0xFF	; 255
    2468:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	9b 81       	ldd	r25, Y+3	; 0x03
    2474:	8c 01       	movw	r16, r24
    2476:	02 0f       	add	r16, r18
    2478:	13 1f       	adc	r17, r19
    247a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <UART_recieveByte>
    247e:	f8 01       	movw	r30, r16
    2480:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	9b 81       	ldd	r25, Y+3	; 0x03
    248c:	fc 01       	movw	r30, r24
    248e:	e2 0f       	add	r30, r18
    2490:	f3 1f       	adc	r31, r19
    2492:	80 81       	ld	r24, Z
    2494:	83 32       	cpi	r24, 0x23	; 35
    2496:	31 f7       	brne	.-52     	; 0x2464 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	28 2f       	mov	r18, r24
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	9b 81       	ldd	r25, Y+3	; 0x03
    24a2:	fc 01       	movw	r30, r24
    24a4:	e2 0f       	add	r30, r18
    24a6:	f3 1f       	adc	r31, r19
    24a8:	10 82       	st	Z, r1
}
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	08 95       	ret

000024ba <__prologue_saves__>:
    24ba:	2f 92       	push	r2
    24bc:	3f 92       	push	r3
    24be:	4f 92       	push	r4
    24c0:	5f 92       	push	r5
    24c2:	6f 92       	push	r6
    24c4:	7f 92       	push	r7
    24c6:	8f 92       	push	r8
    24c8:	9f 92       	push	r9
    24ca:	af 92       	push	r10
    24cc:	bf 92       	push	r11
    24ce:	cf 92       	push	r12
    24d0:	df 92       	push	r13
    24d2:	ef 92       	push	r14
    24d4:	ff 92       	push	r15
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	ca 1b       	sub	r28, r26
    24e4:	db 0b       	sbc	r29, r27
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	09 94       	ijmp

000024f2 <__epilogue_restores__>:
    24f2:	2a 88       	ldd	r2, Y+18	; 0x12
    24f4:	39 88       	ldd	r3, Y+17	; 0x11
    24f6:	48 88       	ldd	r4, Y+16	; 0x10
    24f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    24fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    24fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    24fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2500:	9b 84       	ldd	r9, Y+11	; 0x0b
    2502:	aa 84       	ldd	r10, Y+10	; 0x0a
    2504:	b9 84       	ldd	r11, Y+9	; 0x09
    2506:	c8 84       	ldd	r12, Y+8	; 0x08
    2508:	df 80       	ldd	r13, Y+7	; 0x07
    250a:	ee 80       	ldd	r14, Y+6	; 0x06
    250c:	fd 80       	ldd	r15, Y+5	; 0x05
    250e:	0c 81       	ldd	r16, Y+4	; 0x04
    2510:	1b 81       	ldd	r17, Y+3	; 0x03
    2512:	aa 81       	ldd	r26, Y+2	; 0x02
    2514:	b9 81       	ldd	r27, Y+1	; 0x01
    2516:	ce 0f       	add	r28, r30
    2518:	d1 1d       	adc	r29, r1
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
    2524:	ed 01       	movw	r28, r26
    2526:	08 95       	ret

00002528 <_exit>:
    2528:	f8 94       	cli

0000252a <__stop_program>:
    252a:	ff cf       	rjmp	.-2      	; 0x252a <__stop_program>
