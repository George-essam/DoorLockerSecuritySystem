
final_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002db2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00002db2  00002e46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000e0  008000e0  00002ec6  2**0
                  ALLOC
  3 .stab         00002acc  00000000  00000000  00002ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001143  00000000  00000000  00005994  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000089d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000098bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a668  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aa55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b223  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3e       	cpi	r26, 0xE6	; 230
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 93 06 	call	0xd26	; 0xd26 <main>
      8a:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ec       	ldi	r26, 0xCD	; 205
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ec       	ldi	r24, 0xCD	; 205
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer_Callback>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void Timer_Callback(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	gtick++;
     b4e:	80 91 e0 00 	lds	r24, 0x00E0
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 e0 00 	sts	0x00E0, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <ECU_init>:


void ECU_init(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	65 97       	sbiw	r28, 0x15	; 21
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
     b72:	af e5       	ldi	r26, 0x5F	; 95
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ef e5       	ldi	r30, 0x5F	; 95
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	80 68       	ori	r24, 0x80	; 128
     b7e:	8c 93       	st	X, r24
	UART_ConfigType Config_UART = {Eight_bitdata,Disabled,one_stopbit,BR_9600};
     b80:	ce 01       	movw	r24, r28
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	9d 87       	std	Y+13, r25	; 0x0d
     b86:	8c 87       	std	Y+12, r24	; 0x0c
     b88:	eb ed       	ldi	r30, 0xDB	; 219
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	ff 87       	std	Y+15, r31	; 0x0f
     b8e:	ee 87       	std	Y+14, r30	; 0x0e
     b90:	f5 e0       	ldi	r31, 0x05	; 5
     b92:	f8 8b       	std	Y+16, r31	; 0x10
     b94:	ee 85       	ldd	r30, Y+14	; 0x0e
     b96:	ff 85       	ldd	r31, Y+15	; 0x0f
     b98:	00 80       	ld	r0, Z
     b9a:	8e 85       	ldd	r24, Y+14	; 0x0e
     b9c:	9f 85       	ldd	r25, Y+15	; 0x0f
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	9f 87       	std	Y+15, r25	; 0x0f
     ba2:	8e 87       	std	Y+14, r24	; 0x0e
     ba4:	ec 85       	ldd	r30, Y+12	; 0x0c
     ba6:	fd 85       	ldd	r31, Y+13	; 0x0d
     ba8:	00 82       	st	Z, r0
     baa:	8c 85       	ldd	r24, Y+12	; 0x0c
     bac:	9d 85       	ldd	r25, Y+13	; 0x0d
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	9d 87       	std	Y+13, r25	; 0x0d
     bb2:	8c 87       	std	Y+12, r24	; 0x0c
     bb4:	98 89       	ldd	r25, Y+16	; 0x10
     bb6:	91 50       	subi	r25, 0x01	; 1
     bb8:	98 8b       	std	Y+16, r25	; 0x10
     bba:	e8 89       	ldd	r30, Y+16	; 0x10
     bbc:	ee 23       	and	r30, r30
     bbe:	51 f7       	brne	.-44     	; 0xb94 <ECU_init+0x36>
	/*config of UART as eight bit frame , no parity, one stop bit and 9600 baudrate*/
	Timer1_ConfigType Config_Timer1 = {0,8000,Pre_1024,CTC};
     bc0:	ce 01       	movw	r24, r28
     bc2:	06 96       	adiw	r24, 0x06	; 6
     bc4:	9a 8b       	std	Y+18, r25	; 0x12
     bc6:	89 8b       	std	Y+17, r24	; 0x11
     bc8:	e5 ed       	ldi	r30, 0xD5	; 213
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	fc 8b       	std	Y+20, r31	; 0x14
     bce:	eb 8b       	std	Y+19, r30	; 0x13
     bd0:	f6 e0       	ldi	r31, 0x06	; 6
     bd2:	fd 8b       	std	Y+21, r31	; 0x15
     bd4:	eb 89       	ldd	r30, Y+19	; 0x13
     bd6:	fc 89       	ldd	r31, Y+20	; 0x14
     bd8:	00 80       	ld	r0, Z
     bda:	8b 89       	ldd	r24, Y+19	; 0x13
     bdc:	9c 89       	ldd	r25, Y+20	; 0x14
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	9c 8b       	std	Y+20, r25	; 0x14
     be2:	8b 8b       	std	Y+19, r24	; 0x13
     be4:	e9 89       	ldd	r30, Y+17	; 0x11
     be6:	fa 89       	ldd	r31, Y+18	; 0x12
     be8:	00 82       	st	Z, r0
     bea:	89 89       	ldd	r24, Y+17	; 0x11
     bec:	9a 89       	ldd	r25, Y+18	; 0x12
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	9a 8b       	std	Y+18, r25	; 0x12
     bf2:	89 8b       	std	Y+17, r24	; 0x11
     bf4:	9d 89       	ldd	r25, Y+21	; 0x15
     bf6:	91 50       	subi	r25, 0x01	; 1
     bf8:	9d 8b       	std	Y+21, r25	; 0x15
     bfa:	ed 89       	ldd	r30, Y+21	; 0x15
     bfc:	ee 23       	and	r30, r30
     bfe:	51 f7       	brne	.-44     	; 0xbd4 <ECU_init+0x76>
	UART_init(&Config_UART);
     c00:	ce 01       	movw	r24, r28
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	0e 94 81 15 	call	0x2b02	; 0x2b02 <UART_init>
	LCD_init();
     c08:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <LCD_init>
	Timer1_init(&Config_Timer1);
     c0c:	ce 01       	movw	r24, r28
     c0e:	06 96       	adiw	r24, 0x06	; 6
     c10:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <Timer1_init>
	Timer1_setCallBack(Timer_Callback);
     c14:	83 ea       	ldi	r24, 0xA3	; 163
     c16:	95 e0       	ldi	r25, 0x05	; 5
     c18:	0e 94 6f 15 	call	0x2ade	; 0x2ade <Timer1_setCallBack>
}
     c1c:	65 96       	adiw	r28, 0x15	; 21
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <Get_Send_Pass>:


void Get_Send_Pass(void)
{
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
	key = KEYPAD_getPressedKey();			/*get number from the keypad*/
     c36:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <KEYPAD_getPressedKey>
     c3a:	80 93 e5 00 	sts	0x00E5, r24
	if((key <= 9) && (key >= 0) && i<5)		/*get only 5 numbers as password*/
     c3e:	80 91 e5 00 	lds	r24, 0x00E5
     c42:	8a 30       	cpi	r24, 0x0A	; 10
     c44:	98 f4       	brcc	.+38     	; 0xc6c <Get_Send_Pass+0x3e>
     c46:	80 91 e4 00 	lds	r24, 0x00E4
     c4a:	85 30       	cpi	r24, 0x05	; 5
     c4c:	78 f4       	brcc	.+30     	; 0xc6c <Get_Send_Pass+0x3e>
	{
		LCD_displayCharacter('*');			/*display '*' as number*/
     c4e:	8a e2       	ldi	r24, 0x2A	; 42
     c50:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_displayCharacter>
		UART_sendByte(READY);				/*send ready bit to controller*/
     c54:	88 e2       	ldi	r24, 0x28	; 40
     c56:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <UART_sendByte>
		UART_sendByte(key);					/*send number to be saved or compared*/
     c5a:	80 91 e5 00 	lds	r24, 0x00E5
     c5e:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <UART_sendByte>
		i++;
     c62:	80 91 e4 00 	lds	r24, 0x00E4
     c66:	8f 5f       	subi	r24, 0xFF	; 255
     c68:	80 93 e4 00 	sts	0x00E4, r24
	}
}
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <Buzz>:


void Buzz(void)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(READY);						/*send ready bit to controller*/
     c7a:	88 e2       	ldi	r24, 0x28	; 40
     c7c:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <UART_sendByte>
	UART_sendByte(Buzzer_ON);					/*activate buzzer alert in controller*/
     c80:	86 e1       	ldi	r24, 0x16	; 22
     c82:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <UART_sendByte>
	LCD_displayStringRowColumn(0,0,"ERROR");
     c86:	20 e6       	ldi	r18, 0x60	; 96
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	a9 01       	movw	r20, r18
     c90:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_displayStringRowColumn>
	gtick=0;
     c94:	10 92 e0 00 	sts	0x00E0, r1
	while(gtick<60);
     c98:	80 91 e0 00 	lds	r24, 0x00E0
     c9c:	8c 33       	cpi	r24, 0x3C	; 60
     c9e:	e0 f3       	brcs	.-8      	; 0xc98 <Buzz+0x26>
	step=2;
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	80 93 e1 00 	sts	0x00E1, r24
	LCD_clearScreen();
     ca6:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
}
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <Door>:


void Door(void)
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(READY);							/*send ready bit to controller*/
     cb8:	88 e2       	ldi	r24, 0x28	; 40
     cba:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <UART_sendByte>
	UART_sendByte(Door_Open);						/*open and close the door in controller*/
     cbe:	8a e0       	ldi	r24, 0x0A	; 10
     cc0:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <UART_sendByte>
	LCD_displayStringRowColumn(0,0,"Door is ");
     cc4:	26 e6       	ldi	r18, 0x66	; 102
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	a9 01       	movw	r20, r18
     cce:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"unlocking");
     cd2:	2f e6       	ldi	r18, 0x6F	; 111
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	a9 01       	movw	r20, r18
     cdc:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_displayStringRowColumn>
	gtick=0;
     ce0:	10 92 e0 00 	sts	0x00E0, r1
	while(gtick<18);								/*delay for 15 sec and stop for 3 sec*/
     ce4:	80 91 e0 00 	lds	r24, 0x00E0
     ce8:	82 31       	cpi	r24, 0x12	; 18
     cea:	e0 f3       	brcs	.-8      	; 0xce4 <Door+0x34>
	LCD_clearScreen();
     cec:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Door is ");
     cf0:	26 e6       	ldi	r18, 0x66	; 102
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	a9 01       	movw	r20, r18
     cfa:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"locking");
     cfe:	29 e7       	ldi	r18, 0x79	; 121
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	a9 01       	movw	r20, r18
     d08:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_displayStringRowColumn>
	gtick=0;
     d0c:	10 92 e0 00 	sts	0x00E0, r1
	while(gtick<15);								/*delay for 15 sec*/
     d10:	80 91 e0 00 	lds	r24, 0x00E0
     d14:	8f 30       	cpi	r24, 0x0F	; 15
     d16:	e0 f3       	brcs	.-8      	; 0xd10 <Door+0x60>
	LCD_clearScreen();
     d18:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
	Timer1_deInit();								/*deactivate timer*/
     d1c:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <Timer1_deInit>
}
     d20:	cf 91       	pop	r28
     d22:	df 91       	pop	r29
     d24:	08 95       	ret

00000d26 <main>:




int main(void)
{
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	c9 54       	subi	r28, 0x49	; 73
     d34:	d0 40       	sbci	r29, 0x00	; 0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
	unsigned char j=0,check,val;
     d40:	fe 01       	movw	r30, r28
     d42:	e7 5b       	subi	r30, 0xB7	; 183
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	10 82       	st	Z, r1
	ECU_init();														/*initialize all driver and configurations*/
     d48:	0e 94 af 05 	call	0xb5e	; 0xb5e <ECU_init>
	while(1)
	{
		i=0;
     d4c:	10 92 e4 00 	sts	0x00E4, r1
     d50:	a3 c0       	rjmp	.+326    	; 0xe98 <main+0x172>
		while(step==0)
			/*step 0   (enter the first pass and send it to the controller) */
		{
			LCD_displayStringRowColumn(0,0,"plz enter pass:");
     d52:	21 e8       	ldi	r18, 0x81	; 129
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	a9 01       	movw	r20, r18
     d5c:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_displayStringRowColumn>
			LCD_moveCursor(1,i);
     d60:	90 91 e4 00 	lds	r25, 0x00E4
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	69 2f       	mov	r22, r25
     d68:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_moveCursor>
			Get_Send_Pass();
     d6c:	0e 94 17 06 	call	0xc2e	; 0xc2e <Get_Send_Pass>
			if(key == '=' && i == 5)		/*make '=' as enter*/
     d70:	80 91 e5 00 	lds	r24, 0x00E5
     d74:	8d 33       	cpi	r24, 0x3D	; 61
     d76:	59 f4       	brne	.+22     	; 0xd8e <main+0x68>
     d78:	80 91 e4 00 	lds	r24, 0x00E4
     d7c:	85 30       	cpi	r24, 0x05	; 5
     d7e:	39 f4       	brne	.+14     	; 0xd8e <main+0x68>
			{
				LCD_clearScreen();
     d80:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
				i=0;
     d84:	10 92 e4 00 	sts	0x00E4, r1
				step = 1;					/*go to the second step*/
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	80 93 e1 00 	sts	0x00E1, r24
     d8e:	fe 01       	movw	r30, r28
     d90:	ed 5b       	subi	r30, 0xBD	; 189
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	aa ef       	ldi	r26, 0xFA	; 250
     d9a:	b3 e4       	ldi	r27, 0x43	; 67
     d9c:	80 83       	st	Z, r24
     d9e:	91 83       	std	Z+1, r25	; 0x01
     da0:	a2 83       	std	Z+2, r26	; 0x02
     da2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da4:	8e 01       	movw	r16, r28
     da6:	01 5c       	subi	r16, 0xC1	; 193
     da8:	1f 4f       	sbci	r17, 0xFF	; 255
     daa:	fe 01       	movw	r30, r28
     dac:	ed 5b       	subi	r30, 0xBD	; 189
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	60 81       	ld	r22, Z
     db2:	71 81       	ldd	r23, Z+1	; 0x01
     db4:	82 81       	ldd	r24, Z+2	; 0x02
     db6:	93 81       	ldd	r25, Z+3	; 0x03
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	4a ef       	ldi	r20, 0xFA	; 250
     dbe:	54 e4       	ldi	r21, 0x44	; 68
     dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	f8 01       	movw	r30, r16
     dca:	80 83       	st	Z, r24
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	a2 83       	std	Z+2, r26	; 0x02
     dd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dd2:	fe 01       	movw	r30, r28
     dd4:	ff 96       	adiw	r30, 0x3f	; 63
     dd6:	60 81       	ld	r22, Z
     dd8:	71 81       	ldd	r23, Z+1	; 0x01
     dda:	82 81       	ldd	r24, Z+2	; 0x02
     ddc:	93 81       	ldd	r25, Z+3	; 0x03
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e8       	ldi	r20, 0x80	; 128
     de4:	5f e3       	ldi	r21, 0x3F	; 63
     de6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dea:	88 23       	and	r24, r24
     dec:	2c f4       	brge	.+10     	; 0xdf8 <main+0xd2>
		__ticks = 1;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9e af       	std	Y+62, r25	; 0x3e
     df4:	8d af       	std	Y+61, r24	; 0x3d
     df6:	46 c0       	rjmp	.+140    	; 0xe84 <main+0x15e>
	else if (__tmp > 65535)
     df8:	fe 01       	movw	r30, r28
     dfa:	ff 96       	adiw	r30, 0x3f	; 63
     dfc:	60 81       	ld	r22, Z
     dfe:	71 81       	ldd	r23, Z+1	; 0x01
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	3f ef       	ldi	r19, 0xFF	; 255
     e08:	4f e7       	ldi	r20, 0x7F	; 127
     e0a:	57 e4       	ldi	r21, 0x47	; 71
     e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e10:	18 16       	cp	r1, r24
     e12:	64 f5       	brge	.+88     	; 0xe6c <main+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e14:	fe 01       	movw	r30, r28
     e16:	ed 5b       	subi	r30, 0xBD	; 189
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	60 81       	ld	r22, Z
     e1c:	71 81       	ldd	r23, Z+1	; 0x01
     e1e:	82 81       	ldd	r24, Z+2	; 0x02
     e20:	93 81       	ldd	r25, Z+3	; 0x03
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e2       	ldi	r20, 0x20	; 32
     e28:	51 e4       	ldi	r21, 0x41	; 65
     e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	bc 01       	movw	r22, r24
     e34:	cd 01       	movw	r24, r26
     e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	9e af       	std	Y+62, r25	; 0x3e
     e40:	8d af       	std	Y+61, r24	; 0x3d
     e42:	0f c0       	rjmp	.+30     	; 0xe62 <main+0x13c>
     e44:	88 ec       	ldi	r24, 0xC8	; 200
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	9c af       	std	Y+60, r25	; 0x3c
     e4a:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e4c:	8b ad       	ldd	r24, Y+59	; 0x3b
     e4e:	9c ad       	ldd	r25, Y+60	; 0x3c
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <main+0x12a>
     e54:	9c af       	std	Y+60, r25	; 0x3c
     e56:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e58:	8d ad       	ldd	r24, Y+61	; 0x3d
     e5a:	9e ad       	ldd	r25, Y+62	; 0x3e
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	9e af       	std	Y+62, r25	; 0x3e
     e60:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e62:	8d ad       	ldd	r24, Y+61	; 0x3d
     e64:	9e ad       	ldd	r25, Y+62	; 0x3e
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	69 f7       	brne	.-38     	; 0xe44 <main+0x11e>
     e6a:	16 c0       	rjmp	.+44     	; 0xe98 <main+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6c:	fe 01       	movw	r30, r28
     e6e:	ff 96       	adiw	r30, 0x3f	; 63
     e70:	60 81       	ld	r22, Z
     e72:	71 81       	ldd	r23, Z+1	; 0x01
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	93 81       	ldd	r25, Z+3	; 0x03
     e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	9e af       	std	Y+62, r25	; 0x3e
     e82:	8d af       	std	Y+61, r24	; 0x3d
     e84:	8d ad       	ldd	r24, Y+61	; 0x3d
     e86:	9e ad       	ldd	r25, Y+62	; 0x3e
     e88:	9a af       	std	Y+58, r25	; 0x3a
     e8a:	89 af       	std	Y+57, r24	; 0x39
     e8c:	89 ad       	ldd	r24, Y+57	; 0x39
     e8e:	9a ad       	ldd	r25, Y+58	; 0x3a
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <main+0x16a>
     e94:	9a af       	std	Y+58, r25	; 0x3a
     e96:	89 af       	std	Y+57, r24	; 0x39
	unsigned char j=0,check,val;
	ECU_init();														/*initialize all driver and configurations*/
	while(1)
	{
		i=0;
		while(step==0)
     e98:	80 91 e1 00 	lds	r24, 0x00E1
     e9c:	88 23       	and	r24, r24
     e9e:	09 f4       	brne	.+2      	; 0xea2 <main+0x17c>
     ea0:	58 cf       	rjmp	.-336    	; 0xd52 <main+0x2c>
     ea2:	b4 c0       	rjmp	.+360    	; 0x100c <main+0x2e6>

		while(step == 1)
			/*second step	enter the second pass and send it to the controller
					to be compared*/
		{
			LCD_displayStringRowColumn(0,0,"plz re-enter the");
     ea4:	21 e9       	ldi	r18, 0x91	; 145
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	a9 01       	movw	r20, r18
     eae:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"same pass:");
     eb2:	22 ea       	ldi	r18, 0xA2	; 162
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	a9 01       	movw	r20, r18
     ebc:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_displayStringRowColumn>
			LCD_moveCursor(2,i);
     ec0:	90 91 e4 00 	lds	r25, 0x00E4
     ec4:	82 e0       	ldi	r24, 0x02	; 2
     ec6:	69 2f       	mov	r22, r25
     ec8:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_moveCursor>
			Get_Send_Pass();
     ecc:	0e 94 17 06 	call	0xc2e	; 0xc2e <Get_Send_Pass>
			if(key == '=' && i == 5)
     ed0:	80 91 e5 00 	lds	r24, 0x00E5
     ed4:	8d 33       	cpi	r24, 0x3D	; 61
     ed6:	41 f5       	brne	.+80     	; 0xf28 <main+0x202>
     ed8:	80 91 e4 00 	lds	r24, 0x00E4
     edc:	85 30       	cpi	r24, 0x05	; 5
     ede:	21 f5       	brne	.+72     	; 0xf28 <main+0x202>
			{
				while(!UART_recieveByte());
     ee0:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <UART_recieveByte>
     ee4:	88 23       	and	r24, r24
     ee6:	e1 f3       	breq	.-8      	; 0xee0 <main+0x1ba>
				check = UART_recieveByte();		/*check either the pass is correct or wrong*/
     ee8:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <UART_recieveByte>
     eec:	fe 01       	movw	r30, r28
     eee:	e8 5b       	subi	r30, 0xB8	; 184
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	80 83       	st	Z, r24
				if(check == Correct_Pass)		/*pass is correct so go to the third step*/
     ef4:	fe 01       	movw	r30, r28
     ef6:	e8 5b       	subi	r30, 0xB8	; 184
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	80 81       	ld	r24, Z
     efc:	82 32       	cpi	r24, 0x22	; 34
     efe:	41 f4       	brne	.+16     	; 0xf10 <main+0x1ea>
				{
					LCD_clearScreen();
     f00:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
					step=2;
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	80 93 e1 00 	sts	0x00E1, r24
					i=0;
     f0a:	10 92 e4 00 	sts	0x00E4, r1
     f0e:	0c c0       	rjmp	.+24     	; 0xf28 <main+0x202>
				}
				else if(check == Wrong_Pass)	/*pass is wrong so go to the first step again*/
     f10:	fe 01       	movw	r30, r28
     f12:	e8 5b       	subi	r30, 0xB8	; 184
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	80 81       	ld	r24, Z
     f18:	8c 30       	cpi	r24, 0x0C	; 12
     f1a:	31 f4       	brne	.+12     	; 0xf28 <main+0x202>
				{
					step = 0;
     f1c:	10 92 e1 00 	sts	0x00E1, r1
					i=0;
     f20:	10 92 e4 00 	sts	0x00E4, r1
					LCD_clearScreen();
     f24:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	aa ef       	ldi	r26, 0xFA	; 250
     f2e:	b3 e4       	ldi	r27, 0x43	; 67
     f30:	8d ab       	std	Y+53, r24	; 0x35
     f32:	9e ab       	std	Y+54, r25	; 0x36
     f34:	af ab       	std	Y+55, r26	; 0x37
     f36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f38:	6d a9       	ldd	r22, Y+53	; 0x35
     f3a:	7e a9       	ldd	r23, Y+54	; 0x36
     f3c:	8f a9       	ldd	r24, Y+55	; 0x37
     f3e:	98 ad       	ldd	r25, Y+56	; 0x38
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	4a ef       	ldi	r20, 0xFA	; 250
     f46:	54 e4       	ldi	r21, 0x44	; 68
     f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	89 ab       	std	Y+49, r24	; 0x31
     f52:	9a ab       	std	Y+50, r25	; 0x32
     f54:	ab ab       	std	Y+51, r26	; 0x33
     f56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f58:	69 a9       	ldd	r22, Y+49	; 0x31
     f5a:	7a a9       	ldd	r23, Y+50	; 0x32
     f5c:	8b a9       	ldd	r24, Y+51	; 0x33
     f5e:	9c a9       	ldd	r25, Y+52	; 0x34
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e8       	ldi	r20, 0x80	; 128
     f66:	5f e3       	ldi	r21, 0x3F	; 63
     f68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f6c:	88 23       	and	r24, r24
     f6e:	2c f4       	brge	.+10     	; 0xf7a <main+0x254>
		__ticks = 1;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	98 ab       	std	Y+48, r25	; 0x30
     f76:	8f a7       	std	Y+47, r24	; 0x2f
     f78:	3f c0       	rjmp	.+126    	; 0xff8 <main+0x2d2>
	else if (__tmp > 65535)
     f7a:	69 a9       	ldd	r22, Y+49	; 0x31
     f7c:	7a a9       	ldd	r23, Y+50	; 0x32
     f7e:	8b a9       	ldd	r24, Y+51	; 0x33
     f80:	9c a9       	ldd	r25, Y+52	; 0x34
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	4f e7       	ldi	r20, 0x7F	; 127
     f88:	57 e4       	ldi	r21, 0x47	; 71
     f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f8e:	18 16       	cp	r1, r24
     f90:	4c f5       	brge	.+82     	; 0xfe4 <main+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f92:	6d a9       	ldd	r22, Y+53	; 0x35
     f94:	7e a9       	ldd	r23, Y+54	; 0x36
     f96:	8f a9       	ldd	r24, Y+55	; 0x37
     f98:	98 ad       	ldd	r25, Y+56	; 0x38
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e2       	ldi	r20, 0x20	; 32
     fa0:	51 e4       	ldi	r21, 0x41	; 65
     fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	bc 01       	movw	r22, r24
     fac:	cd 01       	movw	r24, r26
     fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	98 ab       	std	Y+48, r25	; 0x30
     fb8:	8f a7       	std	Y+47, r24	; 0x2f
     fba:	0f c0       	rjmp	.+30     	; 0xfda <main+0x2b4>
     fbc:	88 ec       	ldi	r24, 0xC8	; 200
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	9e a7       	std	Y+46, r25	; 0x2e
     fc2:	8d a7       	std	Y+45, r24	; 0x2d
     fc4:	8d a5       	ldd	r24, Y+45	; 0x2d
     fc6:	9e a5       	ldd	r25, Y+46	; 0x2e
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <main+0x2a2>
     fcc:	9e a7       	std	Y+46, r25	; 0x2e
     fce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd0:	8f a5       	ldd	r24, Y+47	; 0x2f
     fd2:	98 a9       	ldd	r25, Y+48	; 0x30
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	98 ab       	std	Y+48, r25	; 0x30
     fd8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fda:	8f a5       	ldd	r24, Y+47	; 0x2f
     fdc:	98 a9       	ldd	r25, Y+48	; 0x30
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	69 f7       	brne	.-38     	; 0xfbc <main+0x296>
     fe2:	14 c0       	rjmp	.+40     	; 0x100c <main+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe4:	69 a9       	ldd	r22, Y+49	; 0x31
     fe6:	7a a9       	ldd	r23, Y+50	; 0x32
     fe8:	8b a9       	ldd	r24, Y+51	; 0x33
     fea:	9c a9       	ldd	r25, Y+52	; 0x34
     fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	98 ab       	std	Y+48, r25	; 0x30
     ff6:	8f a7       	std	Y+47, r24	; 0x2f
     ff8:	8f a5       	ldd	r24, Y+47	; 0x2f
     ffa:	98 a9       	ldd	r25, Y+48	; 0x30
     ffc:	9c a7       	std	Y+44, r25	; 0x2c
     ffe:	8b a7       	std	Y+43, r24	; 0x2b
    1000:	8b a5       	ldd	r24, Y+43	; 0x2b
    1002:	9c a5       	ldd	r25, Y+44	; 0x2c
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <main+0x2de>
    1008:	9c a7       	std	Y+44, r25	; 0x2c
    100a:	8b a7       	std	Y+43, r24	; 0x2b
			}
			_delay_ms(500);
		}


		while(step == 1)
    100c:	80 91 e1 00 	lds	r24, 0x00E1
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	09 f4       	brne	.+2      	; 0x1016 <main+0x2f0>
    1014:	47 cf       	rjmp	.-370    	; 0xea4 <main+0x17e>
    1016:	a4 c1       	rjmp	.+840    	; 0x1360 <main+0x63a>
		}

		while(step == 2)
		{
			/*fourth step	(choose either to open the door or change the password*/
			LCD_displayStringRowColumn(0,0,"+ :open the door");
    1018:	2d ea       	ldi	r18, 0xAD	; 173
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	a9 01       	movw	r20, r18
    1022:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"- :change pass");
    1026:	2e eb       	ldi	r18, 0xBE	; 190
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	a9 01       	movw	r20, r18
    1030:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_displayStringRowColumn>
			key = KEYPAD_getPressedKey();
    1034:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <KEYPAD_getPressedKey>
    1038:	80 93 e5 00 	sts	0x00E5, r24
			val = key;
    103c:	fe 01       	movw	r30, r28
    103e:	e9 5b       	subi	r30, 0xB9	; 185
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	80 91 e5 00 	lds	r24, 0x00E5
    1046:	80 83       	st	Z, r24
			if(val == '+')
    1048:	fe 01       	movw	r30, r28
    104a:	e9 5b       	subi	r30, 0xB9	; 185
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	80 81       	ld	r24, Z
    1050:	8b 32       	cpi	r24, 0x2B	; 43
    1052:	09 f0       	breq	.+2      	; 0x1056 <main+0x330>
    1054:	bd c0       	rjmp	.+378    	; 0x11d0 <main+0x4aa>
			{
				LCD_clearScreen();
    1056:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
    105a:	b4 c0       	rjmp	.+360    	; 0x11c4 <main+0x49e>
				while(i<6)
				{
					LCD_displayStringRowColumn(0,0,"plz enter pass:");
    105c:	21 e8       	ldi	r18, 0x81	; 129
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	a9 01       	movw	r20, r18
    1066:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_displayStringRowColumn>
					LCD_moveCursor(1,i);
    106a:	90 91 e4 00 	lds	r25, 0x00E4
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	69 2f       	mov	r22, r25
    1072:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_moveCursor>
					Get_Send_Pass();
    1076:	0e 94 17 06 	call	0xc2e	; 0xc2e <Get_Send_Pass>
					if(key == '=' && i == 5)				/*make '=' as enter*/
    107a:	80 91 e5 00 	lds	r24, 0x00E5
    107e:	8d 33       	cpi	r24, 0x3D	; 61
    1080:	79 f5       	brne	.+94     	; 0x10e0 <main+0x3ba>
    1082:	80 91 e4 00 	lds	r24, 0x00E4
    1086:	85 30       	cpi	r24, 0x05	; 5
    1088:	59 f5       	brne	.+86     	; 0x10e0 <main+0x3ba>
					{
						LCD_clearScreen();
    108a:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
						while(!UART_recieveByte());
    108e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <UART_recieveByte>
    1092:	88 23       	and	r24, r24
    1094:	e1 f3       	breq	.-8      	; 0x108e <main+0x368>
						check = UART_recieveByte();
    1096:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <UART_recieveByte>
    109a:	fe 01       	movw	r30, r28
    109c:	e8 5b       	subi	r30, 0xB8	; 184
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	80 83       	st	Z, r24
						if(check == Correct_Pass)			/*if pass is correct open the door*/
    10a2:	fe 01       	movw	r30, r28
    10a4:	e8 5b       	subi	r30, 0xB8	; 184
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	80 81       	ld	r24, Z
    10aa:	82 32       	cpi	r24, 0x22	; 34
    10ac:	59 f4       	brne	.+22     	; 0x10c4 <main+0x39e>
						{
							i++;
    10ae:	80 91 e4 00 	lds	r24, 0x00E4
    10b2:	8f 5f       	subi	r24, 0xFF	; 255
    10b4:	80 93 e4 00 	sts	0x00E4, r24
							LCD_clearScreen();
    10b8:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
							step = 3;
    10bc:	83 e0       	ldi	r24, 0x03	; 3
    10be:	80 93 e1 00 	sts	0x00E1, r24
    10c2:	0e c0       	rjmp	.+28     	; 0x10e0 <main+0x3ba>
						}
						else if(check == Wrong_Pass)		/*if pass is wrong go to step 4*/
    10c4:	fe 01       	movw	r30, r28
    10c6:	e8 5b       	subi	r30, 0xB8	; 184
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	80 81       	ld	r24, Z
    10cc:	8c 30       	cpi	r24, 0x0C	; 12
    10ce:	41 f4       	brne	.+16     	; 0x10e0 <main+0x3ba>
						{
							i++;
    10d0:	80 91 e4 00 	lds	r24, 0x00E4
    10d4:	8f 5f       	subi	r24, 0xFF	; 255
    10d6:	80 93 e4 00 	sts	0x00E4, r24
							step = 4;
    10da:	84 e0       	ldi	r24, 0x04	; 4
    10dc:	80 93 e1 00 	sts	0x00E1, r24
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	aa ef       	ldi	r26, 0xFA	; 250
    10e6:	b3 e4       	ldi	r27, 0x43	; 67
    10e8:	8f a3       	std	Y+39, r24	; 0x27
    10ea:	98 a7       	std	Y+40, r25	; 0x28
    10ec:	a9 a7       	std	Y+41, r26	; 0x29
    10ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f0:	6f a1       	ldd	r22, Y+39	; 0x27
    10f2:	78 a5       	ldd	r23, Y+40	; 0x28
    10f4:	89 a5       	ldd	r24, Y+41	; 0x29
    10f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	4a ef       	ldi	r20, 0xFA	; 250
    10fe:	54 e4       	ldi	r21, 0x44	; 68
    1100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	8b a3       	std	Y+35, r24	; 0x23
    110a:	9c a3       	std	Y+36, r25	; 0x24
    110c:	ad a3       	std	Y+37, r26	; 0x25
    110e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1110:	6b a1       	ldd	r22, Y+35	; 0x23
    1112:	7c a1       	ldd	r23, Y+36	; 0x24
    1114:	8d a1       	ldd	r24, Y+37	; 0x25
    1116:	9e a1       	ldd	r25, Y+38	; 0x26
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e8       	ldi	r20, 0x80	; 128
    111e:	5f e3       	ldi	r21, 0x3F	; 63
    1120:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1124:	88 23       	and	r24, r24
    1126:	2c f4       	brge	.+10     	; 0x1132 <main+0x40c>
		__ticks = 1;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9a a3       	std	Y+34, r25	; 0x22
    112e:	89 a3       	std	Y+33, r24	; 0x21
    1130:	3f c0       	rjmp	.+126    	; 0x11b0 <main+0x48a>
	else if (__tmp > 65535)
    1132:	6b a1       	ldd	r22, Y+35	; 0x23
    1134:	7c a1       	ldd	r23, Y+36	; 0x24
    1136:	8d a1       	ldd	r24, Y+37	; 0x25
    1138:	9e a1       	ldd	r25, Y+38	; 0x26
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	3f ef       	ldi	r19, 0xFF	; 255
    113e:	4f e7       	ldi	r20, 0x7F	; 127
    1140:	57 e4       	ldi	r21, 0x47	; 71
    1142:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1146:	18 16       	cp	r1, r24
    1148:	4c f5       	brge	.+82     	; 0x119c <main+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114a:	6f a1       	ldd	r22, Y+39	; 0x27
    114c:	78 a5       	ldd	r23, Y+40	; 0x28
    114e:	89 a5       	ldd	r24, Y+41	; 0x29
    1150:	9a a5       	ldd	r25, Y+42	; 0x2a
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e2       	ldi	r20, 0x20	; 32
    1158:	51 e4       	ldi	r21, 0x41	; 65
    115a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	9a a3       	std	Y+34, r25	; 0x22
    1170:	89 a3       	std	Y+33, r24	; 0x21
    1172:	0f c0       	rjmp	.+30     	; 0x1192 <main+0x46c>
    1174:	88 ec       	ldi	r24, 0xC8	; 200
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	98 a3       	std	Y+32, r25	; 0x20
    117a:	8f 8f       	std	Y+31, r24	; 0x1f
    117c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    117e:	98 a1       	ldd	r25, Y+32	; 0x20
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	f1 f7       	brne	.-4      	; 0x1180 <main+0x45a>
    1184:	98 a3       	std	Y+32, r25	; 0x20
    1186:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1188:	89 a1       	ldd	r24, Y+33	; 0x21
    118a:	9a a1       	ldd	r25, Y+34	; 0x22
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	9a a3       	std	Y+34, r25	; 0x22
    1190:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1192:	89 a1       	ldd	r24, Y+33	; 0x21
    1194:	9a a1       	ldd	r25, Y+34	; 0x22
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	69 f7       	brne	.-38     	; 0x1174 <main+0x44e>
    119a:	14 c0       	rjmp	.+40     	; 0x11c4 <main+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119c:	6b a1       	ldd	r22, Y+35	; 0x23
    119e:	7c a1       	ldd	r23, Y+36	; 0x24
    11a0:	8d a1       	ldd	r24, Y+37	; 0x25
    11a2:	9e a1       	ldd	r25, Y+38	; 0x26
    11a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	9a a3       	std	Y+34, r25	; 0x22
    11ae:	89 a3       	std	Y+33, r24	; 0x21
    11b0:	89 a1       	ldd	r24, Y+33	; 0x21
    11b2:	9a a1       	ldd	r25, Y+34	; 0x22
    11b4:	9e 8f       	std	Y+30, r25	; 0x1e
    11b6:	8d 8f       	std	Y+29, r24	; 0x1d
    11b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <main+0x496>
    11c0:	9e 8f       	std	Y+30, r25	; 0x1e
    11c2:	8d 8f       	std	Y+29, r24	; 0x1d
			key = KEYPAD_getPressedKey();
			val = key;
			if(val == '+')
			{
				LCD_clearScreen();
				while(i<6)
    11c4:	80 91 e4 00 	lds	r24, 0x00E4
    11c8:	86 30       	cpi	r24, 0x06	; 6
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <main+0x4a8>
    11cc:	47 cf       	rjmp	.-370    	; 0x105c <main+0x336>
    11ce:	c8 c0       	rjmp	.+400    	; 0x1360 <main+0x63a>
						}
					}
					_delay_ms(500);
				}
			}
			else if(val == '-')
    11d0:	fe 01       	movw	r30, r28
    11d2:	e9 5b       	subi	r30, 0xB9	; 185
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 81       	ld	r24, Z
    11d8:	8d 32       	cpi	r24, 0x2D	; 45
    11da:	09 f0       	breq	.+2      	; 0x11de <main+0x4b8>
    11dc:	c1 c0       	rjmp	.+386    	; 0x1360 <main+0x63a>
			{
				LCD_clearScreen();
    11de:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
    11e2:	b9 c0       	rjmp	.+370    	; 0x1356 <main+0x630>
				while(i<6)
				{
					LCD_displayStringRowColumn(0,0,"plz enter pass:");
    11e4:	21 e8       	ldi	r18, 0x81	; 129
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	a9 01       	movw	r20, r18
    11ee:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_displayStringRowColumn>
					LCD_moveCursor(1,i);
    11f2:	90 91 e4 00 	lds	r25, 0x00E4
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	69 2f       	mov	r22, r25
    11fa:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_moveCursor>
					Get_Send_Pass();
    11fe:	0e 94 17 06 	call	0xc2e	; 0xc2e <Get_Send_Pass>
					if(key == '=' && i == 5)
    1202:	80 91 e5 00 	lds	r24, 0x00E5
    1206:	8d 33       	cpi	r24, 0x3D	; 61
    1208:	a1 f5       	brne	.+104    	; 0x1272 <main+0x54c>
    120a:	80 91 e4 00 	lds	r24, 0x00E4
    120e:	85 30       	cpi	r24, 0x05	; 5
    1210:	81 f5       	brne	.+96     	; 0x1272 <main+0x54c>
					{
						LCD_clearScreen();
    1212:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
						while(!UART_recieveByte());
    1216:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <UART_recieveByte>
    121a:	88 23       	and	r24, r24
    121c:	e1 f3       	breq	.-8      	; 0x1216 <main+0x4f0>
						check = UART_recieveByte();
    121e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <UART_recieveByte>
    1222:	fe 01       	movw	r30, r28
    1224:	e8 5b       	subi	r30, 0xB8	; 184
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	80 83       	st	Z, r24
						if(check == Correct_Pass)
    122a:	fe 01       	movw	r30, r28
    122c:	e8 5b       	subi	r30, 0xB8	; 184
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	80 81       	ld	r24, Z
    1232:	82 32       	cpi	r24, 0x22	; 34
    1234:	81 f4       	brne	.+32     	; 0x1256 <main+0x530>
							/*if pass is correct the go to the first step to change the pass*/
						{
							LCD_clearScreen();
    1236:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
							step=0;
    123a:	10 92 e1 00 	sts	0x00E1, r1
							i++;
    123e:	80 91 e4 00 	lds	r24, 0x00E4
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	80 93 e4 00 	sts	0x00E4, r24
							UART_sendByte(READY);			/*send ready bit to controller*/
    1248:	88 e2       	ldi	r24, 0x28	; 40
    124a:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <UART_sendByte>
							UART_sendByte(STEP0);
    124e:	8c e2       	ldi	r24, 0x2C	; 44
    1250:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <UART_sendByte>
    1254:	0e c0       	rjmp	.+28     	; 0x1272 <main+0x54c>
						}
						else if(check == Wrong_Pass)		/*if pass is wrong go to step 4*/
    1256:	fe 01       	movw	r30, r28
    1258:	e8 5b       	subi	r30, 0xB8	; 184
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	80 81       	ld	r24, Z
    125e:	8c 30       	cpi	r24, 0x0C	; 12
    1260:	41 f4       	brne	.+16     	; 0x1272 <main+0x54c>
						{
							step = 4;
    1262:	84 e0       	ldi	r24, 0x04	; 4
    1264:	80 93 e1 00 	sts	0x00E1, r24
							i++;
    1268:	80 91 e4 00 	lds	r24, 0x00E4
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	80 93 e4 00 	sts	0x00E4, r24
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	aa ef       	ldi	r26, 0xFA	; 250
    1278:	b3 e4       	ldi	r27, 0x43	; 67
    127a:	89 8f       	std	Y+25, r24	; 0x19
    127c:	9a 8f       	std	Y+26, r25	; 0x1a
    127e:	ab 8f       	std	Y+27, r26	; 0x1b
    1280:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1282:	69 8d       	ldd	r22, Y+25	; 0x19
    1284:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1286:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1288:	9c 8d       	ldd	r25, Y+28	; 0x1c
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	4a ef       	ldi	r20, 0xFA	; 250
    1290:	54 e4       	ldi	r21, 0x44	; 68
    1292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	8d 8b       	std	Y+21, r24	; 0x15
    129c:	9e 8b       	std	Y+22, r25	; 0x16
    129e:	af 8b       	std	Y+23, r26	; 0x17
    12a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12a2:	6d 89       	ldd	r22, Y+21	; 0x15
    12a4:	7e 89       	ldd	r23, Y+22	; 0x16
    12a6:	8f 89       	ldd	r24, Y+23	; 0x17
    12a8:	98 8d       	ldd	r25, Y+24	; 0x18
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e8       	ldi	r20, 0x80	; 128
    12b0:	5f e3       	ldi	r21, 0x3F	; 63
    12b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b6:	88 23       	and	r24, r24
    12b8:	2c f4       	brge	.+10     	; 0x12c4 <main+0x59e>
		__ticks = 1;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	9c 8b       	std	Y+20, r25	; 0x14
    12c0:	8b 8b       	std	Y+19, r24	; 0x13
    12c2:	3f c0       	rjmp	.+126    	; 0x1342 <main+0x61c>
	else if (__tmp > 65535)
    12c4:	6d 89       	ldd	r22, Y+21	; 0x15
    12c6:	7e 89       	ldd	r23, Y+22	; 0x16
    12c8:	8f 89       	ldd	r24, Y+23	; 0x17
    12ca:	98 8d       	ldd	r25, Y+24	; 0x18
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	3f ef       	ldi	r19, 0xFF	; 255
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	57 e4       	ldi	r21, 0x47	; 71
    12d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d8:	18 16       	cp	r1, r24
    12da:	4c f5       	brge	.+82     	; 0x132e <main+0x608>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12dc:	69 8d       	ldd	r22, Y+25	; 0x19
    12de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e2       	ldi	r20, 0x20	; 32
    12ea:	51 e4       	ldi	r21, 0x41	; 65
    12ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	bc 01       	movw	r22, r24
    12f6:	cd 01       	movw	r24, r26
    12f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	9c 8b       	std	Y+20, r25	; 0x14
    1302:	8b 8b       	std	Y+19, r24	; 0x13
    1304:	0f c0       	rjmp	.+30     	; 0x1324 <main+0x5fe>
    1306:	88 ec       	ldi	r24, 0xC8	; 200
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	9a 8b       	std	Y+18, r25	; 0x12
    130c:	89 8b       	std	Y+17, r24	; 0x11
    130e:	89 89       	ldd	r24, Y+17	; 0x11
    1310:	9a 89       	ldd	r25, Y+18	; 0x12
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	f1 f7       	brne	.-4      	; 0x1312 <main+0x5ec>
    1316:	9a 8b       	std	Y+18, r25	; 0x12
    1318:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131a:	8b 89       	ldd	r24, Y+19	; 0x13
    131c:	9c 89       	ldd	r25, Y+20	; 0x14
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	9c 8b       	std	Y+20, r25	; 0x14
    1322:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1324:	8b 89       	ldd	r24, Y+19	; 0x13
    1326:	9c 89       	ldd	r25, Y+20	; 0x14
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	69 f7       	brne	.-38     	; 0x1306 <main+0x5e0>
    132c:	14 c0       	rjmp	.+40     	; 0x1356 <main+0x630>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    132e:	6d 89       	ldd	r22, Y+21	; 0x15
    1330:	7e 89       	ldd	r23, Y+22	; 0x16
    1332:	8f 89       	ldd	r24, Y+23	; 0x17
    1334:	98 8d       	ldd	r25, Y+24	; 0x18
    1336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	9c 8b       	std	Y+20, r25	; 0x14
    1340:	8b 8b       	std	Y+19, r24	; 0x13
    1342:	8b 89       	ldd	r24, Y+19	; 0x13
    1344:	9c 89       	ldd	r25, Y+20	; 0x14
    1346:	98 8b       	std	Y+16, r25	; 0x10
    1348:	8f 87       	std	Y+15, r24	; 0x0f
    134a:	8f 85       	ldd	r24, Y+15	; 0x0f
    134c:	98 89       	ldd	r25, Y+16	; 0x10
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	f1 f7       	brne	.-4      	; 0x134e <main+0x628>
    1352:	98 8b       	std	Y+16, r25	; 0x10
    1354:	8f 87       	std	Y+15, r24	; 0x0f
				}
			}
			else if(val == '-')
			{
				LCD_clearScreen();
				while(i<6)
    1356:	80 91 e4 00 	lds	r24, 0x00E4
    135a:	86 30       	cpi	r24, 0x06	; 6
    135c:	08 f4       	brcc	.+2      	; 0x1360 <main+0x63a>
    135e:	42 cf       	rjmp	.-380    	; 0x11e4 <main+0x4be>

			}
			_delay_ms(500);
		}

		while(step == 2)
    1360:	80 91 e1 00 	lds	r24, 0x00E1
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	09 f4       	brne	.+2      	; 0x136a <main+0x644>
    1368:	57 ce       	rjmp	.-850    	; 0x1018 <main+0x2f2>
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <main+0x64a>
				}
			}
		}
		while(step == 3)		/*un-lockig the door if the password is correct*/
		{
			Door();
    136c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Door>
					}
					_delay_ms(500);
				}
			}
		}
		while(step == 3)		/*un-lockig the door if the password is correct*/
    1370:	80 91 e1 00 	lds	r24, 0x00E1
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	d1 f3       	breq	.-12     	; 0x136c <main+0x646>
    1378:	f4 c0       	rjmp	.+488    	; 0x1562 <main+0x83c>
		{
			Door();
		}
		while(step == 4)	/* if wrong pass: try again for 2 more times*/
		{
			i=0;
    137a:	10 92 e4 00 	sts	0x00E4, r1
			j=0;
    137e:	fe 01       	movw	r30, r28
    1380:	e7 5b       	subi	r30, 0xB7	; 183
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	10 82       	st	Z, r1
    1386:	e6 c0       	rjmp	.+460    	; 0x1554 <main+0x82e>
			while(j<3)
			{
				LCD_displayStringRowColumn(0,0,"plz enter pass:");
    1388:	21 e8       	ldi	r18, 0x81	; 129
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	a9 01       	movw	r20, r18
    1392:	0e 94 6e 14 	call	0x28dc	; 0x28dc <LCD_displayStringRowColumn>
				LCD_moveCursor(1,i);
    1396:	90 91 e4 00 	lds	r25, 0x00E4
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	69 2f       	mov	r22, r25
    139e:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_moveCursor>
				Get_Send_Pass();
    13a2:	0e 94 17 06 	call	0xc2e	; 0xc2e <Get_Send_Pass>
				if(key == '=' && i == 5)
    13a6:	80 91 e5 00 	lds	r24, 0x00E5
    13aa:	8d 33       	cpi	r24, 0x3D	; 61
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <main+0x68a>
    13ae:	60 c0       	rjmp	.+192    	; 0x1470 <main+0x74a>
    13b0:	80 91 e4 00 	lds	r24, 0x00E4
    13b4:	85 30       	cpi	r24, 0x05	; 5
    13b6:	09 f0       	breq	.+2      	; 0x13ba <main+0x694>
    13b8:	5b c0       	rjmp	.+182    	; 0x1470 <main+0x74a>
				{
					LCD_clearScreen();
    13ba:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
					while(!UART_recieveByte());
    13be:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <UART_recieveByte>
    13c2:	88 23       	and	r24, r24
    13c4:	e1 f3       	breq	.-8      	; 0x13be <main+0x698>
					check = UART_recieveByte();
    13c6:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <UART_recieveByte>
    13ca:	fe 01       	movw	r30, r28
    13cc:	e8 5b       	subi	r30, 0xB8	; 184
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	80 83       	st	Z, r24
					if(check == Correct_Pass)
    13d2:	fe 01       	movw	r30, r28
    13d4:	e8 5b       	subi	r30, 0xB8	; 184
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	80 81       	ld	r24, Z
    13da:	82 32       	cpi	r24, 0x22	; 34
    13dc:	11 f5       	brne	.+68     	; 0x1422 <main+0x6fc>
						/*if pass is correct then go back to opening the door or changing
											the password*/
					{
						LCD_clearScreen();
    13de:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
						i=0;
    13e2:	10 92 e4 00 	sts	0x00E4, r1
						j=3;
    13e6:	fe 01       	movw	r30, r28
    13e8:	e7 5b       	subi	r30, 0xB7	; 183
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	83 e0       	ldi	r24, 0x03	; 3
    13ee:	80 83       	st	Z, r24
						if(val == '+')
    13f0:	fe 01       	movw	r30, r28
    13f2:	e9 5b       	subi	r30, 0xB9	; 185
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 81       	ld	r24, Z
    13f8:	8b 32       	cpi	r24, 0x2B	; 43
    13fa:	21 f4       	brne	.+8      	; 0x1404 <main+0x6de>
						{
							step=3;
    13fc:	83 e0       	ldi	r24, 0x03	; 3
    13fe:	80 93 e1 00 	sts	0x00E1, r24
    1402:	36 c0       	rjmp	.+108    	; 0x1470 <main+0x74a>
						}
						else if(val == '-')
    1404:	fe 01       	movw	r30, r28
    1406:	e9 5b       	subi	r30, 0xB9	; 185
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	80 81       	ld	r24, Z
    140c:	8d 32       	cpi	r24, 0x2D	; 45
    140e:	81 f5       	brne	.+96     	; 0x1470 <main+0x74a>
						{
							step=0;
    1410:	10 92 e1 00 	sts	0x00E1, r1
							UART_sendByte(READY);			/*send ready bit to controller*/
    1414:	88 e2       	ldi	r24, 0x28	; 40
    1416:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <UART_sendByte>
							UART_sendByte(STEP0);			/*go to step0 to change the password*/
    141a:	8c e2       	ldi	r24, 0x2C	; 44
    141c:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <UART_sendByte>
    1420:	27 c0       	rjmp	.+78     	; 0x1470 <main+0x74a>
						}
					}
					/*if pass is wrong again go activate the buzzer in the controller*/
					else if(check == Wrong_Pass)
    1422:	fe 01       	movw	r30, r28
    1424:	e8 5b       	subi	r30, 0xB8	; 184
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	80 81       	ld	r24, Z
    142a:	8c 30       	cpi	r24, 0x0C	; 12
    142c:	09 f5       	brne	.+66     	; 0x1470 <main+0x74a>
					{
						j++;
    142e:	de 01       	movw	r26, r28
    1430:	a7 5b       	subi	r26, 0xB7	; 183
    1432:	bf 4f       	sbci	r27, 0xFF	; 255
    1434:	fe 01       	movw	r30, r28
    1436:	e7 5b       	subi	r30, 0xB7	; 183
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	80 81       	ld	r24, Z
    143c:	8f 5f       	subi	r24, 0xFF	; 255
    143e:	8c 93       	st	X, r24
						i=0;
    1440:	10 92 e4 00 	sts	0x00E4, r1
						if(j==2)
    1444:	fe 01       	movw	r30, r28
    1446:	e7 5b       	subi	r30, 0xB7	; 183
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	80 81       	ld	r24, Z
    144c:	82 30       	cpi	r24, 0x02	; 2
    144e:	81 f4       	brne	.+32     	; 0x1470 <main+0x74a>
						{
							i=0;
    1450:	10 92 e4 00 	sts	0x00E4, r1
							j++;
    1454:	de 01       	movw	r26, r28
    1456:	a7 5b       	subi	r26, 0xB7	; 183
    1458:	bf 4f       	sbci	r27, 0xFF	; 255
    145a:	fe 01       	movw	r30, r28
    145c:	e7 5b       	subi	r30, 0xB7	; 183
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	80 81       	ld	r24, Z
    1462:	8f 5f       	subi	r24, 0xFF	; 255
    1464:	8c 93       	st	X, r24
							step = 5;
    1466:	85 e0       	ldi	r24, 0x05	; 5
    1468:	80 93 e1 00 	sts	0x00E1, r24
							LCD_clearScreen();
    146c:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_clearScreen>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	aa ef       	ldi	r26, 0xFA	; 250
    1476:	b3 e4       	ldi	r27, 0x43	; 67
    1478:	8b 87       	std	Y+11, r24	; 0x0b
    147a:	9c 87       	std	Y+12, r25	; 0x0c
    147c:	ad 87       	std	Y+13, r26	; 0x0d
    147e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1480:	6b 85       	ldd	r22, Y+11	; 0x0b
    1482:	7c 85       	ldd	r23, Y+12	; 0x0c
    1484:	8d 85       	ldd	r24, Y+13	; 0x0d
    1486:	9e 85       	ldd	r25, Y+14	; 0x0e
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	4a ef       	ldi	r20, 0xFA	; 250
    148e:	54 e4       	ldi	r21, 0x44	; 68
    1490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	8f 83       	std	Y+7, r24	; 0x07
    149a:	98 87       	std	Y+8, r25	; 0x08
    149c:	a9 87       	std	Y+9, r26	; 0x09
    149e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e8       	ldi	r20, 0x80	; 128
    14ae:	5f e3       	ldi	r21, 0x3F	; 63
    14b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b4:	88 23       	and	r24, r24
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <main+0x79c>
		__ticks = 1;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8d 83       	std	Y+5, r24	; 0x05
    14c0:	3f c0       	rjmp	.+126    	; 0x1540 <main+0x81a>
	else if (__tmp > 65535)
    14c2:	6f 81       	ldd	r22, Y+7	; 0x07
    14c4:	78 85       	ldd	r23, Y+8	; 0x08
    14c6:	89 85       	ldd	r24, Y+9	; 0x09
    14c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	3f ef       	ldi	r19, 0xFF	; 255
    14ce:	4f e7       	ldi	r20, 0x7F	; 127
    14d0:	57 e4       	ldi	r21, 0x47	; 71
    14d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d6:	18 16       	cp	r1, r24
    14d8:	4c f5       	brge	.+82     	; 0x152c <main+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14da:	6b 85       	ldd	r22, Y+11	; 0x0b
    14dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14de:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e2       	ldi	r20, 0x20	; 32
    14e8:	51 e4       	ldi	r21, 0x41	; 65
    14ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
    1502:	0f c0       	rjmp	.+30     	; 0x1522 <main+0x7fc>
    1504:	88 ec       	ldi	r24, 0xC8	; 200
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9c 83       	std	Y+4, r25	; 0x04
    150a:	8b 83       	std	Y+3, r24	; 0x03
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <main+0x7ea>
    1514:	9c 83       	std	Y+4, r25	; 0x04
    1516:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	69 f7       	brne	.-38     	; 0x1504 <main+0x7de>
    152a:	14 c0       	rjmp	.+40     	; 0x1554 <main+0x82e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152c:	6f 81       	ldd	r22, Y+7	; 0x07
    152e:	78 85       	ldd	r23, Y+8	; 0x08
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	9a 83       	std	Y+2, r25	; 0x02
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <main+0x826>
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
		}
		while(step == 4)	/* if wrong pass: try again for 2 more times*/
		{
			i=0;
			j=0;
			while(j<3)
    1554:	fe 01       	movw	r30, r28
    1556:	e7 5b       	subi	r30, 0xB7	; 183
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	80 81       	ld	r24, Z
    155c:	83 30       	cpi	r24, 0x03	; 3
    155e:	08 f4       	brcc	.+2      	; 0x1562 <main+0x83c>
    1560:	13 cf       	rjmp	.-474    	; 0x1388 <main+0x662>
		}
		while(step == 3)		/*un-lockig the door if the password is correct*/
		{
			Door();
		}
		while(step == 4)	/* if wrong pass: try again for 2 more times*/
    1562:	80 91 e1 00 	lds	r24, 0x00E1
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	09 f4       	brne	.+2      	; 0x156c <main+0x846>
    156a:	07 cf       	rjmp	.-498    	; 0x137a <main+0x654>
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <main+0x850>
				_delay_ms(500);
			}
		}
		while(step == 5)
		{
			Buzz();			/*activate the buzzer*/
    156e:	0e 94 39 06 	call	0xc72	; 0xc72 <Buzz>
			i=0;
    1572:	10 92 e4 00 	sts	0x00E4, r1
					}
				}
				_delay_ms(500);
			}
		}
		while(step == 5)
    1576:	80 91 e1 00 	lds	r24, 0x00E1
    157a:	85 30       	cpi	r24, 0x05	; 5
    157c:	c1 f3       	breq	.-16     	; 0x156e <main+0x848>
    157e:	e6 cb       	rjmp	.-2100   	; 0xd4c <main+0x26>

00001580 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	00 d0       	rcall	.+0      	; 0x1586 <GPIO_setupPinDirection+0x6>
    1586:	00 d0       	rcall	.+0      	; 0x1588 <GPIO_setupPinDirection+0x8>
    1588:	0f 92       	push	r0
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	6a 83       	std	Y+2, r22	; 0x02
    1592:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	88 30       	cpi	r24, 0x08	; 8
    1598:	08 f0       	brcs	.+2      	; 0x159c <GPIO_setupPinDirection+0x1c>
    159a:	d5 c0       	rjmp	.+426    	; 0x1746 <GPIO_setupPinDirection+0x1c6>
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	84 30       	cpi	r24, 0x04	; 4
    15a0:	08 f0       	brcs	.+2      	; 0x15a4 <GPIO_setupPinDirection+0x24>
    15a2:	d1 c0       	rjmp	.+418    	; 0x1746 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	3d 83       	std	Y+5, r19	; 0x05
    15ac:	2c 83       	std	Y+4, r18	; 0x04
    15ae:	8c 81       	ldd	r24, Y+4	; 0x04
    15b0:	9d 81       	ldd	r25, Y+5	; 0x05
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	91 05       	cpc	r25, r1
    15b6:	09 f4       	brne	.+2      	; 0x15ba <GPIO_setupPinDirection+0x3a>
    15b8:	43 c0       	rjmp	.+134    	; 0x1640 <GPIO_setupPinDirection+0xc0>
    15ba:	2c 81       	ldd	r18, Y+4	; 0x04
    15bc:	3d 81       	ldd	r19, Y+5	; 0x05
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	2c f4       	brge	.+10     	; 0x15ce <GPIO_setupPinDirection+0x4e>
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	71 f0       	breq	.+28     	; 0x15e8 <GPIO_setupPinDirection+0x68>
    15cc:	bc c0       	rjmp	.+376    	; 0x1746 <GPIO_setupPinDirection+0x1c6>
    15ce:	2c 81       	ldd	r18, Y+4	; 0x04
    15d0:	3d 81       	ldd	r19, Y+5	; 0x05
    15d2:	22 30       	cpi	r18, 0x02	; 2
    15d4:	31 05       	cpc	r19, r1
    15d6:	09 f4       	brne	.+2      	; 0x15da <GPIO_setupPinDirection+0x5a>
    15d8:	5f c0       	rjmp	.+190    	; 0x1698 <GPIO_setupPinDirection+0x118>
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	9d 81       	ldd	r25, Y+5	; 0x05
    15de:	83 30       	cpi	r24, 0x03	; 3
    15e0:	91 05       	cpc	r25, r1
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <GPIO_setupPinDirection+0x66>
    15e4:	85 c0       	rjmp	.+266    	; 0x16f0 <GPIO_setupPinDirection+0x170>
    15e6:	af c0       	rjmp	.+350    	; 0x1746 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	a1 f4       	brne	.+40     	; 0x1616 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15ee:	aa e3       	ldi	r26, 0x3A	; 58
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ea e3       	ldi	r30, 0x3A	; 58
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <GPIO_setupPinDirection+0x8c>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <GPIO_setupPinDirection+0x88>
    1610:	84 2b       	or	r24, r20
    1612:	8c 93       	st	X, r24
    1614:	98 c0       	rjmp	.+304    	; 0x1746 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1616:	aa e3       	ldi	r26, 0x3A	; 58
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	ea e3       	ldi	r30, 0x3A	; 58
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <GPIO_setupPinDirection+0xb4>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <GPIO_setupPinDirection+0xb0>
    1638:	80 95       	com	r24
    163a:	84 23       	and	r24, r20
    163c:	8c 93       	st	X, r24
    163e:	83 c0       	rjmp	.+262    	; 0x1746 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	a1 f4       	brne	.+40     	; 0x166e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1646:	a7 e3       	ldi	r26, 0x37	; 55
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e7 e3       	ldi	r30, 0x37	; 55
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 2e       	mov	r0, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <GPIO_setupPinDirection+0xe4>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <GPIO_setupPinDirection+0xe0>
    1668:	84 2b       	or	r24, r20
    166a:	8c 93       	st	X, r24
    166c:	6c c0       	rjmp	.+216    	; 0x1746 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    166e:	a7 e3       	ldi	r26, 0x37	; 55
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e7 e3       	ldi	r30, 0x37	; 55
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	48 2f       	mov	r20, r24
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <GPIO_setupPinDirection+0x10c>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <GPIO_setupPinDirection+0x108>
    1690:	80 95       	com	r24
    1692:	84 23       	and	r24, r20
    1694:	8c 93       	st	X, r24
    1696:	57 c0       	rjmp	.+174    	; 0x1746 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	a1 f4       	brne	.+40     	; 0x16c6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    169e:	a4 e3       	ldi	r26, 0x34	; 52
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e4 e3       	ldi	r30, 0x34	; 52
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	48 2f       	mov	r20, r24
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <GPIO_setupPinDirection+0x13c>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <GPIO_setupPinDirection+0x138>
    16c0:	84 2b       	or	r24, r20
    16c2:	8c 93       	st	X, r24
    16c4:	40 c0       	rjmp	.+128    	; 0x1746 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16c6:	a4 e3       	ldi	r26, 0x34	; 52
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e4 e3       	ldi	r30, 0x34	; 52
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <GPIO_setupPinDirection+0x164>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <GPIO_setupPinDirection+0x160>
    16e8:	80 95       	com	r24
    16ea:	84 23       	and	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	2b c0       	rjmp	.+86     	; 0x1746 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	a1 f4       	brne	.+40     	; 0x171e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    16f6:	a1 e3       	ldi	r26, 0x31	; 49
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e1 e3       	ldi	r30, 0x31	; 49
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <GPIO_setupPinDirection+0x194>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <GPIO_setupPinDirection+0x190>
    1718:	84 2b       	or	r24, r20
    171a:	8c 93       	st	X, r24
    171c:	14 c0       	rjmp	.+40     	; 0x1746 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    171e:	a1 e3       	ldi	r26, 0x31	; 49
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e1 e3       	ldi	r30, 0x31	; 49
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <GPIO_setupPinDirection+0x1bc>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <GPIO_setupPinDirection+0x1b8>
    1740:	80 95       	com	r24
    1742:	84 23       	and	r24, r20
    1744:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	00 d0       	rcall	.+0      	; 0x175c <GPIO_writePin+0x6>
    175c:	00 d0       	rcall	.+0      	; 0x175e <GPIO_writePin+0x8>
    175e:	0f 92       	push	r0
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	6a 83       	std	Y+2, r22	; 0x02
    1768:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	88 30       	cpi	r24, 0x08	; 8
    176e:	08 f0       	brcs	.+2      	; 0x1772 <GPIO_writePin+0x1c>
    1770:	d5 c0       	rjmp	.+426    	; 0x191c <GPIO_writePin+0x1c6>
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	84 30       	cpi	r24, 0x04	; 4
    1776:	08 f0       	brcs	.+2      	; 0x177a <GPIO_writePin+0x24>
    1778:	d1 c0       	rjmp	.+418    	; 0x191c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	3d 83       	std	Y+5, r19	; 0x05
    1782:	2c 83       	std	Y+4, r18	; 0x04
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	9d 81       	ldd	r25, Y+5	; 0x05
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	91 05       	cpc	r25, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <GPIO_writePin+0x3a>
    178e:	43 c0       	rjmp	.+134    	; 0x1816 <GPIO_writePin+0xc0>
    1790:	2c 81       	ldd	r18, Y+4	; 0x04
    1792:	3d 81       	ldd	r19, Y+5	; 0x05
    1794:	22 30       	cpi	r18, 0x02	; 2
    1796:	31 05       	cpc	r19, r1
    1798:	2c f4       	brge	.+10     	; 0x17a4 <GPIO_writePin+0x4e>
    179a:	8c 81       	ldd	r24, Y+4	; 0x04
    179c:	9d 81       	ldd	r25, Y+5	; 0x05
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	71 f0       	breq	.+28     	; 0x17be <GPIO_writePin+0x68>
    17a2:	bc c0       	rjmp	.+376    	; 0x191c <GPIO_writePin+0x1c6>
    17a4:	2c 81       	ldd	r18, Y+4	; 0x04
    17a6:	3d 81       	ldd	r19, Y+5	; 0x05
    17a8:	22 30       	cpi	r18, 0x02	; 2
    17aa:	31 05       	cpc	r19, r1
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <GPIO_writePin+0x5a>
    17ae:	5f c0       	rjmp	.+190    	; 0x186e <GPIO_writePin+0x118>
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	9d 81       	ldd	r25, Y+5	; 0x05
    17b4:	83 30       	cpi	r24, 0x03	; 3
    17b6:	91 05       	cpc	r25, r1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <GPIO_writePin+0x66>
    17ba:	85 c0       	rjmp	.+266    	; 0x18c6 <GPIO_writePin+0x170>
    17bc:	af c0       	rjmp	.+350    	; 0x191c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	a1 f4       	brne	.+40     	; 0x17ec <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17c4:	ab e3       	ldi	r26, 0x3B	; 59
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	eb e3       	ldi	r30, 0x3B	; 59
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <GPIO_writePin+0x8c>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <GPIO_writePin+0x88>
    17e6:	84 2b       	or	r24, r20
    17e8:	8c 93       	st	X, r24
    17ea:	98 c0       	rjmp	.+304    	; 0x191c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    17ec:	ab e3       	ldi	r26, 0x3B	; 59
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	eb e3       	ldi	r30, 0x3B	; 59
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <GPIO_writePin+0xb4>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <GPIO_writePin+0xb0>
    180e:	80 95       	com	r24
    1810:	84 23       	and	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	83 c0       	rjmp	.+262    	; 0x191c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	a1 f4       	brne	.+40     	; 0x1844 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    181c:	a8 e3       	ldi	r26, 0x38	; 56
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e8 e3       	ldi	r30, 0x38	; 56
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <GPIO_writePin+0xe4>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <GPIO_writePin+0xe0>
    183e:	84 2b       	or	r24, r20
    1840:	8c 93       	st	X, r24
    1842:	6c c0       	rjmp	.+216    	; 0x191c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1844:	a8 e3       	ldi	r26, 0x38	; 56
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e8 e3       	ldi	r30, 0x38	; 56
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	48 2f       	mov	r20, r24
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 2e       	mov	r0, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <GPIO_writePin+0x10c>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	0a 94       	dec	r0
    1864:	e2 f7       	brpl	.-8      	; 0x185e <GPIO_writePin+0x108>
    1866:	80 95       	com	r24
    1868:	84 23       	and	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	57 c0       	rjmp	.+174    	; 0x191c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	a1 f4       	brne	.+40     	; 0x189c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1874:	a5 e3       	ldi	r26, 0x35	; 53
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e5 e3       	ldi	r30, 0x35	; 53
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	48 2f       	mov	r20, r24
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	02 2e       	mov	r0, r18
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <GPIO_writePin+0x13c>
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	0a 94       	dec	r0
    1894:	e2 f7       	brpl	.-8      	; 0x188e <GPIO_writePin+0x138>
    1896:	84 2b       	or	r24, r20
    1898:	8c 93       	st	X, r24
    189a:	40 c0       	rjmp	.+128    	; 0x191c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    189c:	a5 e3       	ldi	r26, 0x35	; 53
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e5 e3       	ldi	r30, 0x35	; 53
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	48 2f       	mov	r20, r24
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 2e       	mov	r0, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <GPIO_writePin+0x164>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	0a 94       	dec	r0
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <GPIO_writePin+0x160>
    18be:	80 95       	com	r24
    18c0:	84 23       	and	r24, r20
    18c2:	8c 93       	st	X, r24
    18c4:	2b c0       	rjmp	.+86     	; 0x191c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	a1 f4       	brne	.+40     	; 0x18f4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18cc:	a2 e3       	ldi	r26, 0x32	; 50
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e2 e3       	ldi	r30, 0x32	; 50
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	48 2f       	mov	r20, r24
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	02 2e       	mov	r0, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <GPIO_writePin+0x194>
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	0a 94       	dec	r0
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <GPIO_writePin+0x190>
    18ee:	84 2b       	or	r24, r20
    18f0:	8c 93       	st	X, r24
    18f2:	14 c0       	rjmp	.+40     	; 0x191c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    18f4:	a2 e3       	ldi	r26, 0x32	; 50
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e2 e3       	ldi	r30, 0x32	; 50
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	48 2f       	mov	r20, r24
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 2e       	mov	r0, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <GPIO_writePin+0x1bc>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 94       	dec	r0
    1914:	e2 f7       	brpl	.-8      	; 0x190e <GPIO_writePin+0x1b8>
    1916:	80 95       	com	r24
    1918:	84 23       	and	r24, r20
    191a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <GPIO_readPin+0x6>
    1932:	00 d0       	rcall	.+0      	; 0x1934 <GPIO_readPin+0x8>
    1934:	0f 92       	push	r0
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	8a 83       	std	Y+2, r24	; 0x02
    193c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    193e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	88 30       	cpi	r24, 0x08	; 8
    1944:	08 f0       	brcs	.+2      	; 0x1948 <GPIO_readPin+0x1c>
    1946:	84 c0       	rjmp	.+264    	; 0x1a50 <GPIO_readPin+0x124>
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	84 30       	cpi	r24, 0x04	; 4
    194c:	08 f0       	brcs	.+2      	; 0x1950 <GPIO_readPin+0x24>
    194e:	80 c0       	rjmp	.+256    	; 0x1a50 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	3d 83       	std	Y+5, r19	; 0x05
    1958:	2c 83       	std	Y+4, r18	; 0x04
    195a:	4c 81       	ldd	r20, Y+4	; 0x04
    195c:	5d 81       	ldd	r21, Y+5	; 0x05
    195e:	41 30       	cpi	r20, 0x01	; 1
    1960:	51 05       	cpc	r21, r1
    1962:	79 f1       	breq	.+94     	; 0x19c2 <GPIO_readPin+0x96>
    1964:	8c 81       	ldd	r24, Y+4	; 0x04
    1966:	9d 81       	ldd	r25, Y+5	; 0x05
    1968:	82 30       	cpi	r24, 0x02	; 2
    196a:	91 05       	cpc	r25, r1
    196c:	34 f4       	brge	.+12     	; 0x197a <GPIO_readPin+0x4e>
    196e:	2c 81       	ldd	r18, Y+4	; 0x04
    1970:	3d 81       	ldd	r19, Y+5	; 0x05
    1972:	21 15       	cp	r18, r1
    1974:	31 05       	cpc	r19, r1
    1976:	69 f0       	breq	.+26     	; 0x1992 <GPIO_readPin+0x66>
    1978:	6b c0       	rjmp	.+214    	; 0x1a50 <GPIO_readPin+0x124>
    197a:	4c 81       	ldd	r20, Y+4	; 0x04
    197c:	5d 81       	ldd	r21, Y+5	; 0x05
    197e:	42 30       	cpi	r20, 0x02	; 2
    1980:	51 05       	cpc	r21, r1
    1982:	b9 f1       	breq	.+110    	; 0x19f2 <GPIO_readPin+0xc6>
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	9d 81       	ldd	r25, Y+5	; 0x05
    1988:	83 30       	cpi	r24, 0x03	; 3
    198a:	91 05       	cpc	r25, r1
    198c:	09 f4       	brne	.+2      	; 0x1990 <GPIO_readPin+0x64>
    198e:	49 c0       	rjmp	.+146    	; 0x1a22 <GPIO_readPin+0xf6>
    1990:	5f c0       	rjmp	.+190    	; 0x1a50 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1992:	e9 e3       	ldi	r30, 0x39	; 57
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	88 2f       	mov	r24, r24
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	a9 01       	movw	r20, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <GPIO_readPin+0x7e>
    19a6:	55 95       	asr	r21
    19a8:	47 95       	ror	r20
    19aa:	8a 95       	dec	r24
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <GPIO_readPin+0x7a>
    19ae:	ca 01       	movw	r24, r20
    19b0:	81 70       	andi	r24, 0x01	; 1
    19b2:	90 70       	andi	r25, 0x00	; 0
    19b4:	88 23       	and	r24, r24
    19b6:	19 f0       	breq	.+6      	; 0x19be <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	49 c0       	rjmp	.+146    	; 0x1a50 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19be:	19 82       	std	Y+1, r1	; 0x01
    19c0:	47 c0       	rjmp	.+142    	; 0x1a50 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19c2:	e6 e3       	ldi	r30, 0x36	; 54
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a9 01       	movw	r20, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <GPIO_readPin+0xae>
    19d6:	55 95       	asr	r21
    19d8:	47 95       	ror	r20
    19da:	8a 95       	dec	r24
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <GPIO_readPin+0xaa>
    19de:	ca 01       	movw	r24, r20
    19e0:	81 70       	andi	r24, 0x01	; 1
    19e2:	90 70       	andi	r25, 0x00	; 0
    19e4:	88 23       	and	r24, r24
    19e6:	19 f0       	breq	.+6      	; 0x19ee <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	31 c0       	rjmp	.+98     	; 0x1a50 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19ee:	19 82       	std	Y+1, r1	; 0x01
    19f0:	2f c0       	rjmp	.+94     	; 0x1a50 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    19f2:	e3 e3       	ldi	r30, 0x33	; 51
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	a9 01       	movw	r20, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <GPIO_readPin+0xde>
    1a06:	55 95       	asr	r21
    1a08:	47 95       	ror	r20
    1a0a:	8a 95       	dec	r24
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <GPIO_readPin+0xda>
    1a0e:	ca 01       	movw	r24, r20
    1a10:	81 70       	andi	r24, 0x01	; 1
    1a12:	90 70       	andi	r25, 0x00	; 0
    1a14:	88 23       	and	r24, r24
    1a16:	19 f0       	breq	.+6      	; 0x1a1e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	19 c0       	rjmp	.+50     	; 0x1a50 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a1e:	19 82       	std	Y+1, r1	; 0x01
    1a20:	17 c0       	rjmp	.+46     	; 0x1a50 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a22:	e0 e3       	ldi	r30, 0x30	; 48
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	88 2f       	mov	r24, r24
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a9 01       	movw	r20, r18
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <GPIO_readPin+0x10e>
    1a36:	55 95       	asr	r21
    1a38:	47 95       	ror	r20
    1a3a:	8a 95       	dec	r24
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <GPIO_readPin+0x10a>
    1a3e:	ca 01       	movw	r24, r20
    1a40:	81 70       	andi	r24, 0x01	; 1
    1a42:	90 70       	andi	r25, 0x00	; 0
    1a44:	88 23       	and	r24, r24
    1a46:	19 f0       	breq	.+6      	; 0x1a4e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a4e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <GPIO_setupPortDirection+0x6>
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <GPIO_setupPortDirection+0x8>
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	84 30       	cpi	r24, 0x04	; 4
    1a76:	90 f5       	brcc	.+100    	; 0x1adc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	3c 83       	std	Y+4, r19	; 0x04
    1a80:	2b 83       	std	Y+3, r18	; 0x03
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	91 05       	cpc	r25, r1
    1a8a:	d1 f0       	breq	.+52     	; 0x1ac0 <GPIO_setupPortDirection+0x5e>
    1a8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a90:	22 30       	cpi	r18, 0x02	; 2
    1a92:	31 05       	cpc	r19, r1
    1a94:	2c f4       	brge	.+10     	; 0x1aa0 <GPIO_setupPortDirection+0x3e>
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	61 f0       	breq	.+24     	; 0x1ab6 <GPIO_setupPortDirection+0x54>
    1a9e:	1e c0       	rjmp	.+60     	; 0x1adc <GPIO_setupPortDirection+0x7a>
    1aa0:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa2:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa4:	22 30       	cpi	r18, 0x02	; 2
    1aa6:	31 05       	cpc	r19, r1
    1aa8:	81 f0       	breq	.+32     	; 0x1aca <GPIO_setupPortDirection+0x68>
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	83 30       	cpi	r24, 0x03	; 3
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	81 f0       	breq	.+32     	; 0x1ad4 <GPIO_setupPortDirection+0x72>
    1ab4:	13 c0       	rjmp	.+38     	; 0x1adc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ab6:	ea e3       	ldi	r30, 0x3A	; 58
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	80 83       	st	Z, r24
    1abe:	0e c0       	rjmp	.+28     	; 0x1adc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ac0:	e7 e3       	ldi	r30, 0x37	; 55
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	80 83       	st	Z, r24
    1ac8:	09 c0       	rjmp	.+18     	; 0x1adc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1aca:	e4 e3       	ldi	r30, 0x34	; 52
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	80 83       	st	Z, r24
    1ad2:	04 c0       	rjmp	.+8      	; 0x1adc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ad4:	e1 e3       	ldi	r30, 0x31	; 49
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	80 83       	st	Z, r24
			break;
		}
	}
}
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <GPIO_writePort+0x6>
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <GPIO_writePort+0x8>
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	84 30       	cpi	r24, 0x04	; 4
    1afe:	90 f5       	brcc	.+100    	; 0x1b64 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	3c 83       	std	Y+4, r19	; 0x04
    1b08:	2b 83       	std	Y+3, r18	; 0x03
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	91 05       	cpc	r25, r1
    1b12:	d1 f0       	breq	.+52     	; 0x1b48 <GPIO_writePort+0x5e>
    1b14:	2b 81       	ldd	r18, Y+3	; 0x03
    1b16:	3c 81       	ldd	r19, Y+4	; 0x04
    1b18:	22 30       	cpi	r18, 0x02	; 2
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	2c f4       	brge	.+10     	; 0x1b28 <GPIO_writePort+0x3e>
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	61 f0       	breq	.+24     	; 0x1b3e <GPIO_writePort+0x54>
    1b26:	1e c0       	rjmp	.+60     	; 0x1b64 <GPIO_writePort+0x7a>
    1b28:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b2c:	22 30       	cpi	r18, 0x02	; 2
    1b2e:	31 05       	cpc	r19, r1
    1b30:	81 f0       	breq	.+32     	; 0x1b52 <GPIO_writePort+0x68>
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	9c 81       	ldd	r25, Y+4	; 0x04
    1b36:	83 30       	cpi	r24, 0x03	; 3
    1b38:	91 05       	cpc	r25, r1
    1b3a:	81 f0       	breq	.+32     	; 0x1b5c <GPIO_writePort+0x72>
    1b3c:	13 c0       	rjmp	.+38     	; 0x1b64 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b3e:	eb e3       	ldi	r30, 0x3B	; 59
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	80 83       	st	Z, r24
    1b46:	0e c0       	rjmp	.+28     	; 0x1b64 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b48:	e8 e3       	ldi	r30, 0x38	; 56
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	80 83       	st	Z, r24
    1b50:	09 c0       	rjmp	.+18     	; 0x1b64 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b52:	e5 e3       	ldi	r30, 0x35	; 53
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	80 83       	st	Z, r24
    1b5a:	04 c0       	rjmp	.+8      	; 0x1b64 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b5c:	e2 e3       	ldi	r30, 0x32	; 50
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <GPIO_readPort+0x6>
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <GPIO_readPort+0x8>
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b80:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	84 30       	cpi	r24, 0x04	; 4
    1b86:	90 f5       	brcc	.+100    	; 0x1bec <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	3c 83       	std	Y+4, r19	; 0x04
    1b90:	2b 83       	std	Y+3, r18	; 0x03
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	91 05       	cpc	r25, r1
    1b9a:	d1 f0       	breq	.+52     	; 0x1bd0 <GPIO_readPort+0x5e>
    1b9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	2c f4       	brge	.+10     	; 0x1bb0 <GPIO_readPort+0x3e>
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	61 f0       	breq	.+24     	; 0x1bc6 <GPIO_readPort+0x54>
    1bae:	1e c0       	rjmp	.+60     	; 0x1bec <GPIO_readPort+0x7a>
    1bb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb4:	22 30       	cpi	r18, 0x02	; 2
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	81 f0       	breq	.+32     	; 0x1bda <GPIO_readPort+0x68>
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	83 30       	cpi	r24, 0x03	; 3
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	81 f0       	breq	.+32     	; 0x1be4 <GPIO_readPort+0x72>
    1bc4:	13 c0       	rjmp	.+38     	; 0x1bec <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1bc6:	e9 e3       	ldi	r30, 0x39	; 57
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	0e c0       	rjmp	.+28     	; 0x1bec <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1bd0:	e6 e3       	ldi	r30, 0x36	; 54
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	89 83       	std	Y+1, r24	; 0x01
    1bd8:	09 c0       	rjmp	.+18     	; 0x1bec <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1bda:	e3 e3       	ldi	r30, 0x33	; 51
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	04 c0       	rjmp	.+8      	; 0x1bec <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1be4:	e0 e3       	ldi	r30, 0x30	; 48
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret

00001bfc <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	60 97       	sbiw	r28, 0x10	; 16
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	de bf       	out	0x3e, r29	; 62
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1c10:	82 e0       	ldi	r24, 0x02	; 2
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	40 e0       	ldi	r20, 0x00	; 0
    1c16:	0e 94 c0 0a 	call	0x1580	; 0x1580 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1c1a:	82 e0       	ldi	r24, 0x02	; 2
    1c1c:	61 e0       	ldi	r22, 0x01	; 1
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	0e 94 c0 0a 	call	0x1580	; 0x1580 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	62 e0       	ldi	r22, 0x02	; 2
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1c2e:	82 e0       	ldi	r24, 0x02	; 2
    1c30:	63 e0       	ldi	r22, 0x03	; 3
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	0e 94 c0 0a 	call	0x1580	; 0x1580 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	64 e0       	ldi	r22, 0x04	; 4
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1c42:	82 e0       	ldi	r24, 0x02	; 2
    1c44:	65 e0       	ldi	r22, 0x05	; 5
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	0e 94 c0 0a 	call	0x1580	; 0x1580 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	66 e0       	ldi	r22, 0x06	; 6
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	0e 94 c0 0a 	call	0x1580	; 0x1580 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	67 e0       	ldi	r22, 0x07	; 7
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c60:	1f 86       	std	Y+15, r1	; 0x0f
    1c62:	ab c0       	rjmp	.+342    	; 0x1dba <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c68:	41 e0       	ldi	r20, 0x01	; 1
    1c6a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <GPIO_setupPinDirection>
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 ea       	ldi	r26, 0xA0	; 160
    1c74:	b0 e4       	ldi	r27, 0x40	; 64
    1c76:	8b 87       	std	Y+11, r24	; 0x0b
    1c78:	9c 87       	std	Y+12, r25	; 0x0c
    1c7a:	ad 87       	std	Y+13, r26	; 0x0d
    1c7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	4a ef       	ldi	r20, 0xFA	; 250
    1c8c:	54 e4       	ldi	r21, 0x44	; 68
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	8f 83       	std	Y+7, r24	; 0x07
    1c98:	98 87       	std	Y+8, r25	; 0x08
    1c9a:	a9 87       	std	Y+9, r26	; 0x09
    1c9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca0:	78 85       	ldd	r23, Y+8	; 0x08
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	2c f4       	brge	.+10     	; 0x1cc0 <KEYPAD_getPressedKey+0xc4>
		__ticks = 1;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	3f c0       	rjmp	.+126    	; 0x1d3e <KEYPAD_getPressedKey+0x142>
	else if (__tmp > 65535)
    1cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc2:	78 85       	ldd	r23, Y+8	; 0x08
    1cc4:	89 85       	ldd	r24, Y+9	; 0x09
    1cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	3f ef       	ldi	r19, 0xFF	; 255
    1ccc:	4f e7       	ldi	r20, 0x7F	; 127
    1cce:	57 e4       	ldi	r21, 0x47	; 71
    1cd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd4:	18 16       	cp	r1, r24
    1cd6:	4c f5       	brge	.+82     	; 0x1d2a <KEYPAD_getPressedKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e2       	ldi	r20, 0x20	; 32
    1ce6:	51 e4       	ldi	r21, 0x41	; 65
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	0f c0       	rjmp	.+30     	; 0x1d20 <KEYPAD_getPressedKey+0x124>
    1d02:	88 ec       	ldi	r24, 0xC8	; 200
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9c 83       	std	Y+4, r25	; 0x04
    1d08:	8b 83       	std	Y+3, r24	; 0x03
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <KEYPAD_getPressedKey+0x112>
    1d12:	9c 83       	std	Y+4, r25	; 0x04
    1d14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	69 f7       	brne	.-38     	; 0x1d02 <KEYPAD_getPressedKey+0x106>
    1d28:	14 c0       	rjmp	.+40     	; 0x1d52 <KEYPAD_getPressedKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2c:	78 85       	ldd	r23, Y+8	; 0x08
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <KEYPAD_getPressedKey+0x14e>
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
             _delay_ms(5);
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1d52:	82 e0       	ldi	r24, 0x02	; 2
    1d54:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	0e 94 ab 0b 	call	0x1756	; 0x1756 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d5c:	18 8a       	std	Y+16, r1	; 0x10
    1d5e:	22 c0       	rjmp	.+68     	; 0x1da4 <KEYPAD_getPressedKey+0x1a8>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1d60:	88 89       	ldd	r24, Y+16	; 0x10
    1d62:	98 2f       	mov	r25, r24
    1d64:	9c 5f       	subi	r25, 0xFC	; 252
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	69 2f       	mov	r22, r25
    1d6a:	0e 94 96 0c 	call	0x192c	; 0x192c <GPIO_readPin>
    1d6e:	88 23       	and	r24, r24
    1d70:	b1 f4       	brne	.+44     	; 0x1d9e <KEYPAD_getPressedKey+0x1a2>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d74:	88 2f       	mov	r24, r24
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	98 2f       	mov	r25, r24
    1d82:	88 89       	ldd	r24, Y+16	; 0x10
    1d84:	89 0f       	add	r24, r25
    1d86:	8f 5f       	subi	r24, 0xFF	; 255
    1d88:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1d8c:	60 96       	adiw	r28, 0x10	; 16
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
             _delay_ms(5);
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d9e:	88 89       	ldd	r24, Y+16	; 0x10
    1da0:	8f 5f       	subi	r24, 0xFF	; 255
    1da2:	88 8b       	std	Y+16, r24	; 0x10
    1da4:	88 89       	ldd	r24, Y+16	; 0x10
    1da6:	84 30       	cpi	r24, 0x04	; 4
    1da8:	d8 f2       	brcs	.-74     	; 0x1d60 <KEYPAD_getPressedKey+0x164>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1db4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db6:	8f 5f       	subi	r24, 0xFF	; 255
    1db8:	8f 87       	std	Y+15, r24	; 0x0f
    1dba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dbc:	84 30       	cpi	r24, 0x04	; 4
    1dbe:	08 f4       	brcc	.+2      	; 0x1dc2 <KEYPAD_getPressedKey+0x1c6>
    1dc0:	51 cf       	rjmp	.-350    	; 0x1c64 <KEYPAD_getPressedKey+0x68>
    1dc2:	4e cf       	rjmp	.-356    	; 0x1c60 <KEYPAD_getPressedKey+0x64>

00001dc4 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <KEYPAD_4x4_adjustKeyNumber+0x6>
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <KEYPAD_4x4_adjustKeyNumber+0x8>
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1dd2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	3c 83       	std	Y+4, r19	; 0x04
    1ddc:	2b 83       	std	Y+3, r18	; 0x03
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	88 30       	cpi	r24, 0x08	; 8
    1de4:	91 05       	cpc	r25, r1
    1de6:	09 f4       	brne	.+2      	; 0x1dea <KEYPAD_4x4_adjustKeyNumber+0x26>
    1de8:	70 c0       	rjmp	.+224    	; 0x1eca <KEYPAD_4x4_adjustKeyNumber+0x106>
    1dea:	2b 81       	ldd	r18, Y+3	; 0x03
    1dec:	3c 81       	ldd	r19, Y+4	; 0x04
    1dee:	29 30       	cpi	r18, 0x09	; 9
    1df0:	31 05       	cpc	r19, r1
    1df2:	5c f5       	brge	.+86     	; 0x1e4a <KEYPAD_4x4_adjustKeyNumber+0x86>
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	9c 81       	ldd	r25, Y+4	; 0x04
    1df8:	84 30       	cpi	r24, 0x04	; 4
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1dfe:	59 c0       	rjmp	.+178    	; 0x1eb2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1e00:	2b 81       	ldd	r18, Y+3	; 0x03
    1e02:	3c 81       	ldd	r19, Y+4	; 0x04
    1e04:	25 30       	cpi	r18, 0x05	; 5
    1e06:	31 05       	cpc	r19, r1
    1e08:	9c f4       	brge	.+38     	; 0x1e30 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	91 05       	cpc	r25, r1
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1e14:	48 c0       	rjmp	.+144    	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1e16:	2b 81       	ldd	r18, Y+3	; 0x03
    1e18:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1a:	23 30       	cpi	r18, 0x03	; 3
    1e1c:	31 05       	cpc	r19, r1
    1e1e:	0c f0       	brlt	.+2      	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1e20:	45 c0       	rjmp	.+138    	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	9c 81       	ldd	r25, Y+4	; 0x04
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	91 05       	cpc	r25, r1
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1e2c:	39 c0       	rjmp	.+114    	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1e2e:	67 c0       	rjmp	.+206    	; 0x1efe <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1e30:	2b 81       	ldd	r18, Y+3	; 0x03
    1e32:	3c 81       	ldd	r19, Y+4	; 0x04
    1e34:	26 30       	cpi	r18, 0x06	; 6
    1e36:	31 05       	cpc	r19, r1
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <KEYPAD_4x4_adjustKeyNumber+0x78>
    1e3a:	41 c0       	rjmp	.+130    	; 0x1ebe <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	87 30       	cpi	r24, 0x07	; 7
    1e42:	91 05       	cpc	r25, r1
    1e44:	0c f0       	brlt	.+2      	; 0x1e48 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1e46:	3e c0       	rjmp	.+124    	; 0x1ec4 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1e48:	37 c0       	rjmp	.+110    	; 0x1eb8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1e4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4e:	2c 30       	cpi	r18, 0x0C	; 12
    1e50:	31 05       	cpc	r19, r1
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e54:	46 c0       	rjmp	.+140    	; 0x1ee2 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	8d 30       	cpi	r24, 0x0D	; 13
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	5c f4       	brge	.+22     	; 0x1e76 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e60:	2b 81       	ldd	r18, Y+3	; 0x03
    1e62:	3c 81       	ldd	r19, Y+4	; 0x04
    1e64:	2a 30       	cpi	r18, 0x0A	; 10
    1e66:	31 05       	cpc	r19, r1
    1e68:	b1 f1       	breq	.+108    	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	8b 30       	cpi	r24, 0x0B	; 11
    1e70:	91 05       	cpc	r25, r1
    1e72:	a4 f5       	brge	.+104    	; 0x1edc <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e74:	2d c0       	rjmp	.+90     	; 0x1ed0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e76:	2b 81       	ldd	r18, Y+3	; 0x03
    1e78:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7a:	2e 30       	cpi	r18, 0x0E	; 14
    1e7c:	31 05       	cpc	r19, r1
    1e7e:	b9 f1       	breq	.+110    	; 0x1eee <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	9c 81       	ldd	r25, Y+4	; 0x04
    1e84:	8e 30       	cpi	r24, 0x0E	; 14
    1e86:	91 05       	cpc	r25, r1
    1e88:	7c f1       	brlt	.+94     	; 0x1ee8 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1e8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8e:	2f 30       	cpi	r18, 0x0F	; 15
    1e90:	31 05       	cpc	r19, r1
    1e92:	79 f1       	breq	.+94     	; 0x1ef2 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	9c 81       	ldd	r25, Y+4	; 0x04
    1e98:	80 31       	cpi	r24, 0x10	; 16
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	69 f1       	breq	.+90     	; 0x1ef8 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1e9e:	2f c0       	rjmp	.+94     	; 0x1efe <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1ea0:	87 e0       	ldi	r24, 0x07	; 7
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	2e c0       	rjmp	.+92     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1ea6:	88 e0       	ldi	r24, 0x08	; 8
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	2b c0       	rjmp	.+86     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1eac:	89 e0       	ldi	r24, 0x09	; 9
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	28 c0       	rjmp	.+80     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1eb2:	85 e2       	ldi	r24, 0x25	; 37
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	25 c0       	rjmp	.+74     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1eb8:	84 e0       	ldi	r24, 0x04	; 4
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	22 c0       	rjmp	.+68     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1ebe:	85 e0       	ldi	r24, 0x05	; 5
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	1f c0       	rjmp	.+62     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1ec4:	86 e0       	ldi	r24, 0x06	; 6
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	1c c0       	rjmp	.+56     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*';
    1eca:	8a e2       	ldi	r24, 0x2A	; 42
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	19 c0       	rjmp	.+50     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	16 c0       	rjmp	.+44     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1ed6:	82 e0       	ldi	r24, 0x02	; 2
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	13 c0       	rjmp	.+38     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	10 c0       	rjmp	.+32     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1ee2:	8d e2       	ldi	r24, 0x2D	; 45
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	0d c0       	rjmp	.+26     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1ee8:	8d e0       	ldi	r24, 0x0D	; 13
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	0a c0       	rjmp	.+20     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1eee:	19 82       	std	Y+1, r1	; 0x01
    1ef0:	08 c0       	rjmp	.+16     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1ef2:	8d e3       	ldi	r24, 0x3D	; 61
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	05 c0       	rjmp	.+10     	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1ef8:	8b e2       	ldi	r24, 0x2B	; 43
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	2e 97       	sbiw	r28, 0x0e	; 14
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	41 e0       	ldi	r20, 0x01	; 1
    1f2c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	62 e0       	ldi	r22, 0x02	; 2
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	0e 94 c0 0a 	call	0x1580	; 0x1580 <GPIO_setupPinDirection>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	a0 ea       	ldi	r26, 0xA0	; 160
    1f40:	b1 e4       	ldi	r27, 0x41	; 65
    1f42:	8b 87       	std	Y+11, r24	; 0x0b
    1f44:	9c 87       	std	Y+12, r25	; 0x0c
    1f46:	ad 87       	std	Y+13, r26	; 0x0d
    1f48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4a ef       	ldi	r20, 0xFA	; 250
    1f58:	54 e4       	ldi	r21, 0x44	; 68
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	8f 83       	std	Y+7, r24	; 0x07
    1f64:	98 87       	std	Y+8, r25	; 0x08
    1f66:	a9 87       	std	Y+9, r26	; 0x09
    1f68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6c:	78 85       	ldd	r23, Y+8	; 0x08
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e8       	ldi	r20, 0x80	; 128
    1f78:	5f e3       	ldi	r21, 0x3F	; 63
    1f7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f7e:	88 23       	and	r24, r24
    1f80:	2c f4       	brge	.+10     	; 0x1f8c <LCD_init+0x7a>
		__ticks = 1;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	9e 83       	std	Y+6, r25	; 0x06
    1f88:	8d 83       	std	Y+5, r24	; 0x05
    1f8a:	3f c0       	rjmp	.+126    	; 0x200a <LCD_init+0xf8>
	else if (__tmp > 65535)
    1f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8e:	78 85       	ldd	r23, Y+8	; 0x08
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	4f e7       	ldi	r20, 0x7F	; 127
    1f9a:	57 e4       	ldi	r21, 0x47	; 71
    1f9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa0:	18 16       	cp	r1, r24
    1fa2:	4c f5       	brge	.+82     	; 0x1ff6 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e2       	ldi	r20, 0x20	; 32
    1fb2:	51 e4       	ldi	r21, 0x41	; 65
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
    1fcc:	0f c0       	rjmp	.+30     	; 0x1fec <LCD_init+0xda>
    1fce:	88 ec       	ldi	r24, 0xC8	; 200
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9c 83       	std	Y+4, r25	; 0x04
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_init+0xc8>
    1fde:	9c 83       	std	Y+4, r25	; 0x04
    1fe0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <LCD_init+0xbc>
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff8:	78 85       	ldd	r23, Y+8	; 0x08
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	9a 83       	std	Y+2, r25	; 0x02
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <LCD_init+0x104>
    201a:	9a 83       	std	Y+2, r25	; 0x02
    201c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	6f ef       	ldi	r22, 0xFF	; 255
    2022:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2026:	88 e3       	ldi	r24, 0x38	; 56
    2028:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    202c:	8c e0       	ldi	r24, 0x0C	; 12
    202e:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_sendCommand>
}
    2038:	2e 96       	adiw	r28, 0x0e	; 14
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	e9 97       	sbiw	r28, 0x39	; 57
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	0e 94 ab 0b 	call	0x1756	; 0x1756 <GPIO_writePin>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a0 e8       	ldi	r26, 0x80	; 128
    2070:	bf e3       	ldi	r27, 0x3F	; 63
    2072:	8d ab       	std	Y+53, r24	; 0x35
    2074:	9e ab       	std	Y+54, r25	; 0x36
    2076:	af ab       	std	Y+55, r26	; 0x37
    2078:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207a:	6d a9       	ldd	r22, Y+53	; 0x35
    207c:	7e a9       	ldd	r23, Y+54	; 0x36
    207e:	8f a9       	ldd	r24, Y+55	; 0x37
    2080:	98 ad       	ldd	r25, Y+56	; 0x38
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	4a ef       	ldi	r20, 0xFA	; 250
    2088:	54 e4       	ldi	r21, 0x44	; 68
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	89 ab       	std	Y+49, r24	; 0x31
    2094:	9a ab       	std	Y+50, r25	; 0x32
    2096:	ab ab       	std	Y+51, r26	; 0x33
    2098:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    209a:	69 a9       	ldd	r22, Y+49	; 0x31
    209c:	7a a9       	ldd	r23, Y+50	; 0x32
    209e:	8b a9       	ldd	r24, Y+51	; 0x33
    20a0:	9c a9       	ldd	r25, Y+52	; 0x34
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ae:	88 23       	and	r24, r24
    20b0:	2c f4       	brge	.+10     	; 0x20bc <LCD_sendCommand+0x72>
		__ticks = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	98 ab       	std	Y+48, r25	; 0x30
    20b8:	8f a7       	std	Y+47, r24	; 0x2f
    20ba:	3f c0       	rjmp	.+126    	; 0x213a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    20bc:	69 a9       	ldd	r22, Y+49	; 0x31
    20be:	7a a9       	ldd	r23, Y+50	; 0x32
    20c0:	8b a9       	ldd	r24, Y+51	; 0x33
    20c2:	9c a9       	ldd	r25, Y+52	; 0x34
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	3f ef       	ldi	r19, 0xFF	; 255
    20c8:	4f e7       	ldi	r20, 0x7F	; 127
    20ca:	57 e4       	ldi	r21, 0x47	; 71
    20cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d0:	18 16       	cp	r1, r24
    20d2:	4c f5       	brge	.+82     	; 0x2126 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d4:	6d a9       	ldd	r22, Y+53	; 0x35
    20d6:	7e a9       	ldd	r23, Y+54	; 0x36
    20d8:	8f a9       	ldd	r24, Y+55	; 0x37
    20da:	98 ad       	ldd	r25, Y+56	; 0x38
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e2       	ldi	r20, 0x20	; 32
    20e2:	51 e4       	ldi	r21, 0x41	; 65
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	98 ab       	std	Y+48, r25	; 0x30
    20fa:	8f a7       	std	Y+47, r24	; 0x2f
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <LCD_sendCommand+0xd2>
    20fe:	88 ec       	ldi	r24, 0xC8	; 200
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9e a7       	std	Y+46, r25	; 0x2e
    2104:	8d a7       	std	Y+45, r24	; 0x2d
    2106:	8d a5       	ldd	r24, Y+45	; 0x2d
    2108:	9e a5       	ldd	r25, Y+46	; 0x2e
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <LCD_sendCommand+0xc0>
    210e:	9e a7       	std	Y+46, r25	; 0x2e
    2110:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2112:	8f a5       	ldd	r24, Y+47	; 0x2f
    2114:	98 a9       	ldd	r25, Y+48	; 0x30
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	98 ab       	std	Y+48, r25	; 0x30
    211a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211c:	8f a5       	ldd	r24, Y+47	; 0x2f
    211e:	98 a9       	ldd	r25, Y+48	; 0x30
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	69 f7       	brne	.-38     	; 0x20fe <LCD_sendCommand+0xb4>
    2124:	14 c0       	rjmp	.+40     	; 0x214e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2126:	69 a9       	ldd	r22, Y+49	; 0x31
    2128:	7a a9       	ldd	r23, Y+50	; 0x32
    212a:	8b a9       	ldd	r24, Y+51	; 0x33
    212c:	9c a9       	ldd	r25, Y+52	; 0x34
    212e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	98 ab       	std	Y+48, r25	; 0x30
    2138:	8f a7       	std	Y+47, r24	; 0x2f
    213a:	8f a5       	ldd	r24, Y+47	; 0x2f
    213c:	98 a9       	ldd	r25, Y+48	; 0x30
    213e:	9c a7       	std	Y+44, r25	; 0x2c
    2140:	8b a7       	std	Y+43, r24	; 0x2b
    2142:	8b a5       	ldd	r24, Y+43	; 0x2b
    2144:	9c a5       	ldd	r25, Y+44	; 0x2c
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <LCD_sendCommand+0xfc>
    214a:	9c a7       	std	Y+44, r25	; 0x2c
    214c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	62 e0       	ldi	r22, 0x02	; 2
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 ab 0b 	call	0x1756	; 0x1756 <GPIO_writePin>
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	a0 e8       	ldi	r26, 0x80	; 128
    215e:	bf e3       	ldi	r27, 0x3F	; 63
    2160:	8f a3       	std	Y+39, r24	; 0x27
    2162:	98 a7       	std	Y+40, r25	; 0x28
    2164:	a9 a7       	std	Y+41, r26	; 0x29
    2166:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2168:	6f a1       	ldd	r22, Y+39	; 0x27
    216a:	78 a5       	ldd	r23, Y+40	; 0x28
    216c:	89 a5       	ldd	r24, Y+41	; 0x29
    216e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	4a ef       	ldi	r20, 0xFA	; 250
    2176:	54 e4       	ldi	r21, 0x44	; 68
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	8b a3       	std	Y+35, r24	; 0x23
    2182:	9c a3       	std	Y+36, r25	; 0x24
    2184:	ad a3       	std	Y+37, r26	; 0x25
    2186:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2188:	6b a1       	ldd	r22, Y+35	; 0x23
    218a:	7c a1       	ldd	r23, Y+36	; 0x24
    218c:	8d a1       	ldd	r24, Y+37	; 0x25
    218e:	9e a1       	ldd	r25, Y+38	; 0x26
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e8       	ldi	r20, 0x80	; 128
    2196:	5f e3       	ldi	r21, 0x3F	; 63
    2198:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    219c:	88 23       	and	r24, r24
    219e:	2c f4       	brge	.+10     	; 0x21aa <LCD_sendCommand+0x160>
		__ticks = 1;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	9a a3       	std	Y+34, r25	; 0x22
    21a6:	89 a3       	std	Y+33, r24	; 0x21
    21a8:	3f c0       	rjmp	.+126    	; 0x2228 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    21aa:	6b a1       	ldd	r22, Y+35	; 0x23
    21ac:	7c a1       	ldd	r23, Y+36	; 0x24
    21ae:	8d a1       	ldd	r24, Y+37	; 0x25
    21b0:	9e a1       	ldd	r25, Y+38	; 0x26
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	3f ef       	ldi	r19, 0xFF	; 255
    21b6:	4f e7       	ldi	r20, 0x7F	; 127
    21b8:	57 e4       	ldi	r21, 0x47	; 71
    21ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21be:	18 16       	cp	r1, r24
    21c0:	4c f5       	brge	.+82     	; 0x2214 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c2:	6f a1       	ldd	r22, Y+39	; 0x27
    21c4:	78 a5       	ldd	r23, Y+40	; 0x28
    21c6:	89 a5       	ldd	r24, Y+41	; 0x29
    21c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e2       	ldi	r20, 0x20	; 32
    21d0:	51 e4       	ldi	r21, 0x41	; 65
    21d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	9a a3       	std	Y+34, r25	; 0x22
    21e8:	89 a3       	std	Y+33, r24	; 0x21
    21ea:	0f c0       	rjmp	.+30     	; 0x220a <LCD_sendCommand+0x1c0>
    21ec:	88 ec       	ldi	r24, 0xC8	; 200
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	98 a3       	std	Y+32, r25	; 0x20
    21f2:	8f 8f       	std	Y+31, r24	; 0x1f
    21f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21f6:	98 a1       	ldd	r25, Y+32	; 0x20
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <LCD_sendCommand+0x1ae>
    21fc:	98 a3       	std	Y+32, r25	; 0x20
    21fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2200:	89 a1       	ldd	r24, Y+33	; 0x21
    2202:	9a a1       	ldd	r25, Y+34	; 0x22
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	9a a3       	std	Y+34, r25	; 0x22
    2208:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220a:	89 a1       	ldd	r24, Y+33	; 0x21
    220c:	9a a1       	ldd	r25, Y+34	; 0x22
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	69 f7       	brne	.-38     	; 0x21ec <LCD_sendCommand+0x1a2>
    2212:	14 c0       	rjmp	.+40     	; 0x223c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2214:	6b a1       	ldd	r22, Y+35	; 0x23
    2216:	7c a1       	ldd	r23, Y+36	; 0x24
    2218:	8d a1       	ldd	r24, Y+37	; 0x25
    221a:	9e a1       	ldd	r25, Y+38	; 0x26
    221c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9a a3       	std	Y+34, r25	; 0x22
    2226:	89 a3       	std	Y+33, r24	; 0x21
    2228:	89 a1       	ldd	r24, Y+33	; 0x21
    222a:	9a a1       	ldd	r25, Y+34	; 0x22
    222c:	9e 8f       	std	Y+30, r25	; 0x1e
    222e:	8d 8f       	std	Y+29, r24	; 0x1d
    2230:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2232:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <LCD_sendCommand+0x1ea>
    2238:	9e 8f       	std	Y+30, r25	; 0x1e
    223a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	69 ad       	ldd	r22, Y+57	; 0x39
    2240:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GPIO_writePort>
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a0 e8       	ldi	r26, 0x80	; 128
    224a:	bf e3       	ldi	r27, 0x3F	; 63
    224c:	89 8f       	std	Y+25, r24	; 0x19
    224e:	9a 8f       	std	Y+26, r25	; 0x1a
    2250:	ab 8f       	std	Y+27, r26	; 0x1b
    2252:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2254:	69 8d       	ldd	r22, Y+25	; 0x19
    2256:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    225a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	4a ef       	ldi	r20, 0xFA	; 250
    2262:	54 e4       	ldi	r21, 0x44	; 68
    2264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	8d 8b       	std	Y+21, r24	; 0x15
    226e:	9e 8b       	std	Y+22, r25	; 0x16
    2270:	af 8b       	std	Y+23, r26	; 0x17
    2272:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2274:	6d 89       	ldd	r22, Y+21	; 0x15
    2276:	7e 89       	ldd	r23, Y+22	; 0x16
    2278:	8f 89       	ldd	r24, Y+23	; 0x17
    227a:	98 8d       	ldd	r25, Y+24	; 0x18
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	5f e3       	ldi	r21, 0x3F	; 63
    2284:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2288:	88 23       	and	r24, r24
    228a:	2c f4       	brge	.+10     	; 0x2296 <LCD_sendCommand+0x24c>
		__ticks = 1;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	9c 8b       	std	Y+20, r25	; 0x14
    2292:	8b 8b       	std	Y+19, r24	; 0x13
    2294:	3f c0       	rjmp	.+126    	; 0x2314 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2296:	6d 89       	ldd	r22, Y+21	; 0x15
    2298:	7e 89       	ldd	r23, Y+22	; 0x16
    229a:	8f 89       	ldd	r24, Y+23	; 0x17
    229c:	98 8d       	ldd	r25, Y+24	; 0x18
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	3f ef       	ldi	r19, 0xFF	; 255
    22a2:	4f e7       	ldi	r20, 0x7F	; 127
    22a4:	57 e4       	ldi	r21, 0x47	; 71
    22a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22aa:	18 16       	cp	r1, r24
    22ac:	4c f5       	brge	.+82     	; 0x2300 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ae:	69 8d       	ldd	r22, Y+25	; 0x19
    22b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e2       	ldi	r20, 0x20	; 32
    22bc:	51 e4       	ldi	r21, 0x41	; 65
    22be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	9c 8b       	std	Y+20, r25	; 0x14
    22d4:	8b 8b       	std	Y+19, r24	; 0x13
    22d6:	0f c0       	rjmp	.+30     	; 0x22f6 <LCD_sendCommand+0x2ac>
    22d8:	88 ec       	ldi	r24, 0xC8	; 200
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	9a 8b       	std	Y+18, r25	; 0x12
    22de:	89 8b       	std	Y+17, r24	; 0x11
    22e0:	89 89       	ldd	r24, Y+17	; 0x11
    22e2:	9a 89       	ldd	r25, Y+18	; 0x12
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <LCD_sendCommand+0x29a>
    22e8:	9a 8b       	std	Y+18, r25	; 0x12
    22ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ec:	8b 89       	ldd	r24, Y+19	; 0x13
    22ee:	9c 89       	ldd	r25, Y+20	; 0x14
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	9c 8b       	std	Y+20, r25	; 0x14
    22f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f6:	8b 89       	ldd	r24, Y+19	; 0x13
    22f8:	9c 89       	ldd	r25, Y+20	; 0x14
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	69 f7       	brne	.-38     	; 0x22d8 <LCD_sendCommand+0x28e>
    22fe:	14 c0       	rjmp	.+40     	; 0x2328 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2300:	6d 89       	ldd	r22, Y+21	; 0x15
    2302:	7e 89       	ldd	r23, Y+22	; 0x16
    2304:	8f 89       	ldd	r24, Y+23	; 0x17
    2306:	98 8d       	ldd	r25, Y+24	; 0x18
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9c 8b       	std	Y+20, r25	; 0x14
    2312:	8b 8b       	std	Y+19, r24	; 0x13
    2314:	8b 89       	ldd	r24, Y+19	; 0x13
    2316:	9c 89       	ldd	r25, Y+20	; 0x14
    2318:	98 8b       	std	Y+16, r25	; 0x10
    231a:	8f 87       	std	Y+15, r24	; 0x0f
    231c:	8f 85       	ldd	r24, Y+15	; 0x0f
    231e:	98 89       	ldd	r25, Y+16	; 0x10
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <LCD_sendCommand+0x2d6>
    2324:	98 8b       	std	Y+16, r25	; 0x10
    2326:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	62 e0       	ldi	r22, 0x02	; 2
    232c:	40 e0       	ldi	r20, 0x00	; 0
    232e:	0e 94 ab 0b 	call	0x1756	; 0x1756 <GPIO_writePin>
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	a0 e8       	ldi	r26, 0x80	; 128
    2338:	bf e3       	ldi	r27, 0x3F	; 63
    233a:	8b 87       	std	Y+11, r24	; 0x0b
    233c:	9c 87       	std	Y+12, r25	; 0x0c
    233e:	ad 87       	std	Y+13, r26	; 0x0d
    2340:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2342:	6b 85       	ldd	r22, Y+11	; 0x0b
    2344:	7c 85       	ldd	r23, Y+12	; 0x0c
    2346:	8d 85       	ldd	r24, Y+13	; 0x0d
    2348:	9e 85       	ldd	r25, Y+14	; 0x0e
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	4a ef       	ldi	r20, 0xFA	; 250
    2350:	54 e4       	ldi	r21, 0x44	; 68
    2352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	8f 83       	std	Y+7, r24	; 0x07
    235c:	98 87       	std	Y+8, r25	; 0x08
    235e:	a9 87       	std	Y+9, r26	; 0x09
    2360:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2362:	6f 81       	ldd	r22, Y+7	; 0x07
    2364:	78 85       	ldd	r23, Y+8	; 0x08
    2366:	89 85       	ldd	r24, Y+9	; 0x09
    2368:	9a 85       	ldd	r25, Y+10	; 0x0a
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e8       	ldi	r20, 0x80	; 128
    2370:	5f e3       	ldi	r21, 0x3F	; 63
    2372:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2376:	88 23       	and	r24, r24
    2378:	2c f4       	brge	.+10     	; 0x2384 <LCD_sendCommand+0x33a>
		__ticks = 1;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	9e 83       	std	Y+6, r25	; 0x06
    2380:	8d 83       	std	Y+5, r24	; 0x05
    2382:	3f c0       	rjmp	.+126    	; 0x2402 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2384:	6f 81       	ldd	r22, Y+7	; 0x07
    2386:	78 85       	ldd	r23, Y+8	; 0x08
    2388:	89 85       	ldd	r24, Y+9	; 0x09
    238a:	9a 85       	ldd	r25, Y+10	; 0x0a
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	3f ef       	ldi	r19, 0xFF	; 255
    2390:	4f e7       	ldi	r20, 0x7F	; 127
    2392:	57 e4       	ldi	r21, 0x47	; 71
    2394:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2398:	18 16       	cp	r1, r24
    239a:	4c f5       	brge	.+82     	; 0x23ee <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239c:	6b 85       	ldd	r22, Y+11	; 0x0b
    239e:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e2       	ldi	r20, 0x20	; 32
    23aa:	51 e4       	ldi	r21, 0x41	; 65
    23ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	bc 01       	movw	r22, r24
    23b6:	cd 01       	movw	r24, r26
    23b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	9e 83       	std	Y+6, r25	; 0x06
    23c2:	8d 83       	std	Y+5, r24	; 0x05
    23c4:	0f c0       	rjmp	.+30     	; 0x23e4 <LCD_sendCommand+0x39a>
    23c6:	88 ec       	ldi	r24, 0xC8	; 200
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9c 83       	std	Y+4, r25	; 0x04
    23cc:	8b 83       	std	Y+3, r24	; 0x03
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <LCD_sendCommand+0x388>
    23d6:	9c 83       	std	Y+4, r25	; 0x04
    23d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23da:	8d 81       	ldd	r24, Y+5	; 0x05
    23dc:	9e 81       	ldd	r25, Y+6	; 0x06
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	9e 83       	std	Y+6, r25	; 0x06
    23e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e4:	8d 81       	ldd	r24, Y+5	; 0x05
    23e6:	9e 81       	ldd	r25, Y+6	; 0x06
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	69 f7       	brne	.-38     	; 0x23c6 <LCD_sendCommand+0x37c>
    23ec:	14 c0       	rjmp	.+40     	; 0x2416 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ee:	6f 81       	ldd	r22, Y+7	; 0x07
    23f0:	78 85       	ldd	r23, Y+8	; 0x08
    23f2:	89 85       	ldd	r24, Y+9	; 0x09
    23f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	9e 83       	std	Y+6, r25	; 0x06
    2400:	8d 83       	std	Y+5, r24	; 0x05
    2402:	8d 81       	ldd	r24, Y+5	; 0x05
    2404:	9e 81       	ldd	r25, Y+6	; 0x06
    2406:	9a 83       	std	Y+2, r25	; 0x02
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	9a 81       	ldd	r25, Y+2	; 0x02
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <LCD_sendCommand+0x3c4>
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2416:	e9 96       	adiw	r28, 0x39	; 57
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	cd bf       	out	0x3d, r28	; 61
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	e9 97       	sbiw	r28, 0x39	; 57
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	41 e0       	ldi	r20, 0x01	; 1
    2444:	0e 94 ab 0b 	call	0x1756	; 0x1756 <GPIO_writePin>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	a0 e8       	ldi	r26, 0x80	; 128
    244e:	bf e3       	ldi	r27, 0x3F	; 63
    2450:	8d ab       	std	Y+53, r24	; 0x35
    2452:	9e ab       	std	Y+54, r25	; 0x36
    2454:	af ab       	std	Y+55, r26	; 0x37
    2456:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2458:	6d a9       	ldd	r22, Y+53	; 0x35
    245a:	7e a9       	ldd	r23, Y+54	; 0x36
    245c:	8f a9       	ldd	r24, Y+55	; 0x37
    245e:	98 ad       	ldd	r25, Y+56	; 0x38
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	4a ef       	ldi	r20, 0xFA	; 250
    2466:	54 e4       	ldi	r21, 0x44	; 68
    2468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	89 ab       	std	Y+49, r24	; 0x31
    2472:	9a ab       	std	Y+50, r25	; 0x32
    2474:	ab ab       	std	Y+51, r26	; 0x33
    2476:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2478:	69 a9       	ldd	r22, Y+49	; 0x31
    247a:	7a a9       	ldd	r23, Y+50	; 0x32
    247c:	8b a9       	ldd	r24, Y+51	; 0x33
    247e:	9c a9       	ldd	r25, Y+52	; 0x34
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e8       	ldi	r20, 0x80	; 128
    2486:	5f e3       	ldi	r21, 0x3F	; 63
    2488:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    248c:	88 23       	and	r24, r24
    248e:	2c f4       	brge	.+10     	; 0x249a <LCD_displayCharacter+0x72>
		__ticks = 1;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	98 ab       	std	Y+48, r25	; 0x30
    2496:	8f a7       	std	Y+47, r24	; 0x2f
    2498:	3f c0       	rjmp	.+126    	; 0x2518 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    249a:	69 a9       	ldd	r22, Y+49	; 0x31
    249c:	7a a9       	ldd	r23, Y+50	; 0x32
    249e:	8b a9       	ldd	r24, Y+51	; 0x33
    24a0:	9c a9       	ldd	r25, Y+52	; 0x34
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	3f ef       	ldi	r19, 0xFF	; 255
    24a6:	4f e7       	ldi	r20, 0x7F	; 127
    24a8:	57 e4       	ldi	r21, 0x47	; 71
    24aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ae:	18 16       	cp	r1, r24
    24b0:	4c f5       	brge	.+82     	; 0x2504 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b2:	6d a9       	ldd	r22, Y+53	; 0x35
    24b4:	7e a9       	ldd	r23, Y+54	; 0x36
    24b6:	8f a9       	ldd	r24, Y+55	; 0x37
    24b8:	98 ad       	ldd	r25, Y+56	; 0x38
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e2       	ldi	r20, 0x20	; 32
    24c0:	51 e4       	ldi	r21, 0x41	; 65
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	98 ab       	std	Y+48, r25	; 0x30
    24d8:	8f a7       	std	Y+47, r24	; 0x2f
    24da:	0f c0       	rjmp	.+30     	; 0x24fa <LCD_displayCharacter+0xd2>
    24dc:	88 ec       	ldi	r24, 0xC8	; 200
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9e a7       	std	Y+46, r25	; 0x2e
    24e2:	8d a7       	std	Y+45, r24	; 0x2d
    24e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    24e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <LCD_displayCharacter+0xc0>
    24ec:	9e a7       	std	Y+46, r25	; 0x2e
    24ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f2:	98 a9       	ldd	r25, Y+48	; 0x30
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	98 ab       	std	Y+48, r25	; 0x30
    24f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    24fc:	98 a9       	ldd	r25, Y+48	; 0x30
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	69 f7       	brne	.-38     	; 0x24dc <LCD_displayCharacter+0xb4>
    2502:	14 c0       	rjmp	.+40     	; 0x252c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2504:	69 a9       	ldd	r22, Y+49	; 0x31
    2506:	7a a9       	ldd	r23, Y+50	; 0x32
    2508:	8b a9       	ldd	r24, Y+51	; 0x33
    250a:	9c a9       	ldd	r25, Y+52	; 0x34
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	98 ab       	std	Y+48, r25	; 0x30
    2516:	8f a7       	std	Y+47, r24	; 0x2f
    2518:	8f a5       	ldd	r24, Y+47	; 0x2f
    251a:	98 a9       	ldd	r25, Y+48	; 0x30
    251c:	9c a7       	std	Y+44, r25	; 0x2c
    251e:	8b a7       	std	Y+43, r24	; 0x2b
    2520:	8b a5       	ldd	r24, Y+43	; 0x2b
    2522:	9c a5       	ldd	r25, Y+44	; 0x2c
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <LCD_displayCharacter+0xfc>
    2528:	9c a7       	std	Y+44, r25	; 0x2c
    252a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	62 e0       	ldi	r22, 0x02	; 2
    2530:	41 e0       	ldi	r20, 0x01	; 1
    2532:	0e 94 ab 0b 	call	0x1756	; 0x1756 <GPIO_writePin>
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	a0 e8       	ldi	r26, 0x80	; 128
    253c:	bf e3       	ldi	r27, 0x3F	; 63
    253e:	8f a3       	std	Y+39, r24	; 0x27
    2540:	98 a7       	std	Y+40, r25	; 0x28
    2542:	a9 a7       	std	Y+41, r26	; 0x29
    2544:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2546:	6f a1       	ldd	r22, Y+39	; 0x27
    2548:	78 a5       	ldd	r23, Y+40	; 0x28
    254a:	89 a5       	ldd	r24, Y+41	; 0x29
    254c:	9a a5       	ldd	r25, Y+42	; 0x2a
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4a ef       	ldi	r20, 0xFA	; 250
    2554:	54 e4       	ldi	r21, 0x44	; 68
    2556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	8b a3       	std	Y+35, r24	; 0x23
    2560:	9c a3       	std	Y+36, r25	; 0x24
    2562:	ad a3       	std	Y+37, r26	; 0x25
    2564:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2566:	6b a1       	ldd	r22, Y+35	; 0x23
    2568:	7c a1       	ldd	r23, Y+36	; 0x24
    256a:	8d a1       	ldd	r24, Y+37	; 0x25
    256c:	9e a1       	ldd	r25, Y+38	; 0x26
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e8       	ldi	r20, 0x80	; 128
    2574:	5f e3       	ldi	r21, 0x3F	; 63
    2576:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257a:	88 23       	and	r24, r24
    257c:	2c f4       	brge	.+10     	; 0x2588 <LCD_displayCharacter+0x160>
		__ticks = 1;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	9a a3       	std	Y+34, r25	; 0x22
    2584:	89 a3       	std	Y+33, r24	; 0x21
    2586:	3f c0       	rjmp	.+126    	; 0x2606 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2588:	6b a1       	ldd	r22, Y+35	; 0x23
    258a:	7c a1       	ldd	r23, Y+36	; 0x24
    258c:	8d a1       	ldd	r24, Y+37	; 0x25
    258e:	9e a1       	ldd	r25, Y+38	; 0x26
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	3f ef       	ldi	r19, 0xFF	; 255
    2594:	4f e7       	ldi	r20, 0x7F	; 127
    2596:	57 e4       	ldi	r21, 0x47	; 71
    2598:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    259c:	18 16       	cp	r1, r24
    259e:	4c f5       	brge	.+82     	; 0x25f2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a0:	6f a1       	ldd	r22, Y+39	; 0x27
    25a2:	78 a5       	ldd	r23, Y+40	; 0x28
    25a4:	89 a5       	ldd	r24, Y+41	; 0x29
    25a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e2       	ldi	r20, 0x20	; 32
    25ae:	51 e4       	ldi	r21, 0x41	; 65
    25b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	bc 01       	movw	r22, r24
    25ba:	cd 01       	movw	r24, r26
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	9a a3       	std	Y+34, r25	; 0x22
    25c6:	89 a3       	std	Y+33, r24	; 0x21
    25c8:	0f c0       	rjmp	.+30     	; 0x25e8 <LCD_displayCharacter+0x1c0>
    25ca:	88 ec       	ldi	r24, 0xC8	; 200
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	98 a3       	std	Y+32, r25	; 0x20
    25d0:	8f 8f       	std	Y+31, r24	; 0x1f
    25d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25d4:	98 a1       	ldd	r25, Y+32	; 0x20
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <LCD_displayCharacter+0x1ae>
    25da:	98 a3       	std	Y+32, r25	; 0x20
    25dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25de:	89 a1       	ldd	r24, Y+33	; 0x21
    25e0:	9a a1       	ldd	r25, Y+34	; 0x22
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	9a a3       	std	Y+34, r25	; 0x22
    25e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e8:	89 a1       	ldd	r24, Y+33	; 0x21
    25ea:	9a a1       	ldd	r25, Y+34	; 0x22
    25ec:	00 97       	sbiw	r24, 0x00	; 0
    25ee:	69 f7       	brne	.-38     	; 0x25ca <LCD_displayCharacter+0x1a2>
    25f0:	14 c0       	rjmp	.+40     	; 0x261a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f2:	6b a1       	ldd	r22, Y+35	; 0x23
    25f4:	7c a1       	ldd	r23, Y+36	; 0x24
    25f6:	8d a1       	ldd	r24, Y+37	; 0x25
    25f8:	9e a1       	ldd	r25, Y+38	; 0x26
    25fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	9a a3       	std	Y+34, r25	; 0x22
    2604:	89 a3       	std	Y+33, r24	; 0x21
    2606:	89 a1       	ldd	r24, Y+33	; 0x21
    2608:	9a a1       	ldd	r25, Y+34	; 0x22
    260a:	9e 8f       	std	Y+30, r25	; 0x1e
    260c:	8d 8f       	std	Y+29, r24	; 0x1d
    260e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2610:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	f1 f7       	brne	.-4      	; 0x2612 <LCD_displayCharacter+0x1ea>
    2616:	9e 8f       	std	Y+30, r25	; 0x1e
    2618:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	69 ad       	ldd	r22, Y+57	; 0x39
    261e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <GPIO_writePort>
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	a0 e8       	ldi	r26, 0x80	; 128
    2628:	bf e3       	ldi	r27, 0x3F	; 63
    262a:	89 8f       	std	Y+25, r24	; 0x19
    262c:	9a 8f       	std	Y+26, r25	; 0x1a
    262e:	ab 8f       	std	Y+27, r26	; 0x1b
    2630:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2632:	69 8d       	ldd	r22, Y+25	; 0x19
    2634:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2636:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2638:	9c 8d       	ldd	r25, Y+28	; 0x1c
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	4a ef       	ldi	r20, 0xFA	; 250
    2640:	54 e4       	ldi	r21, 0x44	; 68
    2642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	8d 8b       	std	Y+21, r24	; 0x15
    264c:	9e 8b       	std	Y+22, r25	; 0x16
    264e:	af 8b       	std	Y+23, r26	; 0x17
    2650:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2652:	6d 89       	ldd	r22, Y+21	; 0x15
    2654:	7e 89       	ldd	r23, Y+22	; 0x16
    2656:	8f 89       	ldd	r24, Y+23	; 0x17
    2658:	98 8d       	ldd	r25, Y+24	; 0x18
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e8       	ldi	r20, 0x80	; 128
    2660:	5f e3       	ldi	r21, 0x3F	; 63
    2662:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2666:	88 23       	and	r24, r24
    2668:	2c f4       	brge	.+10     	; 0x2674 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9c 8b       	std	Y+20, r25	; 0x14
    2670:	8b 8b       	std	Y+19, r24	; 0x13
    2672:	3f c0       	rjmp	.+126    	; 0x26f2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2674:	6d 89       	ldd	r22, Y+21	; 0x15
    2676:	7e 89       	ldd	r23, Y+22	; 0x16
    2678:	8f 89       	ldd	r24, Y+23	; 0x17
    267a:	98 8d       	ldd	r25, Y+24	; 0x18
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	3f ef       	ldi	r19, 0xFF	; 255
    2680:	4f e7       	ldi	r20, 0x7F	; 127
    2682:	57 e4       	ldi	r21, 0x47	; 71
    2684:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2688:	18 16       	cp	r1, r24
    268a:	4c f5       	brge	.+82     	; 0x26de <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268c:	69 8d       	ldd	r22, Y+25	; 0x19
    268e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2690:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2692:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e2       	ldi	r20, 0x20	; 32
    269a:	51 e4       	ldi	r21, 0x41	; 65
    269c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	9c 8b       	std	Y+20, r25	; 0x14
    26b2:	8b 8b       	std	Y+19, r24	; 0x13
    26b4:	0f c0       	rjmp	.+30     	; 0x26d4 <LCD_displayCharacter+0x2ac>
    26b6:	88 ec       	ldi	r24, 0xC8	; 200
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9a 8b       	std	Y+18, r25	; 0x12
    26bc:	89 8b       	std	Y+17, r24	; 0x11
    26be:	89 89       	ldd	r24, Y+17	; 0x11
    26c0:	9a 89       	ldd	r25, Y+18	; 0x12
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <LCD_displayCharacter+0x29a>
    26c6:	9a 8b       	std	Y+18, r25	; 0x12
    26c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ca:	8b 89       	ldd	r24, Y+19	; 0x13
    26cc:	9c 89       	ldd	r25, Y+20	; 0x14
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	9c 8b       	std	Y+20, r25	; 0x14
    26d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d4:	8b 89       	ldd	r24, Y+19	; 0x13
    26d6:	9c 89       	ldd	r25, Y+20	; 0x14
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	69 f7       	brne	.-38     	; 0x26b6 <LCD_displayCharacter+0x28e>
    26dc:	14 c0       	rjmp	.+40     	; 0x2706 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26de:	6d 89       	ldd	r22, Y+21	; 0x15
    26e0:	7e 89       	ldd	r23, Y+22	; 0x16
    26e2:	8f 89       	ldd	r24, Y+23	; 0x17
    26e4:	98 8d       	ldd	r25, Y+24	; 0x18
    26e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	9c 8b       	std	Y+20, r25	; 0x14
    26f0:	8b 8b       	std	Y+19, r24	; 0x13
    26f2:	8b 89       	ldd	r24, Y+19	; 0x13
    26f4:	9c 89       	ldd	r25, Y+20	; 0x14
    26f6:	98 8b       	std	Y+16, r25	; 0x10
    26f8:	8f 87       	std	Y+15, r24	; 0x0f
    26fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    26fc:	98 89       	ldd	r25, Y+16	; 0x10
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <LCD_displayCharacter+0x2d6>
    2702:	98 8b       	std	Y+16, r25	; 0x10
    2704:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	62 e0       	ldi	r22, 0x02	; 2
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	0e 94 ab 0b 	call	0x1756	; 0x1756 <GPIO_writePin>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	a0 e8       	ldi	r26, 0x80	; 128
    2716:	bf e3       	ldi	r27, 0x3F	; 63
    2718:	8b 87       	std	Y+11, r24	; 0x0b
    271a:	9c 87       	std	Y+12, r25	; 0x0c
    271c:	ad 87       	std	Y+13, r26	; 0x0d
    271e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2720:	6b 85       	ldd	r22, Y+11	; 0x0b
    2722:	7c 85       	ldd	r23, Y+12	; 0x0c
    2724:	8d 85       	ldd	r24, Y+13	; 0x0d
    2726:	9e 85       	ldd	r25, Y+14	; 0x0e
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4a ef       	ldi	r20, 0xFA	; 250
    272e:	54 e4       	ldi	r21, 0x44	; 68
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8f 83       	std	Y+7, r24	; 0x07
    273a:	98 87       	std	Y+8, r25	; 0x08
    273c:	a9 87       	std	Y+9, r26	; 0x09
    273e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	2c f4       	brge	.+10     	; 0x2762 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9e 83       	std	Y+6, r25	; 0x06
    275e:	8d 83       	std	Y+5, r24	; 0x05
    2760:	3f c0       	rjmp	.+126    	; 0x27e0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2762:	6f 81       	ldd	r22, Y+7	; 0x07
    2764:	78 85       	ldd	r23, Y+8	; 0x08
    2766:	89 85       	ldd	r24, Y+9	; 0x09
    2768:	9a 85       	ldd	r25, Y+10	; 0x0a
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	3f ef       	ldi	r19, 0xFF	; 255
    276e:	4f e7       	ldi	r20, 0x7F	; 127
    2770:	57 e4       	ldi	r21, 0x47	; 71
    2772:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2776:	18 16       	cp	r1, r24
    2778:	4c f5       	brge	.+82     	; 0x27cc <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277a:	6b 85       	ldd	r22, Y+11	; 0x0b
    277c:	7c 85       	ldd	r23, Y+12	; 0x0c
    277e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2780:	9e 85       	ldd	r25, Y+14	; 0x0e
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9e 83       	std	Y+6, r25	; 0x06
    27a0:	8d 83       	std	Y+5, r24	; 0x05
    27a2:	0f c0       	rjmp	.+30     	; 0x27c2 <LCD_displayCharacter+0x39a>
    27a4:	88 ec       	ldi	r24, 0xC8	; 200
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9c 83       	std	Y+4, r25	; 0x04
    27aa:	8b 83       	std	Y+3, r24	; 0x03
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	9c 81       	ldd	r25, Y+4	; 0x04
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <LCD_displayCharacter+0x388>
    27b4:	9c 83       	std	Y+4, r25	; 0x04
    27b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ba:	9e 81       	ldd	r25, Y+6	; 0x06
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	9e 83       	std	Y+6, r25	; 0x06
    27c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c2:	8d 81       	ldd	r24, Y+5	; 0x05
    27c4:	9e 81       	ldd	r25, Y+6	; 0x06
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	69 f7       	brne	.-38     	; 0x27a4 <LCD_displayCharacter+0x37c>
    27ca:	14 c0       	rjmp	.+40     	; 0x27f4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27cc:	6f 81       	ldd	r22, Y+7	; 0x07
    27ce:	78 85       	ldd	r23, Y+8	; 0x08
    27d0:	89 85       	ldd	r24, Y+9	; 0x09
    27d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9e 83       	std	Y+6, r25	; 0x06
    27de:	8d 83       	std	Y+5, r24	; 0x05
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	9a 83       	std	Y+2, r25	; 0x02
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	9a 81       	ldd	r25, Y+2	; 0x02
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <LCD_displayCharacter+0x3c4>
    27f0:	9a 83       	std	Y+2, r25	; 0x02
    27f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    27f4:	e9 96       	adiw	r28, 0x39	; 57
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	00 d0       	rcall	.+0      	; 0x280c <LCD_displayString+0x6>
    280c:	0f 92       	push	r0
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	9b 83       	std	Y+3, r25	; 0x03
    2814:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2816:	19 82       	std	Y+1, r1	; 0x01
    2818:	0e c0       	rjmp	.+28     	; 0x2836 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	28 2f       	mov	r18, r24
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	9b 81       	ldd	r25, Y+3	; 0x03
    2824:	fc 01       	movw	r30, r24
    2826:	e2 0f       	add	r30, r18
    2828:	f3 1f       	adc	r31, r19
    282a:	80 81       	ld	r24, Z
    282c:	0e 94 14 12 	call	0x2428	; 0x2428 <LCD_displayCharacter>
		i++;
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	8f 5f       	subi	r24, 0xFF	; 255
    2834:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	28 2f       	mov	r18, r24
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
    283e:	9b 81       	ldd	r25, Y+3	; 0x03
    2840:	fc 01       	movw	r30, r24
    2842:	e2 0f       	add	r30, r18
    2844:	f3 1f       	adc	r31, r19
    2846:	80 81       	ld	r24, Z
    2848:	88 23       	and	r24, r24
    284a:	39 f7       	brne	.-50     	; 0x281a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	00 d0       	rcall	.+0      	; 0x285e <LCD_moveCursor+0x6>
    285e:	00 d0       	rcall	.+0      	; 0x2860 <LCD_moveCursor+0x8>
    2860:	0f 92       	push	r0
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	8a 83       	std	Y+2, r24	; 0x02
    2868:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    286a:	8a 81       	ldd	r24, Y+2	; 0x02
    286c:	28 2f       	mov	r18, r24
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	3d 83       	std	Y+5, r19	; 0x05
    2872:	2c 83       	std	Y+4, r18	; 0x04
    2874:	8c 81       	ldd	r24, Y+4	; 0x04
    2876:	9d 81       	ldd	r25, Y+5	; 0x05
    2878:	81 30       	cpi	r24, 0x01	; 1
    287a:	91 05       	cpc	r25, r1
    287c:	c1 f0       	breq	.+48     	; 0x28ae <LCD_moveCursor+0x56>
    287e:	2c 81       	ldd	r18, Y+4	; 0x04
    2880:	3d 81       	ldd	r19, Y+5	; 0x05
    2882:	22 30       	cpi	r18, 0x02	; 2
    2884:	31 05       	cpc	r19, r1
    2886:	2c f4       	brge	.+10     	; 0x2892 <LCD_moveCursor+0x3a>
    2888:	8c 81       	ldd	r24, Y+4	; 0x04
    288a:	9d 81       	ldd	r25, Y+5	; 0x05
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	61 f0       	breq	.+24     	; 0x28a8 <LCD_moveCursor+0x50>
    2890:	19 c0       	rjmp	.+50     	; 0x28c4 <LCD_moveCursor+0x6c>
    2892:	2c 81       	ldd	r18, Y+4	; 0x04
    2894:	3d 81       	ldd	r19, Y+5	; 0x05
    2896:	22 30       	cpi	r18, 0x02	; 2
    2898:	31 05       	cpc	r19, r1
    289a:	69 f0       	breq	.+26     	; 0x28b6 <LCD_moveCursor+0x5e>
    289c:	8c 81       	ldd	r24, Y+4	; 0x04
    289e:	9d 81       	ldd	r25, Y+5	; 0x05
    28a0:	83 30       	cpi	r24, 0x03	; 3
    28a2:	91 05       	cpc	r25, r1
    28a4:	61 f0       	breq	.+24     	; 0x28be <LCD_moveCursor+0x66>
    28a6:	0e c0       	rjmp	.+28     	; 0x28c4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    28a8:	8b 81       	ldd	r24, Y+3	; 0x03
    28aa:	89 83       	std	Y+1, r24	; 0x01
    28ac:	0b c0       	rjmp	.+22     	; 0x28c4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	80 5c       	subi	r24, 0xC0	; 192
    28b2:	89 83       	std	Y+1, r24	; 0x01
    28b4:	07 c0       	rjmp	.+14     	; 0x28c4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	80 5f       	subi	r24, 0xF0	; 240
    28ba:	89 83       	std	Y+1, r24	; 0x01
    28bc:	03 c0       	rjmp	.+6      	; 0x28c4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	80 5b       	subi	r24, 0xB0	; 176
    28c2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	80 68       	ori	r24, 0x80	; 128
    28c8:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_sendCommand>
}
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	cf 91       	pop	r28
    28d8:	df 91       	pop	r29
    28da:	08 95       	ret

000028dc <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    28dc:	df 93       	push	r29
    28de:	cf 93       	push	r28
    28e0:	00 d0       	rcall	.+0      	; 0x28e2 <LCD_displayStringRowColumn+0x6>
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <LCD_displayStringRowColumn+0x8>
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	89 83       	std	Y+1, r24	; 0x01
    28ea:	6a 83       	std	Y+2, r22	; 0x02
    28ec:	5c 83       	std	Y+4, r21	; 0x04
    28ee:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	6a 81       	ldd	r22, Y+2	; 0x02
    28f4:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	9c 81       	ldd	r25, Y+4	; 0x04
    28fc:	0e 94 03 14 	call	0x2806	; 0x2806 <LCD_displayString>
}
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	62 97       	sbiw	r28, 0x12	; 18
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	9a 8b       	std	Y+18, r25	; 0x12
    2924:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2926:	89 89       	ldd	r24, Y+17	; 0x11
    2928:	9a 89       	ldd	r25, Y+18	; 0x12
    292a:	9e 01       	movw	r18, r28
    292c:	2f 5f       	subi	r18, 0xFF	; 255
    292e:	3f 4f       	sbci	r19, 0xFF	; 255
    2930:	b9 01       	movw	r22, r18
    2932:	4a e0       	ldi	r20, 0x0A	; 10
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	0e 94 92 16 	call	0x2d24	; 0x2d24 <itoa>
   LCD_displayString(buff); /* Display the string */
    293a:	ce 01       	movw	r24, r28
    293c:	01 96       	adiw	r24, 0x01	; 1
    293e:	0e 94 03 14 	call	0x2806	; 0x2806 <LCD_displayString>
}
    2942:	62 96       	adiw	r28, 0x12	; 18
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_sendCommand>
}
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <__vector_7>:
#include <avr/io.h>

static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
    2968:	1f 92       	push	r1
    296a:	0f 92       	push	r0
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	0f 92       	push	r0
    2970:	11 24       	eor	r1, r1
    2972:	2f 93       	push	r18
    2974:	3f 93       	push	r19
    2976:	4f 93       	push	r20
    2978:	5f 93       	push	r21
    297a:	6f 93       	push	r22
    297c:	7f 93       	push	r23
    297e:	8f 93       	push	r24
    2980:	9f 93       	push	r25
    2982:	af 93       	push	r26
    2984:	bf 93       	push	r27
    2986:	ef 93       	push	r30
    2988:	ff 93       	push	r31
    298a:	df 93       	push	r29
    298c:	cf 93       	push	r28
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2992:	80 91 e2 00 	lds	r24, 0x00E2
    2996:	90 91 e3 00 	lds	r25, 0x00E3
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	29 f0       	breq	.+10     	; 0x29a8 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    299e:	e0 91 e2 00 	lds	r30, 0x00E2
    29a2:	f0 91 e3 00 	lds	r31, 0x00E3
    29a6:	09 95       	icall
	}
}
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	ff 91       	pop	r31
    29ae:	ef 91       	pop	r30
    29b0:	bf 91       	pop	r27
    29b2:	af 91       	pop	r26
    29b4:	9f 91       	pop	r25
    29b6:	8f 91       	pop	r24
    29b8:	7f 91       	pop	r23
    29ba:	6f 91       	pop	r22
    29bc:	5f 91       	pop	r21
    29be:	4f 91       	pop	r20
    29c0:	3f 91       	pop	r19
    29c2:	2f 91       	pop	r18
    29c4:	0f 90       	pop	r0
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	0f 90       	pop	r0
    29ca:	1f 90       	pop	r1
    29cc:	18 95       	reti

000029ce <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    29ce:	1f 92       	push	r1
    29d0:	0f 92       	push	r0
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	0f 92       	push	r0
    29d6:	11 24       	eor	r1, r1
    29d8:	2f 93       	push	r18
    29da:	3f 93       	push	r19
    29dc:	4f 93       	push	r20
    29de:	5f 93       	push	r21
    29e0:	6f 93       	push	r22
    29e2:	7f 93       	push	r23
    29e4:	8f 93       	push	r24
    29e6:	9f 93       	push	r25
    29e8:	af 93       	push	r26
    29ea:	bf 93       	push	r27
    29ec:	ef 93       	push	r30
    29ee:	ff 93       	push	r31
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    29f8:	80 91 e2 00 	lds	r24, 0x00E2
    29fc:	90 91 e3 00 	lds	r25, 0x00E3
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	29 f0       	breq	.+10     	; 0x2a0e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2a04:	e0 91 e2 00 	lds	r30, 0x00E2
    2a08:	f0 91 e3 00 	lds	r31, 0x00E3
    2a0c:	09 95       	icall
	}
}
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	ff 91       	pop	r31
    2a14:	ef 91       	pop	r30
    2a16:	bf 91       	pop	r27
    2a18:	af 91       	pop	r26
    2a1a:	9f 91       	pop	r25
    2a1c:	8f 91       	pop	r24
    2a1e:	7f 91       	pop	r23
    2a20:	6f 91       	pop	r22
    2a22:	5f 91       	pop	r21
    2a24:	4f 91       	pop	r20
    2a26:	3f 91       	pop	r19
    2a28:	2f 91       	pop	r18
    2a2a:	0f 90       	pop	r0
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	0f 90       	pop	r0
    2a30:	1f 90       	pop	r1
    2a32:	18 95       	reti

00002a34 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2a34:	df 93       	push	r29
    2a36:	cf 93       	push	r28
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <Timer1_init+0x6>
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	9a 83       	std	Y+2, r25	; 0x02
    2a40:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A);							// not PWM mode
    2a42:	ef e4       	ldi	r30, 0x4F	; 79
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	88 e0       	ldi	r24, 0x08	; 8
    2a48:	80 83       	st	Z, r24
	TCCR1B |= (Config_Ptr->prescaler<<CS10) | (Config_Ptr->mode<<WGM12);
    2a4a:	ae e4       	ldi	r26, 0x4E	; 78
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	ee e4       	ldi	r30, 0x4E	; 78
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	28 2f       	mov	r18, r24
    2a56:	e9 81       	ldd	r30, Y+1	; 0x01
    2a58:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5a:	84 81       	ldd	r24, Z+4	; 0x04
    2a5c:	38 2f       	mov	r19, r24
    2a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a60:	fa 81       	ldd	r31, Y+2	; 0x02
    2a62:	85 81       	ldd	r24, Z+5	; 0x05
    2a64:	88 2f       	mov	r24, r24
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	88 0f       	add	r24, r24
    2a6e:	99 1f       	adc	r25, r25
    2a70:	88 0f       	add	r24, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	83 2b       	or	r24, r19
    2a76:	82 2b       	or	r24, r18
    2a78:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;										// start point = 0
    2a7a:	ac e4       	ldi	r26, 0x4C	; 76
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a80:	fa 81       	ldd	r31, Y+2	; 0x02
    2a82:	80 81       	ld	r24, Z
    2a84:	91 81       	ldd	r25, Z+1	; 0x01
    2a86:	11 96       	adiw	r26, 0x01	; 1
    2a88:	9c 93       	st	X, r25
    2a8a:	8e 93       	st	-X, r24
	if(Config_Ptr->mode==1)
    2a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a90:	85 81       	ldd	r24, Z+5	; 0x05
    2a92:	81 30       	cpi	r24, 0x01	; 1
    2a94:	51 f4       	brne	.+20     	; 0x2aaa <Timer1_init+0x76>
	{
		OCR1A = Config_Ptr->compare_value;									// catch point
    2a96:	ea e4       	ldi	r30, 0x4A	; 74
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	a9 81       	ldd	r26, Y+1	; 0x01
    2a9c:	ba 81       	ldd	r27, Y+2	; 0x02
    2a9e:	12 96       	adiw	r26, 0x02	; 2
    2aa0:	8d 91       	ld	r24, X+
    2aa2:	9c 91       	ld	r25, X
    2aa4:	13 97       	sbiw	r26, 0x03	; 3
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	80 83       	st	Z, r24
	}
	TIMSK |= (1<<OCIE1A);							// enable interrupt
    2aaa:	a9 e5       	ldi	r26, 0x59	; 89
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	e9 e5       	ldi	r30, 0x59	; 89
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	80 61       	ori	r24, 0x10	; 16
    2ab6:	8c 93       	st	X, r24
}
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <Timer1_deInit>:

void Timer1_deInit(void)
{
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(0x07);
    2aca:	ae e4       	ldi	r26, 0x4E	; 78
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	ee e4       	ldi	r30, 0x4E	; 78
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	88 7f       	andi	r24, 0xF8	; 248
    2ad6:	8c 93       	st	X, r24
}
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	08 95       	ret

00002ade <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2ade:	df 93       	push	r29
    2ae0:	cf 93       	push	r28
    2ae2:	00 d0       	rcall	.+0      	; 0x2ae4 <Timer1_setCallBack+0x6>
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	9a 83       	std	Y+2, r25	; 0x02
    2aea:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	9a 81       	ldd	r25, Y+2	; 0x02
    2af0:	90 93 e3 00 	sts	0x00E3, r25
    2af4:	80 93 e2 00 	sts	0x00E2, r24
}
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <UART_init+0x6>
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	9a 83       	std	Y+2, r25	; 0x02
    2b0e:	89 83       	std	Y+1, r24	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2b10:	eb e2       	ldi	r30, 0x2B	; 43
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	82 e0       	ldi	r24, 0x02	; 2
    2b16:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2b18:	ea e2       	ldi	r30, 0x2A	; 42
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	88 e1       	ldi	r24, 0x18	; 24
    2b1e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr->bit_data<<UCSZ0) | (Config_Ptr->stop_bit<<USBS) | (Config_Ptr->parity<<UPM0);
    2b20:	a0 e4       	ldi	r26, 0x40	; 64
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	e9 81       	ldd	r30, Y+1	; 0x01
    2b26:	fa 81       	ldd	r31, Y+2	; 0x02
    2b28:	80 81       	ld	r24, Z
    2b2a:	88 2f       	mov	r24, r24
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	88 0f       	add	r24, r24
    2b30:	99 1f       	adc	r25, r25
    2b32:	28 2f       	mov	r18, r24
    2b34:	20 68       	ori	r18, 0x80	; 128
    2b36:	e9 81       	ldd	r30, Y+1	; 0x01
    2b38:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3a:	82 81       	ldd	r24, Z+2	; 0x02
    2b3c:	88 2f       	mov	r24, r24
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	88 0f       	add	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	28 2b       	or	r18, r24
    2b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b50:	fa 81       	ldd	r31, Y+2	; 0x02
    2b52:	81 81       	ldd	r24, Z+1	; 0x01
    2b54:	88 2f       	mov	r24, r24
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	82 95       	swap	r24
    2b5a:	92 95       	swap	r25
    2b5c:	90 7f       	andi	r25, 0xF0	; 240
    2b5e:	98 27       	eor	r25, r24
    2b60:	80 7f       	andi	r24, 0xF0	; 240
    2b62:	98 27       	eor	r25, r24
    2b64:	82 2b       	or	r24, r18
    2b66:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (Config_Ptr->baud_rate)>>8;
    2b68:	a0 e4       	ldi	r26, 0x40	; 64
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b70:	83 81       	ldd	r24, Z+3	; 0x03
    2b72:	94 81       	ldd	r25, Z+4	; 0x04
    2b74:	89 2f       	mov	r24, r25
    2b76:	99 27       	eor	r25, r25
    2b78:	8c 93       	st	X, r24
	UBRRL = Config_Ptr->baud_rate;
    2b7a:	a9 e2       	ldi	r26, 0x29	; 41
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b80:	fa 81       	ldd	r31, Y+2	; 0x02
    2b82:	83 81       	ldd	r24, Z+3	; 0x03
    2b84:	94 81       	ldd	r25, Z+4	; 0x04
    2b86:	8c 93       	st	X, r24
}
    2b88:	0f 90       	pop	r0
    2b8a:	0f 90       	pop	r0
    2b8c:	cf 91       	pop	r28
    2b8e:	df 91       	pop	r29
    2b90:	08 95       	ret

00002b92 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2b92:	df 93       	push	r29
    2b94:	cf 93       	push	r28
    2b96:	0f 92       	push	r0
    2b98:	cd b7       	in	r28, 0x3d	; 61
    2b9a:	de b7       	in	r29, 0x3e	; 62
    2b9c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b9e:	eb e2       	ldi	r30, 0x2B	; 43
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	88 2f       	mov	r24, r24
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	80 72       	andi	r24, 0x20	; 32
    2baa:	90 70       	andi	r25, 0x00	; 0
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	b9 f3       	breq	.-18     	; 0x2b9e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2bb0:	ec e2       	ldi	r30, 0x2C	; 44
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2bb8:	0f 90       	pop	r0
    2bba:	cf 91       	pop	r28
    2bbc:	df 91       	pop	r29
    2bbe:	08 95       	ret

00002bc0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2bc8:	eb e2       	ldi	r30, 0x2B	; 43
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	88 23       	and	r24, r24
    2bd0:	dc f7       	brge	.-10     	; 0x2bc8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2bd2:	ec e2       	ldi	r30, 0x2C	; 44
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
}
    2bd8:	cf 91       	pop	r28
    2bda:	df 91       	pop	r29
    2bdc:	08 95       	ret

00002bde <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <UART_sendString+0x6>
    2be4:	0f 92       	push	r0
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	9b 83       	std	Y+3, r25	; 0x03
    2bec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bee:	19 82       	std	Y+1, r1	; 0x01
    2bf0:	0e c0       	rjmp	.+28     	; 0x2c0e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
    2bf4:	28 2f       	mov	r18, r24
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	e2 0f       	add	r30, r18
    2c00:	f3 1f       	adc	r31, r19
    2c02:	80 81       	ld	r24, Z
    2c04:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <UART_sendByte>
		i++;
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	8f 5f       	subi	r24, 0xFF	; 255
    2c0c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	28 2f       	mov	r18, r24
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	9b 81       	ldd	r25, Y+3	; 0x03
    2c18:	fc 01       	movw	r30, r24
    2c1a:	e2 0f       	add	r30, r18
    2c1c:	f3 1f       	adc	r31, r19
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 23       	and	r24, r24
    2c22:	39 f7       	brne	.-50     	; 0x2bf2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2c30:	0f 93       	push	r16
    2c32:	1f 93       	push	r17
    2c34:	df 93       	push	r29
    2c36:	cf 93       	push	r28
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <UART_receiveString+0xa>
    2c3a:	0f 92       	push	r0
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	9b 83       	std	Y+3, r25	; 0x03
    2c42:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c44:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	28 2f       	mov	r18, r24
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c50:	8c 01       	movw	r16, r24
    2c52:	02 0f       	add	r16, r18
    2c54:	13 1f       	adc	r17, r19
    2c56:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <UART_recieveByte>
    2c5a:	f8 01       	movw	r30, r16
    2c5c:	80 83       	st	Z, r24
    2c5e:	0f c0       	rjmp	.+30     	; 0x2c7e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	8f 5f       	subi	r24, 0xFF	; 255
    2c64:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c70:	8c 01       	movw	r16, r24
    2c72:	02 0f       	add	r16, r18
    2c74:	13 1f       	adc	r17, r19
    2c76:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <UART_recieveByte>
    2c7a:	f8 01       	movw	r30, r16
    2c7c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	28 2f       	mov	r18, r24
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	9b 81       	ldd	r25, Y+3	; 0x03
    2c88:	fc 01       	movw	r30, r24
    2c8a:	e2 0f       	add	r30, r18
    2c8c:	f3 1f       	adc	r31, r19
    2c8e:	80 81       	ld	r24, Z
    2c90:	83 32       	cpi	r24, 0x23	; 35
    2c92:	31 f7       	brne	.-52     	; 0x2c60 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	e2 0f       	add	r30, r18
    2ca2:	f3 1f       	adc	r31, r19
    2ca4:	10 82       	st	Z, r1
}
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	1f 91       	pop	r17
    2cb2:	0f 91       	pop	r16
    2cb4:	08 95       	ret

00002cb6 <__prologue_saves__>:
    2cb6:	2f 92       	push	r2
    2cb8:	3f 92       	push	r3
    2cba:	4f 92       	push	r4
    2cbc:	5f 92       	push	r5
    2cbe:	6f 92       	push	r6
    2cc0:	7f 92       	push	r7
    2cc2:	8f 92       	push	r8
    2cc4:	9f 92       	push	r9
    2cc6:	af 92       	push	r10
    2cc8:	bf 92       	push	r11
    2cca:	cf 92       	push	r12
    2ccc:	df 92       	push	r13
    2cce:	ef 92       	push	r14
    2cd0:	ff 92       	push	r15
    2cd2:	0f 93       	push	r16
    2cd4:	1f 93       	push	r17
    2cd6:	cf 93       	push	r28
    2cd8:	df 93       	push	r29
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
    2cde:	ca 1b       	sub	r28, r26
    2ce0:	db 0b       	sbc	r29, r27
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	09 94       	ijmp

00002cee <__epilogue_restores__>:
    2cee:	2a 88       	ldd	r2, Y+18	; 0x12
    2cf0:	39 88       	ldd	r3, Y+17	; 0x11
    2cf2:	48 88       	ldd	r4, Y+16	; 0x10
    2cf4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cf6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cf8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cfa:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cfc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cfe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d00:	b9 84       	ldd	r11, Y+9	; 0x09
    2d02:	c8 84       	ldd	r12, Y+8	; 0x08
    2d04:	df 80       	ldd	r13, Y+7	; 0x07
    2d06:	ee 80       	ldd	r14, Y+6	; 0x06
    2d08:	fd 80       	ldd	r15, Y+5	; 0x05
    2d0a:	0c 81       	ldd	r16, Y+4	; 0x04
    2d0c:	1b 81       	ldd	r17, Y+3	; 0x03
    2d0e:	aa 81       	ldd	r26, Y+2	; 0x02
    2d10:	b9 81       	ldd	r27, Y+1	; 0x01
    2d12:	ce 0f       	add	r28, r30
    2d14:	d1 1d       	adc	r29, r1
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	ed 01       	movw	r28, r26
    2d22:	08 95       	ret

00002d24 <itoa>:
    2d24:	fb 01       	movw	r30, r22
    2d26:	9f 01       	movw	r18, r30
    2d28:	e8 94       	clt
    2d2a:	42 30       	cpi	r20, 0x02	; 2
    2d2c:	c4 f0       	brlt	.+48     	; 0x2d5e <itoa+0x3a>
    2d2e:	45 32       	cpi	r20, 0x25	; 37
    2d30:	b4 f4       	brge	.+44     	; 0x2d5e <itoa+0x3a>
    2d32:	4a 30       	cpi	r20, 0x0A	; 10
    2d34:	29 f4       	brne	.+10     	; 0x2d40 <itoa+0x1c>
    2d36:	97 fb       	bst	r25, 7
    2d38:	1e f4       	brtc	.+6      	; 0x2d40 <itoa+0x1c>
    2d3a:	90 95       	com	r25
    2d3c:	81 95       	neg	r24
    2d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d40:	64 2f       	mov	r22, r20
    2d42:	77 27       	eor	r23, r23
    2d44:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__udivmodhi4>
    2d48:	80 5d       	subi	r24, 0xD0	; 208
    2d4a:	8a 33       	cpi	r24, 0x3A	; 58
    2d4c:	0c f0       	brlt	.+2      	; 0x2d50 <itoa+0x2c>
    2d4e:	89 5d       	subi	r24, 0xD9	; 217
    2d50:	81 93       	st	Z+, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	a1 f7       	brne	.-24     	; 0x2d40 <itoa+0x1c>
    2d58:	16 f4       	brtc	.+4      	; 0x2d5e <itoa+0x3a>
    2d5a:	5d e2       	ldi	r21, 0x2D	; 45
    2d5c:	51 93       	st	Z+, r21
    2d5e:	10 82       	st	Z, r1
    2d60:	c9 01       	movw	r24, r18
    2d62:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <strrev>

00002d66 <strrev>:
    2d66:	dc 01       	movw	r26, r24
    2d68:	fc 01       	movw	r30, r24
    2d6a:	67 2f       	mov	r22, r23
    2d6c:	71 91       	ld	r23, Z+
    2d6e:	77 23       	and	r23, r23
    2d70:	e1 f7       	brne	.-8      	; 0x2d6a <strrev+0x4>
    2d72:	32 97       	sbiw	r30, 0x02	; 2
    2d74:	04 c0       	rjmp	.+8      	; 0x2d7e <strrev+0x18>
    2d76:	7c 91       	ld	r23, X
    2d78:	6d 93       	st	X+, r22
    2d7a:	70 83       	st	Z, r23
    2d7c:	62 91       	ld	r22, -Z
    2d7e:	ae 17       	cp	r26, r30
    2d80:	bf 07       	cpc	r27, r31
    2d82:	c8 f3       	brcs	.-14     	; 0x2d76 <strrev+0x10>
    2d84:	08 95       	ret

00002d86 <__udivmodhi4>:
    2d86:	aa 1b       	sub	r26, r26
    2d88:	bb 1b       	sub	r27, r27
    2d8a:	51 e1       	ldi	r21, 0x11	; 17
    2d8c:	07 c0       	rjmp	.+14     	; 0x2d9c <__udivmodhi4_ep>

00002d8e <__udivmodhi4_loop>:
    2d8e:	aa 1f       	adc	r26, r26
    2d90:	bb 1f       	adc	r27, r27
    2d92:	a6 17       	cp	r26, r22
    2d94:	b7 07       	cpc	r27, r23
    2d96:	10 f0       	brcs	.+4      	; 0x2d9c <__udivmodhi4_ep>
    2d98:	a6 1b       	sub	r26, r22
    2d9a:	b7 0b       	sbc	r27, r23

00002d9c <__udivmodhi4_ep>:
    2d9c:	88 1f       	adc	r24, r24
    2d9e:	99 1f       	adc	r25, r25
    2da0:	5a 95       	dec	r21
    2da2:	a9 f7       	brne	.-22     	; 0x2d8e <__udivmodhi4_loop>
    2da4:	80 95       	com	r24
    2da6:	90 95       	com	r25
    2da8:	bc 01       	movw	r22, r24
    2daa:	cd 01       	movw	r24, r26
    2dac:	08 95       	ret

00002dae <_exit>:
    2dae:	f8 94       	cli

00002db0 <__stop_program>:
    2db0:	ff cf       	rjmp	.-2      	; 0x2db0 <__stop_program>
